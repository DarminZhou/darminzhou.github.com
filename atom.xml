<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Damin&#39;s Notes</title>
  
  <subtitle>Learn ,Practice ,Summary !</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhoudamin.github.io/"/>
  <updated>2020-04-20T16:52:00.150Z</updated>
  <id>http://zhoudamin.github.io/</id>
  
  <author>
    <name>Damin ZHOU</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>搜索二维矩阵</title>
    <link href="http://zhoudamin.github.io/2020/04/21/%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/"/>
    <id>http://zhoudamin.github.io/2020/04/21/%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/</id>
    <published>2020-04-20T16:49:29.000Z</published>
    <updated>2020-04-20T16:52:00.150Z</updated>
    
    <content type="html"><![CDATA[<p>编写一个高效的算法来判断&nbsp;<em>m</em> x <em>n</em>&nbsp;矩阵中，是否存在一个目标值。该矩阵具有如下特性：</p><ul>    <li>每行中的整数从左到右按升序排列。</li>    <li>每行的第一个整数大于前一行的最后一个整数。</li></ul><p><strong>示例&nbsp;1:</strong></p><pre><strong>输入:</strong>matrix = [  [1,   3,  5,  7],  [10, 11, 16, 20],  [23, 30, 34, 50]]target = 3<strong>输出:</strong> true</pre><p><strong>示例&nbsp;2:</strong></p><pre><strong>输入:</strong>matrix = [  [1,   3,  5,  7],  [10, 11, 16, 20],  [23, 30, 34, 50]]target = 13<strong>输出:</strong> false</pre><div><div>Related Topics</div><div><li>数组</li><li>二分查找</li></div></div><a id="more"></a><p>先算全长，再除2，然后/%</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">searchMatrix</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> m = matrix.length;</span><br><span class="line">      <span class="keyword">if</span> (m== <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">int</span> n =matrix[<span class="number">0</span>].length;</span><br><span class="line">      <span class="keyword">int</span> right = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span> left = m*n-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> indexNum;</span><br><span class="line">      <span class="keyword">int</span> index ;</span><br><span class="line">      <span class="keyword">while</span> (right&lt;=left)&#123;</span><br><span class="line">          index =(right+left)/<span class="number">2</span>;</span><br><span class="line">          indexNum =matrix[index/n][index%n];</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (indexNum ==target)&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">          &#125;<span class="keyword">else</span> <span class="keyword">if</span>(indexNum&gt;target)&#123;</span><br><span class="line">              left=index-<span class="number">1</span>;</span><br><span class="line">          &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">              right = index+<span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;编写一个高效的算法来判断&amp;nbsp;&lt;em&gt;m&lt;/em&gt; x &lt;em&gt;n&lt;/em&gt;&amp;nbsp;矩阵中，是否存在一个目标值。该矩阵具有如下特性：&lt;/p&gt;

&lt;ul&gt;
    &lt;li&gt;每行中的整数从左到右按升序排列。&lt;/li&gt;
    &lt;li&gt;每行的第一个整数大于前一行的最后一个整数。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;示例&amp;nbsp;1:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;strong&gt;输入:&lt;/strong&gt;
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 3
&lt;strong&gt;输出:&lt;/strong&gt; true
&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;示例&amp;nbsp;2:&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;strong&gt;输入:&lt;/strong&gt;
matrix = [
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
target = 13
&lt;strong&gt;输出:&lt;/strong&gt; false&lt;/pre&gt;
&lt;div&gt;&lt;div&gt;Related Topics&lt;/div&gt;&lt;div&gt;&lt;li&gt;数组&lt;/li&gt;&lt;li&gt;二分查找&lt;/li&gt;&lt;/div&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="leetcode" scheme="http://zhoudamin.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>三数之和</title>
    <link href="http://zhoudamin.github.io/2020/04/19/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
    <id>http://zhoudamin.github.io/2020/04/19/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</id>
    <published>2020-04-19T09:53:06.000Z</published>
    <updated>2020-04-19T09:56:22.578Z</updated>
    
    <content type="html"><![CDATA[<p>给你一个包含 <em>n</em> 个整数的数组&nbsp;<code>nums</code>，判断&nbsp;<code>nums</code>&nbsp;中是否存在三个元素 <em>a，b，c ，</em>使得&nbsp;<em>a + b + c = </em>0 ？请你找出所有满足条件且不重复的三元组。</p><p><strong>注意：</strong>答案中不可以包含重复的三元组。</p><p>&nbsp;</p><p><strong>示例：</strong></p><pre>给定数组 nums = [-1, 0, 1, 2, -1, -4]，满足要求的三元组集合为：[  [-1, 0, 1],  [-1, -1, 2]]</pre><div><div>Related Topics</div><div><li>数组</li><li>双指针</li></div></div><a id="more"></a>先排序，然后定点，双指针搜索。另外去重。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; rstList = <span class="keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> first = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> end = nums.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (first &lt; end) &#123;</span><br><span class="line">                <span class="keyword">int</span> temp = nums[i] + nums[first] + nums[end];</span><br><span class="line">                <span class="keyword">if</span> (temp &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    end--;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    first++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                    list.add(nums[i]);</span><br><span class="line">                    list.add(nums[first]);</span><br><span class="line">                    list.add(nums[end]);</span><br><span class="line">                    rstList.add(list);</span><br><span class="line">                    first++;</span><br><span class="line">                    end--;</span><br><span class="line">                    <span class="keyword">while</span> (first &lt; end &amp;&amp; nums[first] == nums[first - <span class="number">1</span>]) &#123;</span><br><span class="line">                        first++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">while</span> (first &lt; end &amp;&amp; nums[end] == nums[end + <span class="number">1</span>]) &#123;</span><br><span class="line">                        end--;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rstList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给你一个包含 &lt;em&gt;n&lt;/em&gt; 个整数的数组&amp;nbsp;&lt;code&gt;nums&lt;/code&gt;，判断&amp;nbsp;&lt;code&gt;nums&lt;/code&gt;&amp;nbsp;中是否存在三个元素 &lt;em&gt;a，b，c ，&lt;/em&gt;使得&amp;nbsp;&lt;em&gt;a + b + c = &lt;/em&gt;0 ？请你找出所有满足条件且不重复的三元组。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;答案中不可以包含重复的三元组。&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;给定数组 nums = [-1, 0, 1, 2, -1, -4]，

满足要求的三元组集合为：
[
  [-1, 0, 1],
  [-1, -1, 2]
]
&lt;/pre&gt;
&lt;div&gt;&lt;div&gt;Related Topics&lt;/div&gt;&lt;div&gt;&lt;li&gt;数组&lt;/li&gt;&lt;li&gt;双指针&lt;/li&gt;&lt;/div&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="leetcode" scheme="http://zhoudamin.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>Apollo核心概念</title>
    <link href="http://zhoudamin.github.io/2019/10/13/Apollo%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
    <id>http://zhoudamin.github.io/2019/10/13/Apollo%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</id>
    <published>2019-10-13T04:03:55.000Z</published>
    <updated>2019-10-13T04:09:45.876Z</updated>
    
    <content type="html"><![CDATA[<p>携程框架Apollo概念介绍</p><a id="more"></a><h1 id="核心功能"><a href="#核心功能" class="headerlink" title="核心功能"></a>核心功能</h1><p>统一管理不同环境、不同集群的配置<br>配置修改实时生效（热发布）<br>版本发布管理</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;携程框架Apollo概念介绍&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发者手册" scheme="http://zhoudamin.github.io/categories/%E5%BC%80%E5%8F%91%E8%80%85%E6%89%8B%E5%86%8C/"/>
    
    
      <category term="Apollo" scheme="http://zhoudamin.github.io/tags/Apollo/"/>
    
  </entry>
  
  <entry>
    <title>ValidParentheses</title>
    <link href="http://zhoudamin.github.io/2019/09/22/ValidParentheses/"/>
    <id>http://zhoudamin.github.io/2019/09/22/ValidParentheses/</id>
    <published>2019-09-22T08:25:18.000Z</published>
    <updated>2019-09-22T08:29:47.399Z</updated>
    
    <content type="html"><![CDATA[<p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><p>左括号必须用相同类型的右括号闭合。<br>左括号必须以正确的顺序闭合。<br>注意空字符串可被认为是有效字符串。   </p><a id="more"></a><p>解题思路：<br>1.用堆栈的数据结构处理括号的入栈与对比<br>2.用map存储键值对，来进行入栈与对比判断  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给定一个只包括 '('，')'，'&#123;'，'&#125;'，'['，']' 的字符串，判断字符串是否有效。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 有效字符串需满足：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 左括号必须用相同类型的右括号闭合。</span></span><br><span class="line"><span class="comment"> * 左括号必须以正确的顺序闭合。</span></span><br><span class="line"><span class="comment"> * 注意空字符串可被认为是有效字符串。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidParentheses</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        String str = <span class="string">"()[]&#123;&#125;"</span>;</span><br><span class="line">        System.out.println(checkValid(str));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">checkValid</span> <span class="params">(String str)</span></span>&#123;</span><br><span class="line">        Stack&lt;Character&gt; stk = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        Map&lt;Character,Character&gt; map = <span class="keyword">new</span> HashMap() ;</span><br><span class="line">        map.put(<span class="string">')'</span>,<span class="string">'('</span>);</span><br><span class="line">        map.put(<span class="string">']'</span>,<span class="string">'['</span>);</span><br><span class="line">        map.put(<span class="string">'&#125;'</span>,<span class="string">'&#123;'</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">0</span>;i&lt;str.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(map.containsValue(str.charAt(i)))&#123;</span><br><span class="line">                stk.push(str.charAt(i));</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(stk.peek().equals(map.get(str.charAt(i))))&#123;</span><br><span class="line">                    stk.pop();</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stk.size()==<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2019.9.22<br>晴天<br>百草园  </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串，判断字符串是否有效。&lt;/p&gt;
&lt;p&gt;有效字符串需满足：&lt;/p&gt;
&lt;p&gt;左括号必须用相同类型的右括号闭合。&lt;br&gt;左括号必须以正确的顺序闭合。&lt;br&gt;注意空字符串可被认为是有效字符串。   &lt;/p&gt;
    
    </summary>
    
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="算法" scheme="http://zhoudamin.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>MissingRange</title>
    <link href="http://zhoudamin.github.io/2019/09/08/MissingRange/"/>
    <id>http://zhoudamin.github.io/2019/09/08/MissingRange/</id>
    <published>2019-09-08T09:39:20.000Z</published>
    <updated>2019-09-08T09:44:20.941Z</updated>
    
    <content type="html"><![CDATA[<p>  Given a sorted integer array where the range of elements are [0, 99] inclusive, return its<br>  missing ranges.<br>  For example, given [0, 1, 3, 50, 75]<br>  return [“2”, “4-&gt;49”, “51-&gt;74”, “76-&gt;99”]</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zdm.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Given a sorted integer array where the range of elements are [0, 99] inclusive, return its</span></span><br><span class="line"><span class="comment"> * missing ranges.</span></span><br><span class="line"><span class="comment"> * For example, given [0, 1, 3, 50, 75], return [“2”, “4-&gt;49”, “51-&gt;74”, “76-&gt;99”]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MissingRange</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">50</span>, <span class="number">75</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> up = <span class="number">99</span>;</span><br><span class="line">        List&lt;String&gt; rst = findMissingRange(arr, low, up);</span><br><span class="line">        System.out.print(rst.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List <span class="title">findMissingRange</span><span class="params">(<span class="keyword">int</span>[] num, <span class="keyword">int</span> low, <span class="keyword">int</span> up)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义返回值</span></span><br><span class="line">        List rst = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理异常</span></span><br><span class="line">        <span class="keyword">if</span> (num == <span class="keyword">null</span> || num.length == <span class="number">0</span>) &#123;</span><br><span class="line">            rst.add(low + <span class="string">"-&gt;"</span> + up);</span><br><span class="line">            <span class="keyword">return</span> rst;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//do business</span></span><br><span class="line">        <span class="comment">//处理首</span></span><br><span class="line">        doAdd(rst, low, num[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理中间</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> pre = num[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt; num.length) &#123;</span><br><span class="line">            <span class="keyword">int</span> cur = num[i];</span><br><span class="line">            <span class="keyword">if</span> (cur != pre + <span class="number">1</span>) &#123;</span><br><span class="line">                doAdd(rst, pre, cur);</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">            pre = cur;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理尾巴</span></span><br><span class="line">        doAdd(rst, num[num.length - <span class="number">1</span>], up + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> rst;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List <span class="title">doAdd</span><span class="params">(List rst, <span class="keyword">int</span> low, <span class="keyword">int</span> up)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//拼接</span></span><br><span class="line">        <span class="keyword">if</span> (low &lt; up &amp;&amp; (low + <span class="number">1</span>) &lt; up) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((up - low) == <span class="number">2</span>) &#123;</span><br><span class="line">                rst.add((low + <span class="number">1</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                rst.add((low + <span class="number">1</span>) + <span class="string">"-&gt;"</span> + (up - <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rst;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间：2019年9月8日<br>地点：百草园<br>天气：雷雨<br>心情：平静…   </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  Given a sorted integer array where the range of elements are [0, 99] inclusive, return its&lt;br&gt;  missing ranges.&lt;br&gt;  For example, given [0, 1, 3, 50, 75]&lt;br&gt;  return [“2”, “4-&amp;gt;49”, “51-&amp;gt;74”, “76-&amp;gt;99”]&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="算法" scheme="http://zhoudamin.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java知识增强</title>
    <link href="http://zhoudamin.github.io/2019/08/07/Java%E7%9F%A5%E8%AF%86%E5%A2%9E%E5%BC%BA/"/>
    <id>http://zhoudamin.github.io/2019/08/07/Java%E7%9F%A5%E8%AF%86%E5%A2%9E%E5%BC%BA/</id>
    <published>2019-08-07T12:39:12.000Z</published>
    <updated>2019-08-07T12:47:25.856Z</updated>
    
    <content type="html"><![CDATA[<p>每日一考！</p><a id="more"></a><ol><li><p>倒排索引</p></li><li><p>讲讲redis里面的哈希表？</p></li><li><p>happen-before的规则？</p></li><li><p>volatile修饰符，synchronize锁</p></li><li><p>java单例模式的实现，懒汉、饿汉？</p></li><li><p>进程与线程的区别，多进程和多线程的区别？</p></li><li><p>HashMap原理，为什么用红黑树，红黑树的特点？</p></li><li><p>快排时间空间复杂度，最好最坏的情况，优化方案？</p></li><li><p>TCP的拥塞控制，具体过程是怎么样的？UDP有拥塞控制吗？如何解决？</p></li><li><p>讲讲了解的垃圾回收算法和回收器，什么时候执行STOP THE WORLD？</p></li></ol><ol start="5"><li>讲一下最大堆和最小堆</li></ol><ol><li><p>LRU算法实现（伪代码）</p></li><li><p>链表倒数第K个数（讲思路）</p></li><li><p>一堆螺丝和螺母用最短时间匹配（代码实现）</p></li><li><p>求每天浏览页面的新用户（Hive QL实现）</p></li><li><p>求抖音小视频每日点击量最高的10个（Hash + 最小堆）</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每日一考！&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="http://zhoudamin.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="http://zhoudamin.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>第一次NZJ</title>
    <link href="http://zhoudamin.github.io/2019/05/13/%E7%AC%AC%E4%B8%80%E6%AC%A1NZJ/"/>
    <id>http://zhoudamin.github.io/2019/05/13/%E7%AC%AC%E4%B8%80%E6%AC%A1NZJ/</id>
    <published>2019-05-13T15:45:04.000Z</published>
    <updated>2019-07-28T02:20:42.833Z</updated>
    
    <content type="html"><![CDATA[<p>入我厂第一次沟，以后还需更加努力。</p><a id="more"></a><p>.23333</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;入我厂第一次沟，以后还需更加努力。&lt;/p&gt;
    
    </summary>
    
    
      <category term="观点与感想" scheme="http://zhoudamin.github.io/categories/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/"/>
    
    
      <category term="工作" scheme="http://zhoudamin.github.io/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Java知识点锦集</title>
    <link href="http://zhoudamin.github.io/2019/04/13/Java%E7%9F%A5%E8%AF%86%E7%82%B9%E9%94%A6%E9%9B%86/"/>
    <id>http://zhoudamin.github.io/2019/04/13/Java%E7%9F%A5%E8%AF%86%E7%82%B9%E9%94%A6%E9%9B%86/</id>
    <published>2019-04-13T09:33:55.000Z</published>
    <updated>2019-04-13T10:21:42.906Z</updated>
    
    <content type="html"><![CDATA[<p>知识锦集</p><a id="more"></a><h2 id="hashMap原理，java8做的改变"><a href="#hashMap原理，java8做的改变" class="headerlink" title="hashMap原理，java8做的改变"></a>hashMap原理，java8做的改变</h2><p>从结构实现来讲，HashMap是数组+链表+红黑树（JDK1.8增加了红黑树部分）实现的。HashMap最多只允许一条记录的键为null，允许多条记录的值为null。HashMap非线程安全。ConcurrentHashMap线程安全。解决碰撞：当出现冲突时，运用拉链法，将关键词为同义词的结点链接在一个单链表中，散列表长m，则定义一个由m个头指针组成的指针数组T，地址为i的结点插入以T(i)为头指针的单链表中。Java8中，冲突的元素超过限制（8），用红黑树替换链表。</p><h2 id="String-和-StringBuilder-的区别"><a href="#String-和-StringBuilder-的区别" class="headerlink" title="String 和 StringBuilder 的区别"></a>String 和 StringBuilder 的区别</h2><p>1）可变与不可变：String不可变，每一次执行“+”都会新生成一个新对象，所以频繁改变字符串的情况中不用String，以节省内存。<br>2）是否多线程安全：StringBuilder并没有对方法进行加同步锁，所以是非线程安全的。StringBuffer和String均线程安全。</p><img src="/2019/04/13/Java%E7%9F%A5%E8%AF%86%E7%82%B9%E9%94%A6%E9%9B%86/111.jpg" class="" title="Vha">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;知识锦集&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="http://zhoudamin.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="http://zhoudamin.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>随想</title>
    <link href="http://zhoudamin.github.io/2019/04/10/%E9%9A%8F%E6%83%B3/"/>
    <id>http://zhoudamin.github.io/2019/04/10/%E9%9A%8F%E6%83%B3/</id>
    <published>2019-04-10T14:21:54.000Z</published>
    <updated>2019-04-10T15:06:22.105Z</updated>
    
    <content type="html"><![CDATA[<p>又到了一年一度域名续费的日子了</p><a id="more"></a><p>加入我厂也有大半年了，从一开始忙到飞起，体验做不完的活，每次想起这个就想到陈老师给形容的：工作就像打仗一样。<br>入我厂从一名Test做起，慢慢才开始做起开发，最近还搞起了设计，学到了Linux，sh，sql，angular，这些之前都很少接触，入我司半年，也算是小有所得。<br>记得刚来的时候，住的特别挫，居然租了一个10楼无电梯的小房子，OMG，想起去年脚扭伤了，泽林和华哥送我上楼，然后好几天都没下来过，不是不想下来看医生，是根本下不来…2333，确实没必要租这么挫的房子，后面在要排到百草园的前夕，实在是受不了，拔草了后面一栋的三楼一个房子，光线不错，不过下水系统设计的很随意，又排起了百草园的队。。。2333都是泪。<br>从去年年底开始看房子，到现在还没定好房子，发现钱在这个大件面前，真的好不值钱，想买的买不起，买的起的太郊区了，浪费钱。</p><p>博客好久没写了，还是好好学习吧，域名就不续了，除了自己访问一下，貌似也没啥用！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又到了一年一度域名续费的日子了&lt;/p&gt;
    
    </summary>
    
    
      <category term="观点与感想" scheme="http://zhoudamin.github.io/categories/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/"/>
    
    
      <category term="随想" scheme="http://zhoudamin.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>人人懂AI</title>
    <link href="http://zhoudamin.github.io/2019/03/03/%E4%BA%BA%E4%BA%BA%E6%87%82AI/"/>
    <id>http://zhoudamin.github.io/2019/03/03/%E4%BA%BA%E4%BA%BA%E6%87%82AI/</id>
    <published>2019-03-03T12:57:38.000Z</published>
    <updated>2019-03-03T14:10:43.795Z</updated>
    
    <content type="html"><![CDATA[<p>人人懂AI入门学习！</p><a id="more"></a><h2 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h2><h3 id="M-P-Model"><a href="#M-P-Model" class="headerlink" title="M-P Model"></a>M-P Model</h3><p>多参数，多权重学习模型</p><p>单层感知器：输入就输出的</p><h3 id="多层感知器"><a href="#多层感知器" class="headerlink" title="多层感知器"></a>多层感知器</h3><p>深度网络的前身。<br>输入层–隐含层–输出层</p><h3 id="Back-Propagetion-Algorithm"><a href="#Back-Propagetion-Algorithm" class="headerlink" title="Back Propagetion Algorithm"></a>Back Propagetion Algorithm</h3><p>前向计算输出，比较期望输出，得到误差，然后反向调整权项值，逼近阈值。</p><p>可以做车牌识别，</p><p>局限性：训练过程，局部最小，不是全局最小，收敛不了。和初始点选择有关，和全局下降速率有关。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人人懂AI入门学习！&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="AI" scheme="http://zhoudamin.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>shell脚本学习与演练</title>
    <link href="http://zhoudamin.github.io/2018/10/14/shell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%BC%94%E7%BB%83/"/>
    <id>http://zhoudamin.github.io/2018/10/14/shell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%BC%94%E7%BB%83/</id>
    <published>2018-10-14T08:30:10.000Z</published>
    <updated>2019-01-12T14:53:58.080Z</updated>
    
    <content type="html"><![CDATA[<p>平时经常接触Linux的操作指导，是不是可以写个脚本一键式解决这些繁琐的操作呢？ok</p><a id="more"></a><h2 id="写一个简单脚本"><a href="#写一个简单脚本" class="headerlink" title="写一个简单脚本"></a>写一个简单脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vi test1.sh</span><br><span class="line"></span><br><span class="line">······························test1.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">! /bin/bash</span></span><br><span class="line">echo "Hello !"</span><br><span class="line">······························</span><br><span class="line"></span><br><span class="line">chmod +x ./test1.sh</span><br><span class="line">./test1.sh</span><br></pre></td></tr></table></figure><h2 id="shell-变量"><a href="#shell-变量" class="headerlink" title="shell 变量"></a>shell 变量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">your_name="zzz"</span><br><span class="line">echo $your_name</span><br><span class="line">your_name="cccc"</span><br><span class="line">echo $your_name</span><br></pre></td></tr></table></figure><h2 id="字符串里写变量"><a href="#字符串里写变量" class="headerlink" title="字符串里写变量"></a>字符串里写变量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">your_name='aaa'</span><br><span class="line">str="Hello, you are \"$your_name\"!"</span><br><span class="line">echo $str</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">array_name=(value0 value1 value2 value3)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line">array_name=(</span><br><span class="line">value0</span><br><span class="line">value1</span><br><span class="line">value2</span><br><span class="line">value3</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 单个</span></span><br><span class="line">valuen=$&#123;array_name[n]&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 所有元素</span></span><br><span class="line">echo $&#123;array_name[@]&#125;</span><br></pre></td></tr></table></figure><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 不是单引号  是斜引号</span></span><br><span class="line"></span><br><span class="line">val=`expr 4 + 2`</span><br><span class="line">echo "and : $val"</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平时经常接触Linux的操作指导，是不是可以写个脚本一键式解决这些繁琐的操作呢？ok&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://zhoudamin.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://zhoudamin.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Java之广度优先搜索算法</title>
    <link href="http://zhoudamin.github.io/2018/08/12/Java%E4%B9%8B%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/"/>
    <id>http://zhoudamin.github.io/2018/08/12/Java%E4%B9%8B%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/</id>
    <published>2018-08-12T14:35:39.000Z</published>
    <updated>2018-08-12T15:01:33.696Z</updated>
    
    <content type="html"><![CDATA[<p>BFS，全称是Breadth First Search。 简单说就是图搜索算法。</p><a id="more"></a><h1 id="Word-Ladder"><a href="#Word-Ladder" class="headerlink" title="Word Ladder"></a>Word Ladder</h1><p>Given two words (beginWord and endWord), and a dictionary’s word list, find the length of shortest transformation sequence frombeginWord to endWord, such that:</p><p>Only one letter can be changed at a time<br>Each intermediate word must exist in the word list<br>For example,</p><p>Given:<br>beginWord = “hit”<br>endWord = “cog”<br>wordList = [“hot”,”dot”,”dog”,”lot”,”log”]</p><p>As one shortest transformation is “hit” -&gt; “hot” -&gt; “dot” -&gt; “dog” -&gt; “cog”,<br>return its length 5.</p><p>Note:</p><p>Return 0 if there is no such transformation sequence.<br>All words have the same length.<br>All words contain only lowercase alphabetic characters. </p><p>简单来说就是从一个单词出发，每次只改变一个字母，直到变到最后一个单词，求最短路径。</p><p>再简单点思考就是 hit—&gt;hot—&gt;lot/dot—&gt;log/dog—&gt;cog</p><p>思路就是用两个set,一个存老的单词，如果添加进路径，就删除；一个存路径。</p><p>循环终止条件是路径匹配到尾巴的目标单词；</p><p>关键代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ladderLen</span><span class="params">(String beginWord ,String endWord ,List&lt;String&gt; wordList)</span></span>&#123;</span><br><span class="line">    Set&lt;String&gt; wordSet = <span class="keyword">new</span> HashSet&lt;&gt;(wordList);</span><br><span class="line">    Set&lt;String&gt; visited = <span class="keyword">new</span> HashSet&lt;&gt;;</span><br><span class="line">    visited.add(beginWord);</span><br><span class="line">    <span class="keyword">int</span> len=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始计算路径与清楚单词集合里的单词</span></span><br><span class="line">    <span class="comment">//算法终止条件</span></span><br><span class="line">    <span class="keyword">while</span>(!visited.contains(endWord))&#123;</span><br><span class="line">        Set&lt;String&gt; temp = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(String word:visited)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;word.length;i++)&#123;</span><br><span class="line">                <span class="keyword">char</span>[] chars=word.toCharArray();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=(<span class="keyword">int</span>)<span class="string">'a'</span>;j&lt;(<span class="keyword">int</span>)<span class="string">'z'</span>+<span class="number">1</span>;j++)&#123;</span><br><span class="line">                    chars[i]=(<span class="keyword">char</span>)j;</span><br><span class="line">                    String newWord=<span class="keyword">new</span> String(chars);</span><br><span class="line">                    <span class="keyword">if</span>(wordSet.contains(newWord))&#123;</span><br><span class="line">                        temp.add(newWord);</span><br><span class="line">                        wordSet.remove(newWord);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        len += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vistied=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;BFS，全称是Breadth First Search。 简单说就是图搜索算法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Java之排序算法</title>
    <link href="http://zhoudamin.github.io/2018/08/06/Java%E4%B9%8B%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://zhoudamin.github.io/2018/08/06/Java%E4%B9%8B%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</id>
    <published>2018-08-06T15:52:53.000Z</published>
    <updated>2018-08-06T16:24:12.834Z</updated>
    
    <content type="html"><![CDATA[<p>排序，各种排序~</p><a id="more"></a><h1 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h1><h2 id="First-Missing-Positive"><a href="#First-Missing-Positive" class="headerlink" title="First Missing Positive"></a>First Missing Positive</h2><p>Given an unsorted integer array, find the first missing positive integer.</p><p>For example, given [1,2,0] return 3 and [3,4,-1,1] return 2.</p><p>Your algorithm should run in O(n) time and uses constant space.</p><p>分析：<br>本质上是桶排序，每当A[i]!=i+1时，A[i]与A[A[i]-1]交换，终止条件是A[i]==A[A[i]-1].</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstMissingPositive</span><span class="params">(<span class="keyword">int</span> [] nums)</span></span>&#123;</span><br><span class="line">    bucket_sort(nums);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]!=(i+<span class="number">1</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.length+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bucket_sort</span><span class="params">(<span class="keyword">int</span> [] A)</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> n=A.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n :i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(A[i]!=i+<span class="number">1</span>)&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(A[i]&lt;<span class="number">1</span> || A[i]&gt;n || A[i]==A[A[i]-<span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> temp = A[i];</span><br><span class="line">                A[i]=A[temp-<span class="number">1</span>];</span><br><span class="line">                A[temp-<span class="number">1</span>]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;排序，各种排序~&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Java之二叉树算法</title>
    <link href="http://zhoudamin.github.io/2018/08/05/Java%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91%E7%AE%97%E6%B3%95/"/>
    <id>http://zhoudamin.github.io/2018/08/05/Java%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91%E7%AE%97%E6%B3%95/</id>
    <published>2018-08-05T15:04:25.000Z</published>
    <updated>2018-08-05T15:14:02.125Z</updated>
    
    <content type="html"><![CDATA[<p>二叉树算法</p><a id="more"></a><h1 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h1><h2 id="Validate-Binary-Search-Tree-验证二叉搜索树"><a href="#Validate-Binary-Search-Tree-验证二叉搜索树" class="headerlink" title="Validate Binary Search Tree 验证二叉搜索树"></a>Validate Binary Search Tree 验证二叉搜索树</h2><p>Given a binary tree, determine if it is a valid binary search tree (BST).</p><p>Assume a BST is defined as follows:</p><p>The left subtree of a node contains only nodes with keys less than the node’s key.<br>The right subtree of a node contains only nodes with keys greater than the node’s key.<br>Both the left and right subtrees must also be binary search trees.</p><p>思路，用递归，左&lt;根&lt;右 &amp;&amp; 左根递归 &amp;&amp; 右根递归<br>关键代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isValidBST(root,INT_MIN,INT_MAX);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">bool <span class="title">isValidBST</span> <span class="params">(TreeNode* root,<span class="keyword">int</span> lower ,<span class="keyword">int</span> upper )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == nullptr) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root.val&gt;lower &amp;&amp; root.val&lt;upper </span><br><span class="line">           &amp;&amp; isValidBST(root.left,lower,root.val)</span><br><span class="line">           &amp;&amp; isValidBST(root.right,root.val,upper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二叉树算法&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Java之数组算法</title>
    <link href="http://zhoudamin.github.io/2018/07/26/Java%E4%B9%8B%E6%95%B0%E7%BB%84%E7%AE%97%E6%B3%95/"/>
    <id>http://zhoudamin.github.io/2018/07/26/Java%E4%B9%8B%E6%95%B0%E7%BB%84%E7%AE%97%E6%B3%95/</id>
    <published>2018-07-26T15:28:19.000Z</published>
    <updated>2018-07-29T03:14:09.336Z</updated>
    
    <content type="html"><![CDATA[<p>数组是常见的算法题，所以多做题，多总结，总是能找到idea的。</p><a id="more"></a><h2 id="Product-of-Array-Except-Self"><a href="#Product-of-Array-Except-Self" class="headerlink" title="Product of Array Except Self"></a>Product of Array Except Self</h2><p>Given an array of n integers where n &gt; 1, nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].</p><p>Solve it without division and in O(n).</p><p>For example, given [1,2,3,4], return [24,12,8,6].</p><p>Follow up:<br>Could you solve it with constant space complexity? (Note: The output array does not count as extra space for the purpose of space complexity analysis.)</p><p>思路：<br>首先，介绍方法： [1,a1,a12,a123].*[a234,a34,a4,1]=[a234,a134,a124,a123]<br>这个算法有个O(1)的思路:就是用常数的方法，从左边乘到右边，再取一个常数，从右边乘到左边</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关键算法段</span></span><br><span class="line"></span><br><span class="line">left[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;num.length;++i)&#123;</span><br><span class="line">    left[i]=left[i-<span class="number">1</span>]*num[i-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> right=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=num.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">    left[i]*=right;   <span class="comment">//right 初始为1，每次乘完再迭代</span></span><br><span class="line">    right*=num[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> left;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数组是常见的算法题，所以多做题，多总结，总是能找到idea的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Essence</title>
    <link href="http://zhoudamin.github.io/2018/07/24/Essence/"/>
    <id>http://zhoudamin.github.io/2018/07/24/Essence/</id>
    <published>2018-07-24T14:54:44.000Z</published>
    <updated>2018-08-15T15:06:33.913Z</updated>
    
    <content type="html"><![CDATA[<p>生活珠玑~</p><a id="more"></a><ol><li>尽量结合兴趣，选准方向，不要动摇，深入研究。</li><li>和牛人共事，和善良的人交友。</li><li>从此刻起，加上思考，梳理手头的todolist，把最重要的工作找出来，全身心突出亮点。</li><li>不问别人为什么，多问自己凭什么！      —by 2018/8/9</li></ol><h3 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h3><ol><li>不要熬夜，尽量少熬夜</li><li>锻炼身体</li><li>不抽烟，少饮酒</li><li>注意日常行为姿势</li><li>多吃健康食品，少吃外卖</li><li>不要用眼过度，注意眼睛的休息</li><li>注重心理健康</li><li>定期体检</li></ol><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><ol><li>建造强大的内心</li><li>尽早有理财念头</li><li>多出去走走</li><li>平和的心态面对一切</li><li>喜欢的东西要攒钱买下来</li><li>不要以为自己吃不胖</li><li>心本善，但是要有提防人的心</li></ol><h3 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h3><ol><li>增加自身的价值(有效社交)</li><li>不要盲目社交</li><li>注重对方的需求，不要一味索取</li><li>要多和人进行高质量的交流</li><li>不要勉强自己合群</li><li>分清自己的社交关系深浅</li><li>去掉一切不必要的应酬和饭局</li><li>不要急切的表达自己的观点，多听少说</li></ol><h3 id="人生"><a href="#人生" class="headerlink" title="人生"></a>人生</h3><ol><li>尽早做好人生规划(短期、长期)</li><li>建立正确的三观(学习、思考、实践)</li><li>趁年轻抓紧努力</li><li>要有自己的核心竞争力</li><li>别因为懒惰放弃能抓住的机会和挑战</li><li>要真正了解自己</li><li>别怕犯错和失败</li><li>不要自作聪明，恃才傲物</li><li>承担责任(社会、工作、家庭、自己的选择)</li><li>不要怕事，但别主动惹事</li><li>尽早进入社会历练</li><li>找到正确的平台比能力更重要</li><li>学会拒绝</li><li>不要轻易跳槽，但每次都要更上一个台阶</li><li>工作尽可能积累资源</li><li>要忠于自己，再忠于工作和公司</li><li>适当的妥协不丢人</li><li>要有长远的眼光，不要总是盯着眼前的利益</li></ol><h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><ol><li>勤学勤思考</li><li>多读书，广读书，读好书</li><li>迷茫的时候就学习</li><li>要有自己的专精</li><li>少刷手机</li><li>操作系统、网络、算法数据结构、离散数学、数据库原理与实践，这些看起来枯燥而无味的基础科学，要了解它们是必须付出非常多的时间才有可能理解通透些。而这些基础的扎实程度，就直接决定了你的高度。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;生活珠玑~&lt;/p&gt;
    
    </summary>
    
    
      <category term="观点与感想" scheme="http://zhoudamin.github.io/categories/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/"/>
    
    
      <category term="观点与感想" scheme="http://zhoudamin.github.io/tags/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>《Hadoop权威指南》 Notes</title>
    <link href="http://zhoudamin.github.io/2018/07/08/%E3%80%8AHadoop%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%8B-Notes/"/>
    <id>http://zhoudamin.github.io/2018/07/08/%E3%80%8AHadoop%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%8B-Notes/</id>
    <published>2018-07-08T04:55:24.000Z</published>
    <updated>2019-05-12T15:21:17.488Z</updated>
    
    <content type="html"><![CDATA[<p>业余读书笔记1</p><a id="more"></a><h1 id="初识Hadoop"><a href="#初识Hadoop" class="headerlink" title="初识Hadoop"></a>初识Hadoop</h1><p>Hadoop项目简述</p><ol><li>Common<ul><li>一组分布式文件系统和通用I/O的组件与接口(序列化、Java RPC 和持久化数据结构)。</li></ul></li><li>Avro<ul><li>一种支持高效、跨语言的RPC以及永久存储数据的序列化系统。</li></ul></li><li>MapReduce<ul><li>分布式数据处理模型和执行环境，运行于大型商用机集群。</li></ul></li><li>HDFS<ul><li>分布式文件系统，运行于大型商用机集群。</li></ul></li><li>Pig<ul><li>一种数据流语言和运行环境，用以检索非常大的数据集。Pig运行在MapReduce和HDFS的集群上。</li></ul></li><li>Hive<ul><li>一个分布式、按列存储的数据仓库。Hive管理HDFS中存储的数据，并提供基于SQL的查询语言以查询数据。</li></ul></li><li>HBase<ul><li>一个分布式、按列存储数据库。</li></ul></li><li>ZooKeeper<ul><li>一个分布式、可用性高的协调服务。</li></ul></li><li>Sqoop<ul><li>在数据库和HDFS之间高效传输数据的工具。</li></ul></li></ol><h1 id="关于MapReduce"><a href="#关于MapReduce" class="headerlink" title="关于MapReduce"></a>关于MapReduce</h1><h2 id="数据处理方法"><a href="#数据处理方法" class="headerlink" title="数据处理方法"></a>数据处理方法</h2><ul><li>将输入数据分成固定大小的块，然后把每块分配到各个进程，这样一来，即使有些进程能处理更多数据，我们也可以为他们分配更多的数据。</li><li>对每块数据进行处理，取每块中的最大值，作为每块的最高标准。</li><li>多台机器如何处理协调性和可靠性的问题。</li></ul><h2 id="查找最高气温的方法论"><a href="#查找最高气温的方法论" class="headerlink" title="查找最高气温的方法论"></a>查找最高气温的方法论</h2><ul><li>Hadoop自身提供一套可优化网络序列化传输的基本类型，在org.apache.hadoop.io包中。</li><li>map()方法的输入时一个键和一个值，首先将包含有一行输入的text值转换成java的String类型，之后使用subString()方法提取感兴趣的列。</li><li>map()方法还提供了OutputCollector实例用于输出内容的写入，在这种情况下，将年份按照Text对象进行读写，将气温值封装在IntWritable类型中。</li><li>测试气温数据是否缺失or显示为正确的气温读数。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;业余读书笔记1&lt;/p&gt;
    
    </summary>
    
    
      <category term="读书笔记" scheme="http://zhoudamin.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Notes" scheme="http://zhoudamin.github.io/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程实战</title>
    <link href="http://zhoudamin.github.io/2018/06/16/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
    <id>http://zhoudamin.github.io/2018/06/16/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/</id>
    <published>2018-06-16T02:54:24.000Z</published>
    <updated>2018-06-16T03:17:54.472Z</updated>
    
    <content type="html"><![CDATA[<p>基于《Java并发编程实战》，作者Brain等。</p><a id="more"></a><h1 id="任务执行"><a href="#任务执行" class="headerlink" title="任务执行"></a>任务执行</h1><h2 id="顺序执行"><a href="#顺序执行" class="headerlink" title="顺序执行"></a>顺序执行</h2><p>SingleThreadWebServer顺序处理他的任务：接收到达80端口的HTTP请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleThreadWebServer</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    ServerSocket socket = <span class="keyword">new</span> ServerSocket(<span class="number">80</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">    Socket connection = socket.accept();</span><br><span class="line">    handleRequest(connection);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="无限创建线程的缺点"><a href="#无限创建线程的缺点" class="headerlink" title="无限创建线程的缺点"></a>无限创建线程的缺点</h3><ol><li>线程生命周期的开销</li><li>资源消耗量、尤其是内存</li><li>稳定性差</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于《Java并发编程实战》，作者Brain等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发者手册" scheme="http://zhoudamin.github.io/categories/%E5%BC%80%E5%8F%91%E8%80%85%E6%89%8B%E5%86%8C/"/>
    
      <category term="编程语言" scheme="http://zhoudamin.github.io/categories/%E5%BC%80%E5%8F%91%E8%80%85%E6%89%8B%E5%86%8C/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="并发" scheme="http://zhoudamin.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Java实现彩色二维码</title>
    <link href="http://zhoudamin.github.io/2018/05/02/Java%E5%AE%9E%E7%8E%B0%E5%BD%A9%E8%89%B2%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    <id>http://zhoudamin.github.io/2018/05/02/Java%E5%AE%9E%E7%8E%B0%E5%BD%A9%E8%89%B2%E4%BA%8C%E7%BB%B4%E7%A0%81/</id>
    <published>2018-05-02T11:30:05.000Z</published>
    <updated>2018-05-02T11:35:35.945Z</updated>
    
    <content type="html"><![CDATA[<p>使用Zxing库实现彩色二维码的生成，代码如下：</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.zxing.BarcodeFormat;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.EncodeHintType;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.MultiFormatWriter;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.client.j2se.MatrixToImageWriter;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.common.BitMatrix;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.qrcode.QRCodeWriter;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.qrcode.encoder.Encoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TexturedEncoderHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> contents</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> width</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> height</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imgPath</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(String contents, <span class="keyword">int</span> width, <span class="keyword">int</span> height, ErrorCorrectionLevel level, String imgPath)</span> </span>&#123;</span><br><span class="line">        Hashtable&lt;EncodeHintType, Object&gt; hints = <span class="keyword">new</span> Hashtable&lt;EncodeHintType, Object&gt;();</span><br><span class="line">        <span class="comment">// 指定纠错等级</span></span><br><span class="line">        hints.put(EncodeHintType.ERROR_CORRECTION,  level);</span><br><span class="line">        <span class="comment">// 指定编码格式</span></span><br><span class="line">        hints.put(EncodeHintType.CHARACTER_SET, <span class="string">"GBK"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> [][] bitMatrix = <span class="keyword">new</span> QRCodeWriter().encode(contents, BarcodeFormat.QR_CODE, width, height, hints);</span><br><span class="line">            <span class="keyword">int</span> len=bitMatrix.length;</span><br><span class="line">            width=len*<span class="number">12</span>;</span><br><span class="line">            <span class="keyword">boolean</span> [][]matrixBoo=<span class="keyword">new</span> <span class="keyword">boolean</span>[width][width];</span><br><span class="line">            MyPic(bitMatrix,matrixBoo,imgPath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">MyPic</span><span class="params">(<span class="keyword">int</span> [][] bitmatrix,<span class="keyword">boolean</span> [][] matrixboo,String pathname)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedImage matrix = <span class="keyword">new</span> BufferedImage(matrixboo.length , matrixboo[<span class="number">0</span>].length, BufferedImage.TYPE_INT_ARGB);</span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;bitmatrix.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;bitmatrix[<span class="number">0</span>].length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(bitmatrix[i][j]==<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> rr= rand.nextInt(<span class="number">255</span>);</span><br><span class="line">                    <span class="keyword">int</span> gg= rand.nextInt(<span class="number">255</span>);</span><br><span class="line">                    <span class="keyword">int</span> bb= rand.nextInt(<span class="number">255</span>);</span><br><span class="line">                    Color color = <span class="keyword">new</span> Color(rr, gg, bb);</span><br><span class="line">                    <span class="keyword">int</span> colorInt = color.getRGB();</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> n=i*<span class="number">12</span>;n&lt;(i+<span class="number">1</span>)*<span class="number">12</span>;n++)&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> m=j*<span class="number">12</span>;m&lt;(j+<span class="number">1</span>)*<span class="number">12</span>;m++) &#123;</span><br><span class="line">                            matrixboo[n][m] = <span class="keyword">true</span>;</span><br><span class="line">                            matrix.setRGB(n, m, colorInt );</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ImageIO.write(matrix, <span class="string">"PNG"</span>, <span class="keyword">new</span> File(pathname));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime=System.currentTimeMillis();</span><br><span class="line">        String imgPath = <span class="string">"guangzhou.jpg"</span>;</span><br><span class="line">        String contents = <span class="string">"guangzhou"</span>;</span><br><span class="line">        <span class="keyword">int</span> width = <span class="number">300</span>, height = <span class="number">300</span>;</span><br><span class="line">        ErrorCorrectionLevel level=ErrorCorrectionLevel.L;</span><br><span class="line">        TexturedEncoderHandler handler = <span class="keyword">new</span> TexturedEncoderHandler();</span><br><span class="line">        handler.encode(contents, width, height,  level, imgPath);</span><br><span class="line">        <span class="keyword">long</span> endTime=System.currentTimeMillis(); <span class="comment">//获取结束时间</span></span><br><span class="line">        System.out.println(<span class="string">"程序运行时间： "</span>+(endTime-startTime)+<span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Zxing库实现彩色二维码的生成，代码如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程语言" scheme="http://zhoudamin.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java 二维码" scheme="http://zhoudamin.github.io/tags/Java-%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>HTTP基础</title>
    <link href="http://zhoudamin.github.io/2018/04/25/HTTP%E5%9F%BA%E7%A1%80/"/>
    <id>http://zhoudamin.github.io/2018/04/25/HTTP%E5%9F%BA%E7%A1%80/</id>
    <published>2018-04-25T10:18:20.000Z</published>
    <updated>2018-04-25T10:19:08.999Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务器意图"><a href="#服务器意图" class="headerlink" title="服务器意图"></a>服务器意图</h2><blockquote><ul><li>GET：获取资源，用来请求已经被URI识别的资源</li><li>POST：传输实体主体</li><li>PUT：传输文件</li><li>HEAD：获得报文首部</li><li>DELETE：删除文件</li><li>OPTIONS：询问支持的方法</li></ul></blockquote><h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><table><thead><tr><th></th><th align="right">类别</th><th align="center">原因短语</th></tr></thead><tbody><tr><td>1XX</td><td align="right">Informational(信息性状态码)</td><td align="center">接收的请求正在处理</td></tr><tr><td>2XX</td><td align="right">Success(成功状态码)</td><td align="center">请求正常处理完毕</td></tr><tr><td>3XX</td><td align="right">Redirection (重定向状态码)</td><td align="center">需要进行附加操作以完成请求</td></tr><tr><td>4XX</td><td align="right">Client Error(客户端错误状态码)</td><td align="center">服务器无法处理请求</td></tr><tr><td>5XX</td><td align="right">Server Error(服务器错误状态码)</td><td align="center">服务器处理请求出错</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;服务器意图&quot;&gt;&lt;a href=&quot;#服务器意图&quot; class=&quot;headerlink&quot; title=&quot;服务器意图&quot;&gt;&lt;/a&gt;服务器意图&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;GET：获取资源，用来请求已经被URI识别的资源&lt;/li&gt;
&lt;li&gt;POST：
      
    
    </summary>
    
    
      <category term="理解计算机" scheme="http://zhoudamin.github.io/categories/%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="HTTP" scheme="http://zhoudamin.github.io/tags/HTTP/"/>
    
  </entry>
  
</feed>
