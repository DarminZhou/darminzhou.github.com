<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Damin&#39;s Notes</title>
  
  <subtitle>Learn ,Practice ,Summary !</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhoudamin.github.io/"/>
  <updated>2019-09-08T09:42:08.907Z</updated>
  <id>http://zhoudamin.github.io/</id>
  
  <author>
    <name>Damin ZHOU</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MissingRange</title>
    <link href="http://zhoudamin.github.io/2019/09/08/MissingRange/"/>
    <id>http://zhoudamin.github.io/2019/09/08/MissingRange/</id>
    <published>2019-09-08T09:39:20.000Z</published>
    <updated>2019-09-08T09:42:08.907Z</updated>
    
    <content type="html"><![CDATA[<p>  Given a sorted integer array where the range of elements are [0, 99] inclusive, return its<br>  missing ranges.<br>  For example, given [0, 1, 3, 50, 75]<br>  return [“2”, “4-&gt;49”, “51-&gt;74”, “76-&gt;99”]<br><a id="more"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zdm.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Given a sorted integer array where the range of elements are [0, 99] inclusive, return its</span></span><br><span class="line"><span class="comment"> * missing ranges.</span></span><br><span class="line"><span class="comment"> * For example, given [0, 1, 3, 50, 75], return [“2”, “4-&gt;49”, “51-&gt;74”, “76-&gt;99”]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MissingRange</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">50</span>, <span class="number">75</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> low = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> up = <span class="number">99</span>;</span><br><span class="line">        List&lt;String&gt; rst = findMissingRange(arr, low, up);</span><br><span class="line">        System.out.print(rst.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List <span class="title">findMissingRange</span><span class="params">(<span class="keyword">int</span>[] num, <span class="keyword">int</span> low, <span class="keyword">int</span> up)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义返回值</span></span><br><span class="line">        List rst = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理异常</span></span><br><span class="line">        <span class="keyword">if</span> (num == <span class="keyword">null</span> || num.length == <span class="number">0</span>) &#123;</span><br><span class="line">            rst.add(low + <span class="string">"-&gt;"</span> + up);</span><br><span class="line">            <span class="keyword">return</span> rst;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//do business</span></span><br><span class="line">        <span class="comment">//处理首</span></span><br><span class="line">        doAdd(rst, low, num[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理中间</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> pre = num[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (i &lt; num.length) &#123;</span><br><span class="line">            <span class="keyword">int</span> cur = num[i];</span><br><span class="line">            <span class="keyword">if</span> (cur != pre + <span class="number">1</span>) &#123;</span><br><span class="line">                doAdd(rst, pre, cur);</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">            pre = cur;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理尾巴</span></span><br><span class="line">        doAdd(rst, num[num.length - <span class="number">1</span>], up + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> rst;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List <span class="title">doAdd</span><span class="params">(List rst, <span class="keyword">int</span> low, <span class="keyword">int</span> up)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//拼接</span></span><br><span class="line">        <span class="keyword">if</span> (low &lt; up &amp;&amp; (low + <span class="number">1</span>) &lt; up) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((up - low) == <span class="number">2</span>) &#123;</span><br><span class="line">                rst.add((low + <span class="number">1</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                rst.add((low + <span class="number">1</span>) + <span class="string">"-&gt;"</span> + (up - <span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rst;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  Given a sorted integer array where the range of elements are [0, 99] inclusive, return its&lt;br&gt;  missing ranges.&lt;br&gt;  For example, given [0, 1, 3, 50, 75]&lt;br&gt;  return [“2”, “4-&amp;gt;49”, “51-&amp;gt;74”, “76-&amp;gt;99”]&lt;br&gt;
    
    </summary>
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="算法" scheme="http://zhoudamin.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Java知识增强</title>
    <link href="http://zhoudamin.github.io/2019/08/07/Java%E7%9F%A5%E8%AF%86%E5%A2%9E%E5%BC%BA/"/>
    <id>http://zhoudamin.github.io/2019/08/07/Java知识增强/</id>
    <published>2019-08-07T12:39:12.000Z</published>
    <updated>2019-08-07T12:47:25.856Z</updated>
    
    <content type="html"><![CDATA[<p>每日一考！<br><a id="more"></a></p><ol><li><p>倒排索引</p></li><li><p>讲讲redis里面的哈希表？</p></li><li><p>happen-before的规则？</p></li><li><p>volatile修饰符，synchronize锁</p></li><li><p>java单例模式的实现，懒汉、饿汉？</p></li><li><p>进程与线程的区别，多进程和多线程的区别？</p></li><li><p>HashMap原理，为什么用红黑树，红黑树的特点？</p></li><li><p>快排时间空间复杂度，最好最坏的情况，优化方案？</p></li><li><p>TCP的拥塞控制，具体过程是怎么样的？UDP有拥塞控制吗？如何解决？</p></li><li><p>讲讲了解的垃圾回收算法和回收器，什么时候执行STOP THE WORLD？</p></li></ol><ol start="5"><li>讲一下最大堆和最小堆</li></ol><ol><li><p>LRU算法实现（伪代码）</p></li><li><p>链表倒数第K个数（讲思路）</p></li><li><p>一堆螺丝和螺母用最短时间匹配（代码实现）</p></li><li><p>求每天浏览页面的新用户（Hive QL实现）</p></li><li><p>求抖音小视频每日点击量最高的10个（Hash + 最小堆）</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每日一考！&lt;br&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://zhoudamin.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="http://zhoudamin.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>第一次NZJ</title>
    <link href="http://zhoudamin.github.io/2019/05/13/%E7%AC%AC%E4%B8%80%E6%AC%A1NZJ/"/>
    <id>http://zhoudamin.github.io/2019/05/13/第一次NZJ/</id>
    <published>2019-05-13T15:45:04.000Z</published>
    <updated>2019-07-28T02:20:42.833Z</updated>
    
    <content type="html"><![CDATA[<p>入我厂第一次沟，以后还需更加努力。<br><a id="more"></a><br>.23333</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;入我厂第一次沟，以后还需更加努力。&lt;br&gt;
    
    </summary>
    
      <category term="观点与感想" scheme="http://zhoudamin.github.io/categories/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/"/>
    
    
      <category term="工作" scheme="http://zhoudamin.github.io/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>Java知识点锦集</title>
    <link href="http://zhoudamin.github.io/2019/04/13/Java%E7%9F%A5%E8%AF%86%E7%82%B9%E9%94%A6%E9%9B%86/"/>
    <id>http://zhoudamin.github.io/2019/04/13/Java知识点锦集/</id>
    <published>2019-04-13T09:33:55.000Z</published>
    <updated>2019-04-13T10:21:42.906Z</updated>
    
    <content type="html"><![CDATA[<p>知识锦集<br><a id="more"></a></p><h2 id="hashMap原理，java8做的改变"><a href="#hashMap原理，java8做的改变" class="headerlink" title="hashMap原理，java8做的改变"></a>hashMap原理，java8做的改变</h2><p>从结构实现来讲，HashMap是数组+链表+红黑树（JDK1.8增加了红黑树部分）实现的。HashMap最多只允许一条记录的键为null，允许多条记录的值为null。HashMap非线程安全。ConcurrentHashMap线程安全。解决碰撞：当出现冲突时，运用拉链法，将关键词为同义词的结点链接在一个单链表中，散列表长m，则定义一个由m个头指针组成的指针数组T，地址为i的结点插入以T(i)为头指针的单链表中。Java8中，冲突的元素超过限制（8），用红黑树替换链表。</p><h2 id="String-和-StringBuilder-的区别"><a href="#String-和-StringBuilder-的区别" class="headerlink" title="String 和 StringBuilder 的区别"></a>String 和 StringBuilder 的区别</h2><p>1）可变与不可变：String不可变，每一次执行“+”都会新生成一个新对象，所以频繁改变字符串的情况中不用String，以节省内存。<br>2）是否多线程安全：StringBuilder并没有对方法进行加同步锁，所以是非线程安全的。StringBuffer和String均线程安全。</p><img src="/2019/04/13/Java知识点锦集/111.jpg" title="Vha">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;知识锦集&lt;br&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://zhoudamin.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="http://zhoudamin.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>随想</title>
    <link href="http://zhoudamin.github.io/2019/04/10/%E9%9A%8F%E6%83%B3/"/>
    <id>http://zhoudamin.github.io/2019/04/10/随想/</id>
    <published>2019-04-10T14:21:54.000Z</published>
    <updated>2019-04-10T15:06:22.105Z</updated>
    
    <content type="html"><![CDATA[<p>又到了一年一度域名续费的日子了<br><a id="more"></a><br>加入我厂也有大半年了，从一开始忙到飞起，体验做不完的活，每次想起这个就想到陈老师给形容的：工作就像打仗一样。<br>入我厂从一名Test做起，慢慢才开始做起开发，最近还搞起了设计，学到了Linux，sh，sql，angular，这些之前都很少接触，入我司半年，也算是小有所得。<br>记得刚来的时候，住的特别挫，居然租了一个10楼无电梯的小房子，OMG，想起去年脚扭伤了，泽林和华哥送我上楼，然后好几天都没下来过，不是不想下来看医生，是根本下不来…2333，确实没必要租这么挫的房子，后面在要排到百草园的前夕，实在是受不了，拔草了后面一栋的三楼一个房子，光线不错，不过下水系统设计的很随意，又排起了百草园的队。。。2333都是泪。<br>从去年年底开始看房子，到现在还没定好房子，发现钱在这个大件面前，真的好不值钱，想买的买不起，买的起的太郊区了，浪费钱。</p><p>博客好久没写了，还是好好学习吧，域名就不续了，除了自己访问一下，貌似也没啥用！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又到了一年一度域名续费的日子了&lt;br&gt;
    
    </summary>
    
      <category term="观点与感想" scheme="http://zhoudamin.github.io/categories/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/"/>
    
    
      <category term="随想" scheme="http://zhoudamin.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>人人懂AI</title>
    <link href="http://zhoudamin.github.io/2019/03/03/%E4%BA%BA%E4%BA%BA%E6%87%82AI/"/>
    <id>http://zhoudamin.github.io/2019/03/03/人人懂AI/</id>
    <published>2019-03-03T12:57:38.000Z</published>
    <updated>2019-03-03T14:10:43.795Z</updated>
    
    <content type="html"><![CDATA[<p>人人懂AI入门学习！<br><a id="more"></a></p><h2 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h2><h3 id="M-P-Model"><a href="#M-P-Model" class="headerlink" title="M-P Model"></a>M-P Model</h3><p>多参数，多权重学习模型</p><p>单层感知器：输入就输出的</p><h3 id="多层感知器"><a href="#多层感知器" class="headerlink" title="多层感知器"></a>多层感知器</h3><p>深度网络的前身。<br>输入层–隐含层–输出层</p><h3 id="Back-Propagetion-Algorithm"><a href="#Back-Propagetion-Algorithm" class="headerlink" title="Back Propagetion Algorithm"></a>Back Propagetion Algorithm</h3><p>前向计算输出，比较期望输出，得到误差，然后反向调整权项值，逼近阈值。</p><p>可以做车牌识别，</p><p>局限性：训练过程，局部最小，不是全局最小，收敛不了。和初始点选择有关，和全局下降速率有关。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人人懂AI入门学习！&lt;br&gt;
    
    </summary>
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="AI" scheme="http://zhoudamin.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>shell脚本学习与演练</title>
    <link href="http://zhoudamin.github.io/2018/10/14/shell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%BC%94%E7%BB%83/"/>
    <id>http://zhoudamin.github.io/2018/10/14/shell脚本学习与演练/</id>
    <published>2018-10-14T08:30:10.000Z</published>
    <updated>2019-01-12T14:53:58.080Z</updated>
    
    <content type="html"><![CDATA[<p>平时经常接触Linux的操作指导，是不是可以写个脚本一键式解决这些繁琐的操作呢？ok</p><a id="more"></a><h2 id="写一个简单脚本"><a href="#写一个简单脚本" class="headerlink" title="写一个简单脚本"></a>写一个简单脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vi test1.sh</span><br><span class="line"></span><br><span class="line">······························test1.sh</span><br><span class="line"><span class="meta">#</span>! /bin/bash</span><br><span class="line">echo "Hello !"</span><br><span class="line">······························</span><br><span class="line"></span><br><span class="line">chmod +x ./test1.sh</span><br><span class="line">./test1.sh</span><br></pre></td></tr></table></figure><h2 id="shell-变量"><a href="#shell-变量" class="headerlink" title="shell 变量"></a>shell 变量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">your_name="zzz"</span><br><span class="line">echo $your_name</span><br><span class="line">your_name="cccc"</span><br><span class="line">echo $your_name</span><br></pre></td></tr></table></figure><h2 id="字符串里写变量"><a href="#字符串里写变量" class="headerlink" title="字符串里写变量"></a>字符串里写变量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">your_name='aaa'</span><br><span class="line">str="Hello, you are \"$your_name\"!"</span><br><span class="line">echo $str</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">array_name=(value0 value1 value2 value3)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> or</span><br><span class="line">array_name=(</span><br><span class="line">value0</span><br><span class="line">value1</span><br><span class="line">value2</span><br><span class="line">value3</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 单个</span><br><span class="line">valuen=$&#123;array_name[n]&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 所有元素</span><br><span class="line">echo $&#123;array_name[@]&#125;</span><br></pre></td></tr></table></figure><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>!/bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span> 不是单引号  是斜引号</span><br><span class="line"></span><br><span class="line">val=`expr 4 + 2`</span><br><span class="line">echo "and : $val"</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平时经常接触Linux的操作指导，是不是可以写个脚本一键式解决这些繁琐的操作呢？ok&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://zhoudamin.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://zhoudamin.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Java之广度优先搜索算法</title>
    <link href="http://zhoudamin.github.io/2018/08/12/Java%E4%B9%8B%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/"/>
    <id>http://zhoudamin.github.io/2018/08/12/Java之广度优先搜索算法/</id>
    <published>2018-08-12T14:35:39.000Z</published>
    <updated>2018-08-12T15:01:33.696Z</updated>
    
    <content type="html"><![CDATA[<p>BFS，全称是Breadth First Search。 简单说就是图搜索算法。<br><a id="more"></a></p><h1 id="Word-Ladder"><a href="#Word-Ladder" class="headerlink" title="Word Ladder"></a>Word Ladder</h1><p>Given two words (beginWord and endWord), and a dictionary’s word list, find the length of shortest transformation sequence frombeginWord to endWord, such that:</p><p>Only one letter can be changed at a time<br>Each intermediate word must exist in the word list<br>For example,</p><p>Given:<br>beginWord = “hit”<br>endWord = “cog”<br>wordList = [“hot”,”dot”,”dog”,”lot”,”log”]</p><p>As one shortest transformation is “hit” -&gt; “hot” -&gt; “dot” -&gt; “dog” -&gt; “cog”,<br>return its length 5.</p><p>Note:</p><p>Return 0 if there is no such transformation sequence.<br>All words have the same length.<br>All words contain only lowercase alphabetic characters. </p><p>简单来说就是从一个单词出发，每次只改变一个字母，直到变到最后一个单词，求最短路径。</p><p>再简单点思考就是 hit—&gt;hot—&gt;lot/dot—&gt;log/dog—&gt;cog</p><p>思路就是用两个set,一个存老的单词，如果添加进路径，就删除；一个存路径。</p><p>循环终止条件是路径匹配到尾巴的目标单词；</p><p>关键代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ladderLen</span><span class="params">(String beginWord ,String endWord ,List&lt;String&gt; wordList)</span></span>&#123;</span><br><span class="line">    Set&lt;String&gt; wordSet = <span class="keyword">new</span> HashSet&lt;&gt;(wordList);</span><br><span class="line">    Set&lt;String&gt; visited = <span class="keyword">new</span> HashSet&lt;&gt;;</span><br><span class="line">    visited.add(beginWord);</span><br><span class="line">    <span class="keyword">int</span> len=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始计算路径与清楚单词集合里的单词</span></span><br><span class="line">    <span class="comment">//算法终止条件</span></span><br><span class="line">    <span class="keyword">while</span>(!visited.contains(endWord))&#123;</span><br><span class="line">        Set&lt;String&gt; temp = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(String word:visited)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;word.length;i++)&#123;</span><br><span class="line">                <span class="keyword">char</span>[] chars=word.toCharArray();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=(<span class="keyword">int</span>)<span class="string">'a'</span>;j&lt;(<span class="keyword">int</span>)<span class="string">'z'</span>+<span class="number">1</span>;j++)&#123;</span><br><span class="line">                    chars[i]=(<span class="keyword">char</span>)j;</span><br><span class="line">                    String newWord=<span class="keyword">new</span> String(chars);</span><br><span class="line">                    <span class="keyword">if</span>(wordSet.contains(newWord))&#123;</span><br><span class="line">                        temp.add(newWord);</span><br><span class="line">                        wordSet.remove(newWord);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        len += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vistied=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;BFS，全称是Breadth First Search。 简单说就是图搜索算法。&lt;br&gt;
    
    </summary>
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Java之排序算法</title>
    <link href="http://zhoudamin.github.io/2018/08/06/Java%E4%B9%8B%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://zhoudamin.github.io/2018/08/06/Java之排序算法/</id>
    <published>2018-08-06T15:52:53.000Z</published>
    <updated>2018-08-06T16:24:12.834Z</updated>
    
    <content type="html"><![CDATA[<p>排序，各种排序~<br><a id="more"></a></p><h1 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h1><h2 id="First-Missing-Positive"><a href="#First-Missing-Positive" class="headerlink" title="First Missing Positive"></a>First Missing Positive</h2><p>Given an unsorted integer array, find the first missing positive integer.</p><p>For example, given [1,2,0] return 3 and [3,4,-1,1] return 2.</p><p>Your algorithm should run in O(n) time and uses constant space.</p><p>分析：<br>本质上是桶排序，每当A[i]!=i+1时，A[i]与A[A[i]-1]交换，终止条件是A[i]==A[A[i]-1].</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstMissingPositive</span><span class="params">(<span class="keyword">int</span> [] nums)</span></span>&#123;</span><br><span class="line">    bucket_sort(nums);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]!=(i+<span class="number">1</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.length+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bucket_sort</span><span class="params">(<span class="keyword">int</span> [] A)</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> n=A.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n :i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(A[i]!=i+<span class="number">1</span>)&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(A[i]&lt;<span class="number">1</span> || A[i]&gt;n || A[i]==A[A[i]-<span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> temp = A[i];</span><br><span class="line">                A[i]=A[temp-<span class="number">1</span>];</span><br><span class="line">                A[temp-<span class="number">1</span>]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;排序，各种排序~&lt;br&gt;
    
    </summary>
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Java之二叉树算法</title>
    <link href="http://zhoudamin.github.io/2018/08/05/Java%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91%E7%AE%97%E6%B3%95/"/>
    <id>http://zhoudamin.github.io/2018/08/05/Java之二叉树算法/</id>
    <published>2018-08-05T15:04:25.000Z</published>
    <updated>2018-08-05T15:14:02.125Z</updated>
    
    <content type="html"><![CDATA[<p>二叉树算法<br><a id="more"></a></p><h1 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h1><h2 id="Validate-Binary-Search-Tree-验证二叉搜索树"><a href="#Validate-Binary-Search-Tree-验证二叉搜索树" class="headerlink" title="Validate Binary Search Tree 验证二叉搜索树"></a>Validate Binary Search Tree 验证二叉搜索树</h2><p>Given a binary tree, determine if it is a valid binary search tree (BST).</p><p>Assume a BST is defined as follows:</p><p>The left subtree of a node contains only nodes with keys less than the node’s key.<br>The right subtree of a node contains only nodes with keys greater than the node’s key.<br>Both the left and right subtrees must also be binary search trees.</p><p>思路，用递归，左&lt;根&lt;右 &amp;&amp; 左根递归 &amp;&amp; 右根递归<br>关键代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isValidBST(root,INT_MIN,INT_MAX);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">bool <span class="title">isValidBST</span> <span class="params">(TreeNode* root,<span class="keyword">int</span> lower ,<span class="keyword">int</span> upper )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == nullptr) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root.val&gt;lower &amp;&amp; root.val&lt;upper </span><br><span class="line">           &amp;&amp; isValidBST(root.left,lower,root.val)</span><br><span class="line">           &amp;&amp; isValidBST(root.right,root.val,upper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二叉树算法&lt;br&gt;
    
    </summary>
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Java之数组算法</title>
    <link href="http://zhoudamin.github.io/2018/07/26/Java%E4%B9%8B%E6%95%B0%E7%BB%84%E7%AE%97%E6%B3%95/"/>
    <id>http://zhoudamin.github.io/2018/07/26/Java之数组算法/</id>
    <published>2018-07-26T15:28:19.000Z</published>
    <updated>2018-07-29T03:14:09.336Z</updated>
    
    <content type="html"><![CDATA[<p>数组是常见的算法题，所以多做题，多总结，总是能找到idea的。<br><a id="more"></a></p><h2 id="Product-of-Array-Except-Self"><a href="#Product-of-Array-Except-Self" class="headerlink" title="Product of Array Except Self"></a>Product of Array Except Self</h2><p>Given an array of n integers where n &gt; 1, nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].</p><p>Solve it without division and in O(n).</p><p>For example, given [1,2,3,4], return [24,12,8,6].</p><p>Follow up:<br>Could you solve it with constant space complexity? (Note: The output array does not count as extra space for the purpose of space complexity analysis.)</p><p>思路：<br>首先，介绍方法： [1,a1,a12,a123].*[a234,a34,a4,1]=[a234,a134,a124,a123]<br>这个算法有个O(1)的思路:就是用常数的方法，从左边乘到右边，再取一个常数，从右边乘到左边</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关键算法段</span></span><br><span class="line"></span><br><span class="line">left[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;num.length;++i)&#123;</span><br><span class="line">    left[i]=left[i-<span class="number">1</span>]*num[i-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> right=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=num.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">    left[i]*=right;   <span class="comment">//right 初始为1，每次乘完再迭代</span></span><br><span class="line">    right*=num[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> left;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数组是常见的算法题，所以多做题，多总结，总是能找到idea的。&lt;br&gt;
    
    </summary>
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Essence</title>
    <link href="http://zhoudamin.github.io/2018/07/24/Essence/"/>
    <id>http://zhoudamin.github.io/2018/07/24/Essence/</id>
    <published>2018-07-24T14:54:44.000Z</published>
    <updated>2018-08-15T15:06:33.913Z</updated>
    
    <content type="html"><![CDATA[<p>生活珠玑~</p><a id="more"></a><ol><li>尽量结合兴趣，选准方向，不要动摇，深入研究。</li><li>和牛人共事，和善良的人交友。</li><li>从此刻起，加上思考，梳理手头的todolist，把最重要的工作找出来，全身心突出亮点。</li><li>不问别人为什么，多问自己凭什么！      —by 2018/8/9</li></ol><h3 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h3><ol><li>不要熬夜，尽量少熬夜</li><li>锻炼身体</li><li>不抽烟，少饮酒</li><li>注意日常行为姿势</li><li>多吃健康食品，少吃外卖</li><li>不要用眼过度，注意眼睛的休息</li><li>注重心理健康</li><li>定期体检</li></ol><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><ol><li>建造强大的内心</li><li>尽早有理财念头</li><li>多出去走走</li><li>平和的心态面对一切</li><li>喜欢的东西要攒钱买下来</li><li>不要以为自己吃不胖</li><li>心本善，但是要有提防人的心</li></ol><h3 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h3><ol><li>增加自身的价值(有效社交)</li><li>不要盲目社交</li><li>注重对方的需求，不要一味索取</li><li>要多和人进行高质量的交流</li><li>不要勉强自己合群</li><li>分清自己的社交关系深浅</li><li>去掉一切不必要的应酬和饭局</li><li>不要急切的表达自己的观点，多听少说</li></ol><h3 id="人生"><a href="#人生" class="headerlink" title="人生"></a>人生</h3><ol><li>尽早做好人生规划(短期、长期)</li><li>建立正确的三观(学习、思考、实践)</li><li>趁年轻抓紧努力</li><li>要有自己的核心竞争力</li><li>别因为懒惰放弃能抓住的机会和挑战</li><li>要真正了解自己</li><li>别怕犯错和失败</li><li>不要自作聪明，恃才傲物</li><li>承担责任(社会、工作、家庭、自己的选择)</li><li>不要怕事，但别主动惹事</li><li>尽早进入社会历练</li><li>找到正确的平台比能力更重要</li><li>学会拒绝</li><li>不要轻易跳槽，但每次都要更上一个台阶</li><li>工作尽可能积累资源</li><li>要忠于自己，再忠于工作和公司</li><li>适当的妥协不丢人</li><li>要有长远的眼光，不要总是盯着眼前的利益</li></ol><h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><ol><li>勤学勤思考</li><li>多读书，广读书，读好书</li><li>迷茫的时候就学习</li><li>要有自己的专精</li><li>少刷手机</li><li>操作系统、网络、算法数据结构、离散数学、数据库原理与实践，这些看起来枯燥而无味的基础科学，要了解它们是必须付出非常多的时间才有可能理解通透些。而这些基础的扎实程度，就直接决定了你的高度。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;生活珠玑~&lt;/p&gt;
    
    </summary>
    
      <category term="观点与感想" scheme="http://zhoudamin.github.io/categories/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/"/>
    
    
      <category term="观点与感想" scheme="http://zhoudamin.github.io/tags/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>《Hadoop权威指南》 Notes</title>
    <link href="http://zhoudamin.github.io/2018/07/08/%E3%80%8AHadoop%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%8B-Notes/"/>
    <id>http://zhoudamin.github.io/2018/07/08/《Hadoop权威指南》-Notes/</id>
    <published>2018-07-08T04:55:24.000Z</published>
    <updated>2019-05-12T15:21:17.488Z</updated>
    
    <content type="html"><![CDATA[<p>业余读书笔记1<br><a id="more"></a></p><h1 id="初识Hadoop"><a href="#初识Hadoop" class="headerlink" title="初识Hadoop"></a>初识Hadoop</h1><p>Hadoop项目简述</p><ol><li>Common<ul><li>一组分布式文件系统和通用I/O的组件与接口(序列化、Java RPC 和持久化数据结构)。</li></ul></li><li>Avro<ul><li>一种支持高效、跨语言的RPC以及永久存储数据的序列化系统。</li></ul></li><li>MapReduce<ul><li>分布式数据处理模型和执行环境，运行于大型商用机集群。</li></ul></li><li>HDFS<ul><li>分布式文件系统，运行于大型商用机集群。</li></ul></li><li>Pig<ul><li>一种数据流语言和运行环境，用以检索非常大的数据集。Pig运行在MapReduce和HDFS的集群上。</li></ul></li><li>Hive<ul><li>一个分布式、按列存储的数据仓库。Hive管理HDFS中存储的数据，并提供基于SQL的查询语言以查询数据。</li></ul></li><li>HBase<ul><li>一个分布式、按列存储数据库。</li></ul></li><li>ZooKeeper<ul><li>一个分布式、可用性高的协调服务。</li></ul></li><li>Sqoop<ul><li>在数据库和HDFS之间高效传输数据的工具。</li></ul></li></ol><h1 id="关于MapReduce"><a href="#关于MapReduce" class="headerlink" title="关于MapReduce"></a>关于MapReduce</h1><h2 id="数据处理方法"><a href="#数据处理方法" class="headerlink" title="数据处理方法"></a>数据处理方法</h2><ul><li>将输入数据分成固定大小的块，然后把每块分配到各个进程，这样一来，即使有些进程能处理更多数据，我们也可以为他们分配更多的数据。</li><li>对每块数据进行处理，取每块中的最大值，作为每块的最高标准。</li><li>多台机器如何处理协调性和可靠性的问题。</li></ul><h2 id="查找最高气温的方法论"><a href="#查找最高气温的方法论" class="headerlink" title="查找最高气温的方法论"></a>查找最高气温的方法论</h2><ul><li>Hadoop自身提供一套可优化网络序列化传输的基本类型，在org.apache.hadoop.io包中。</li><li>map()方法的输入时一个键和一个值，首先将包含有一行输入的text值转换成java的String类型，之后使用subString()方法提取感兴趣的列。</li><li>map()方法还提供了OutputCollector实例用于输出内容的写入，在这种情况下，将年份按照Text对象进行读写，将气温值封装在IntWritable类型中。</li><li>测试气温数据是否缺失or显示为正确的气温读数。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;业余读书笔记1&lt;br&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://zhoudamin.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Notes" scheme="http://zhoudamin.github.io/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程实战</title>
    <link href="http://zhoudamin.github.io/2018/06/16/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
    <id>http://zhoudamin.github.io/2018/06/16/Java并发编程实战/</id>
    <published>2018-06-16T02:54:24.000Z</published>
    <updated>2018-06-16T03:17:54.472Z</updated>
    
    <content type="html"><![CDATA[<p>基于《Java并发编程实战》，作者Brain等。</p><a id="more"></a><h1 id="任务执行"><a href="#任务执行" class="headerlink" title="任务执行"></a>任务执行</h1><h2 id="顺序执行"><a href="#顺序执行" class="headerlink" title="顺序执行"></a>顺序执行</h2><p>SingleThreadWebServer顺序处理他的任务：接收到达80端口的HTTP请求<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleThreadWebServer</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    ServerSocket socket = <span class="keyword">new</span> ServerSocket(<span class="number">80</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">    Socket connection = socket.accept();</span><br><span class="line">    handleRequest(connection);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="无限创建线程的缺点"><a href="#无限创建线程的缺点" class="headerlink" title="无限创建线程的缺点"></a>无限创建线程的缺点</h3><ol><li>线程生命周期的开销</li><li>资源消耗量、尤其是内存</li><li>稳定性差</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于《Java并发编程实战》，作者Brain等。&lt;/p&gt;
    
    </summary>
    
      <category term="开发者手册" scheme="http://zhoudamin.github.io/categories/%E5%BC%80%E5%8F%91%E8%80%85%E6%89%8B%E5%86%8C/"/>
    
      <category term="编程语言" scheme="http://zhoudamin.github.io/categories/%E5%BC%80%E5%8F%91%E8%80%85%E6%89%8B%E5%86%8C/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="并发" scheme="http://zhoudamin.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Java实现彩色二维码</title>
    <link href="http://zhoudamin.github.io/2018/05/02/Java%E5%AE%9E%E7%8E%B0%E5%BD%A9%E8%89%B2%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    <id>http://zhoudamin.github.io/2018/05/02/Java实现彩色二维码/</id>
    <published>2018-05-02T11:30:05.000Z</published>
    <updated>2018-05-02T11:35:35.945Z</updated>
    
    <content type="html"><![CDATA[<p>使用Zxing库实现彩色二维码的生成，代码如下：<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.zxing.BarcodeFormat;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.EncodeHintType;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.MultiFormatWriter;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.client.j2se.MatrixToImageWriter;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.common.BitMatrix;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.qrcode.QRCodeWriter;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.qrcode.encoder.Encoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TexturedEncoderHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> contents</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> width</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> height</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imgPath</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(String contents, <span class="keyword">int</span> width, <span class="keyword">int</span> height, ErrorCorrectionLevel level, String imgPath)</span> </span>&#123;</span><br><span class="line">        Hashtable&lt;EncodeHintType, Object&gt; hints = <span class="keyword">new</span> Hashtable&lt;EncodeHintType, Object&gt;();</span><br><span class="line">        <span class="comment">// 指定纠错等级</span></span><br><span class="line">        hints.put(EncodeHintType.ERROR_CORRECTION,  level);</span><br><span class="line">        <span class="comment">// 指定编码格式</span></span><br><span class="line">        hints.put(EncodeHintType.CHARACTER_SET, <span class="string">"GBK"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> [][] bitMatrix = <span class="keyword">new</span> QRCodeWriter().encode(contents, BarcodeFormat.QR_CODE, width, height, hints);</span><br><span class="line">            <span class="keyword">int</span> len=bitMatrix.length;</span><br><span class="line">            width=len*<span class="number">12</span>;</span><br><span class="line">            <span class="keyword">boolean</span> [][]matrixBoo=<span class="keyword">new</span> <span class="keyword">boolean</span>[width][width];</span><br><span class="line">            MyPic(bitMatrix,matrixBoo,imgPath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">MyPic</span><span class="params">(<span class="keyword">int</span> [][] bitmatrix,<span class="keyword">boolean</span> [][] matrixboo,String pathname)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedImage matrix = <span class="keyword">new</span> BufferedImage(matrixboo.length , matrixboo[<span class="number">0</span>].length, BufferedImage.TYPE_INT_ARGB);</span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;bitmatrix.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;bitmatrix[<span class="number">0</span>].length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(bitmatrix[i][j]==<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> rr= rand.nextInt(<span class="number">255</span>);</span><br><span class="line">                    <span class="keyword">int</span> gg= rand.nextInt(<span class="number">255</span>);</span><br><span class="line">                    <span class="keyword">int</span> bb= rand.nextInt(<span class="number">255</span>);</span><br><span class="line">                    Color color = <span class="keyword">new</span> Color(rr, gg, bb);</span><br><span class="line">                    <span class="keyword">int</span> colorInt = color.getRGB();</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> n=i*<span class="number">12</span>;n&lt;(i+<span class="number">1</span>)*<span class="number">12</span>;n++)&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> m=j*<span class="number">12</span>;m&lt;(j+<span class="number">1</span>)*<span class="number">12</span>;m++) &#123;</span><br><span class="line">                            matrixboo[n][m] = <span class="keyword">true</span>;</span><br><span class="line">                            matrix.setRGB(n, m, colorInt );</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ImageIO.write(matrix, <span class="string">"PNG"</span>, <span class="keyword">new</span> File(pathname));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime=System.currentTimeMillis();</span><br><span class="line">        String imgPath = <span class="string">"guangzhou.jpg"</span>;</span><br><span class="line">        String contents = <span class="string">"guangzhou"</span>;</span><br><span class="line">        <span class="keyword">int</span> width = <span class="number">300</span>, height = <span class="number">300</span>;</span><br><span class="line">        ErrorCorrectionLevel level=ErrorCorrectionLevel.L;</span><br><span class="line">        TexturedEncoderHandler handler = <span class="keyword">new</span> TexturedEncoderHandler();</span><br><span class="line">        handler.encode(contents, width, height,  level, imgPath);</span><br><span class="line">        <span class="keyword">long</span> endTime=System.currentTimeMillis(); <span class="comment">//获取结束时间</span></span><br><span class="line">        System.out.println(<span class="string">"程序运行时间： "</span>+(endTime-startTime)+<span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Zxing库实现彩色二维码的生成，代码如下：&lt;br&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://zhoudamin.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java 二维码" scheme="http://zhoudamin.github.io/tags/Java-%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>HTTP基础</title>
    <link href="http://zhoudamin.github.io/2018/04/25/HTTP%E5%9F%BA%E7%A1%80/"/>
    <id>http://zhoudamin.github.io/2018/04/25/HTTP基础/</id>
    <published>2018-04-25T10:18:20.000Z</published>
    <updated>2018-04-25T10:19:08.999Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务器意图"><a href="#服务器意图" class="headerlink" title="服务器意图"></a>服务器意图</h2><blockquote><ul><li>GET：获取资源，用来请求已经被URI识别的资源</li><li>POST：传输实体主体</li><li>PUT：传输文件</li><li>HEAD：获得报文首部</li><li>DELETE：删除文件</li><li>OPTIONS：询问支持的方法</li></ul></blockquote><h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><table><thead><tr><th></th><th style="text-align:right">类别</th><th style="text-align:center">原因短语</th></tr></thead><tbody><tr><td>1XX</td><td style="text-align:right">Informational(信息性状态码)</td><td style="text-align:center">接收的请求正在处理</td></tr><tr><td>2XX</td><td style="text-align:right">Success(成功状态码)</td><td style="text-align:center">请求正常处理完毕</td></tr><tr><td>3XX</td><td style="text-align:right">Redirection (重定向状态码)</td><td style="text-align:center">需要进行附加操作以完成请求</td></tr><tr><td>4XX</td><td style="text-align:right">Client Error(客户端错误状态码)</td><td style="text-align:center">服务器无法处理请求</td></tr><tr><td>5XX</td><td style="text-align:right">Server Error(服务器错误状态码)</td><td style="text-align:center">服务器处理请求出错</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;服务器意图&quot;&gt;&lt;a href=&quot;#服务器意图&quot; class=&quot;headerlink&quot; title=&quot;服务器意图&quot;&gt;&lt;/a&gt;服务器意图&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;GET：获取资源，用来请求已经被URI识别的资源&lt;/li&gt;
&lt;li&gt;POST：
      
    
    </summary>
    
      <category term="理解计算机" scheme="http://zhoudamin.github.io/categories/%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="HTTP" scheme="http://zhoudamin.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>云计算基础</title>
    <link href="http://zhoudamin.github.io/2018/04/25/%E4%BA%91%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80/"/>
    <id>http://zhoudamin.github.io/2018/04/25/云计算基础/</id>
    <published>2018-04-25T10:13:17.000Z</published>
    <updated>2018-04-25T10:14:35.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="云计算分类"><a href="#云计算分类" class="headerlink" title="云计算分类"></a>云计算分类</h2><ul><li>IaaS 基础设施即服务</li><li>PaaS 平台即服务</li><li>SaaS 软件即服务</li></ul><h3 id="公有云"><a href="#公有云" class="headerlink" title="公有云"></a>公有云</h3><p>公有云构建在互联网上，任何已付费的用户都可以访问。</p><h3 id="私有云"><a href="#私有云" class="headerlink" title="私有云"></a>私有云</h3><p>私有云构建在局域网内部，属于一个独立的组织。</p><h3 id="混合云"><a href="#混合云" class="headerlink" title="混合云"></a>混合云</h3><p>混合云由公有云和私有云共同构成</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;云计算分类&quot;&gt;&lt;a href=&quot;#云计算分类&quot; class=&quot;headerlink&quot; title=&quot;云计算分类&quot;&gt;&lt;/a&gt;云计算分类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;IaaS 基础设施即服务&lt;/li&gt;
&lt;li&gt;PaaS 平台即服务&lt;/li&gt;
&lt;li&gt;SaaS 软件即服务
      
    
    </summary>
    
      <category term="云计算" scheme="http://zhoudamin.github.io/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
      <category term="云计算" scheme="http://zhoudamin.github.io/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Notes</title>
    <link href="http://zhoudamin.github.io/2018/04/23/Hexo%20Notes/"/>
    <id>http://zhoudamin.github.io/2018/04/23/Hexo Notes/</id>
    <published>2018-04-23T15:07:42.000Z</published>
    <updated>2018-04-23T15:15:14.704Z</updated>
    
    <content type="html"><![CDATA[<p>遇到的小问题</p><a id="more"></a><h1 id="关于设置页宽"><a href="#关于设置页宽" class="headerlink" title="关于设置页宽"></a>关于设置页宽</h1><p>没错，这就是我上面提到的那个主题，这个主题有三种外观，其中我现在使用的是 Pisces Scheme ，但还是做了一些修改，因为原来那个宽度太小了，不适合展示代码块，也不太美观。修改方法如下：<br>Pisces 的布局定义在 source/css/_schemes/Picses/_layout.styl 中，打开文件并在最后添加以下 css<br>引用自  <a href="http://www.aidansu.com/2017/github-pages-build-blog/" target="_blank" rel="noopener">http://www.aidansu.com/2017/github-pages-build-blog/</a><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">    +tablet() &#123;</span><br><span class="line">        <span class="selector-tag">width</span>: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">    +<span class="selector-tag">mobile</span>() &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.main-inner</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">    +tablet() &#123;</span><br><span class="line">        <span class="selector-tag">width</span>: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">    +<span class="selector-tag">mobile</span>() &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(100% - 260px);</span><br><span class="line">    +tablet() &#123;</span><br><span class="line">        <span class="selector-tag">width</span>: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">    +<span class="selector-tag">mobile</span>() &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;遇到的小问题&lt;/p&gt;
    
    </summary>
    
      <category term="Notes" scheme="http://zhoudamin.github.io/categories/Notes/"/>
    
    
      <category term="Hexo" scheme="http://zhoudamin.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Java 运动模糊</title>
    <link href="http://zhoudamin.github.io/2018/04/23/Java-%E8%BF%90%E5%8A%A8%E6%A8%A1%E7%B3%8A/"/>
    <id>http://zhoudamin.github.io/2018/04/23/Java-运动模糊/</id>
    <published>2018-04-23T12:41:58.000Z</published>
    <updated>2018-04-23T14:32:38.495Z</updated>
    
    <content type="html"><![CDATA[<p>想用Java 写个运动模糊的效果，无奈本人水平有限，国内也没找到资源，于是Google到了一个文档，特地分享出来！</p><a id="more"></a><p>本代码源自   <a href="http://www.jhlabs.com/ip/blurring.html" target="_blank" rel="noopener">http://www.jhlabs.com/ip/blurring.html</a></p><p>Java运动模糊算法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line">import java.awt.*;</span><br><span class="line">import java.awt.geom.*;</span><br><span class="line">import java.awt.image.*;</span><br><span class="line"></span><br><span class="line">public class MotionBlurOp extends AbstractBufferedImageOp &#123;</span><br><span class="line">    private float centreX = 0.5f, centreY = 0.5f;</span><br><span class="line">    private float distance=20.0f;                //这里设置运动距离</span><br><span class="line">    private float angle;</span><br><span class="line">    private float rotation;</span><br><span class="line">    private float zoom;</span><br><span class="line"></span><br><span class="line">    public MotionBlurOp() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MotionBlurOp( float distance, float angle, float rotation, float zoom ) &#123;</span><br><span class="line">        this.distance = distance;</span><br><span class="line">        this.angle = angle;</span><br><span class="line">        this.rotation = rotation;</span><br><span class="line">        this.zoom = zoom;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAngle( float angle ) &#123;</span><br><span class="line">        this.angle = angle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public float getAngle() &#123;</span><br><span class="line">        return angle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDistance( float distance ) &#123;</span><br><span class="line">        this.distance = distance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public float getDistance() &#123;</span><br><span class="line">        return distance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setRotation( float rotation ) &#123;</span><br><span class="line">        this.rotation = rotation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public float getRotation() &#123;</span><br><span class="line">        return rotation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setZoom( float zoom ) &#123;</span><br><span class="line">        this.zoom = zoom;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public float getZoom() &#123;</span><br><span class="line">        return zoom;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCentreX( float centreX ) &#123;</span><br><span class="line">        this.centreX = centreX;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public float getCentreX() &#123;</span><br><span class="line">        return centreX;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCentreY( float centreY ) &#123;</span><br><span class="line">        this.centreY = centreY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public float getCentreY() &#123;</span><br><span class="line">        return centreY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCentre( Point2D centre ) &#123;</span><br><span class="line">        this.centreX = (float)centre.getX();</span><br><span class="line">        this.centreY = (float)centre.getY();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Point2D getCentre() &#123;</span><br><span class="line">        return new Point2D.Float( centreX, centreY );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int log2( int n ) &#123;</span><br><span class="line">        int m = 1;</span><br><span class="line">        int log2n = 0;</span><br><span class="line"></span><br><span class="line">        while (m &lt; n) &#123;</span><br><span class="line">            m *= 2;</span><br><span class="line">            log2n++;</span><br><span class="line">        &#125;</span><br><span class="line">        return log2n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BufferedImage filter( BufferedImage src, BufferedImage dst ) &#123;</span><br><span class="line">        if ( dst == null )</span><br><span class="line">            dst = createCompatibleDestImage( src, null );</span><br><span class="line">        BufferedImage tsrc = src;</span><br><span class="line">        float cx = (float)src.getWidth() * centreX;</span><br><span class="line">        float cy = (float)src.getHeight() * centreY;</span><br><span class="line">        float imageRadius = (float)Math.sqrt( cx*cx + cy*cy );</span><br><span class="line">        float translateX = (float)(distance * Math.cos( angle ));</span><br><span class="line">        float translateY = (float)(distance * -Math.sin( angle ));</span><br><span class="line">        float scale = zoom;</span><br><span class="line">        float rotate = rotation;</span><br><span class="line">        float maxDistance = distance + Math.abs(rotation*imageRadius) + zoom*imageRadius;</span><br><span class="line">        int steps = log2((int)maxDistance);</span><br><span class="line"></span><br><span class="line">        translateX /= maxDistance;</span><br><span class="line">        translateY /= maxDistance;</span><br><span class="line">        scale /= maxDistance;</span><br><span class="line">        rotate /= maxDistance;</span><br><span class="line"></span><br><span class="line">        if ( steps == 0 ) &#123;</span><br><span class="line">            Graphics2D g = dst.createGraphics();</span><br><span class="line">            g.drawRenderedImage( src, null );</span><br><span class="line">            g.dispose();</span><br><span class="line">            return dst;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        BufferedImage tmp = createCompatibleDestImage( src, null );</span><br><span class="line">        for ( int i = 0; i &lt; steps; i++ ) &#123;</span><br><span class="line">            Graphics2D g = tmp.createGraphics();</span><br><span class="line">            g.drawImage( tsrc, null, null );</span><br><span class="line">            g.setRenderingHint( RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON );</span><br><span class="line">            g.setRenderingHint( RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR );</span><br><span class="line">            g.setComposite( AlphaComposite.getInstance( AlphaComposite.SRC_OVER, 0.5f ) );</span><br><span class="line"></span><br><span class="line">            g.translate( cx+translateX, cy+translateY );</span><br><span class="line">            g.scale( 1.0001+scale, 1.0001+scale );  // The .0001 works round a bug on Windows where drawImage throws an ArrayIndexOutofBoundException</span><br><span class="line">            if ( rotation != 0 )</span><br><span class="line">                g.rotate( rotate );</span><br><span class="line">            g.translate( -cx, -cy );</span><br><span class="line"></span><br><span class="line">            g.drawImage( dst, null, null );</span><br><span class="line">            g.dispose();</span><br><span class="line">            BufferedImage ti = dst;</span><br><span class="line">            dst = tmp;</span><br><span class="line">            tmp = ti;</span><br><span class="line">            tsrc = dst;</span><br><span class="line"></span><br><span class="line">            translateX *= 2;</span><br><span class="line">            translateY *= 2;</span><br><span class="line">            scale *= 2;</span><br><span class="line">            rotate *= 2;</span><br><span class="line">        &#125;</span><br><span class="line">        return dst;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Blur/Motion Blur...&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import javax.imageio.ImageIO;</span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by zdmein on 2018/1/10.</span><br><span class="line"> */</span><br><span class="line">public class MotionBlurOpTest &#123;</span><br><span class="line">    public static void main(String [] args) throws IOException &#123;</span><br><span class="line">        BufferedImage sourceImage = ImageIO.read(new File(&quot;flower.jpg&quot;));</span><br><span class="line">        MotionBlurOp filter=new MotionBlurOp();</span><br><span class="line">        BufferedImage destImage=filter.filter(sourceImage,null);</span><br><span class="line">        ImageIO.write(destImage, &quot;PNG&quot;, new File(&quot;MotionBlurOpflower.jpg&quot;));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="http://images2017.cnblogs.com/blog/1300781/201801/1300781-20180110111018113-450639113.jpg" alt="原图"><br><img src="http://images2017.cnblogs.com/blog/1300781/201801/1300781-20180110111047176-161279166.jpg" alt="Motion"></p><p><img src="http://pic.sc.chinaz.com/files/pic/pic9/201508/apic14250.jpg" alt=""></p><p><img src="http://img.hb.aicdn.com/402338e39ee91c9f2f55116942593e37d009fd15418553-ulMGQY_fw658" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想用Java 写个运动模糊的效果，无奈本人水平有限，国内也没找到资源，于是Google到了一个文档，特地分享出来！&lt;/p&gt;
    
    </summary>
    
      <category term="图像" scheme="http://zhoudamin.github.io/categories/%E5%9B%BE%E5%83%8F/"/>
    
    
      <category term="Java" scheme="http://zhoudamin.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>常用数据结构底层实现及源码</title>
    <link href="http://zhoudamin.github.io/2017/09/12/%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8F%8A%E6%BA%90%E7%A0%81/"/>
    <id>http://zhoudamin.github.io/2017/09/12/常用数据结构底层实现及源码/</id>
    <published>2017-09-12T01:59:40.000Z</published>
    <updated>2018-04-23T02:27:20.062Z</updated>
    
    <content type="html"><![CDATA[<p>ZDM–ArrayList、HashMap、Collection、LinkedList、Redis 底层实现及源码</p><a id="more"></a><h1 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h1><h2 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h2><p>Redis是一种key/value型数据库，其中，每个key和value都是使用对象表示的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET message <span class="string">"Hello"</span></span><br></pre></td></tr></table></figure><p>其中，字符串 “message” 这个对象 就是 key ， “Hello” 这个对象 就是 value</p><p>Redis有5种对象的类型</p><table><thead><tr><th style="text-align:center">类型常量</th><th style="text-align:center">小写</th><th style="text-align:center">对象名称</th></tr></thead><tbody><tr><td style="text-align:center">REDIS_STRING</td><td style="text-align:center">string</td><td style="text-align:center">字符串对象</td></tr><tr><td style="text-align:center">REDIS_LIST</td><td style="text-align:center">list</td><td style="text-align:center">列表对象</td></tr><tr><td style="text-align:center">REDIS_HASH</td><td style="text-align:center">hash</td><td style="text-align:center">哈希对象</td></tr><tr><td style="text-align:center">REDIS_SET</td><td style="text-align:center">set</td><td style="text-align:center">集合对象</td></tr><tr><td style="text-align:center">REDIS_ZSET</td><td style="text-align:center">zset</td><td style="text-align:center">有序集合对象</td></tr></tbody></table><p>Redis对象底层数据结构</p><table><thead><tr><th style="text-align:center">编码常量</th><th style="text-align:center">数据结构</th></tr></thead><tbody><tr><td style="text-align:center">int</td><td style="text-align:center">long类型的整数</td></tr><tr><td style="text-align:center">embstr</td><td style="text-align:center">embstr编码的简单动态字符串</td></tr><tr><td style="text-align:center">raw</td><td style="text-align:center">简单动态字符串</td></tr><tr><td style="text-align:center">ht</td><td style="text-align:center">字典</td></tr><tr><td style="text-align:center">linkedlist</td><td style="text-align:center">双端链表</td></tr><tr><td style="text-align:center">ziplist</td><td style="text-align:center">压缩列表</td></tr><tr><td style="text-align:center">intset</td><td style="text-align:center">整数集合</td></tr><tr><td style="text-align:center">skiplist</td><td style="text-align:center">跳跃表和字典</td></tr></tbody></table><hr><h2 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h2><p>字符串对象的编码可以是int、raw、embstr</p><p>如果字符串对象的长度小于39字节，就用embstr</p><p>否则用传统的raw对象</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># define REDIS_ENCODING_EMBSTR_SIZE_LIMIT 39  </span><br><span class="line">robj *createStringObject(char *ptr, size_t len) &#123;  </span><br><span class="line">    if (len &lt;= REDIS_ENCODING_EMBSTR_SIZE_LIMIT)  </span><br><span class="line">        return createEmbeddedStringObject(ptr,len);  </span><br><span class="line">    else  </span><br><span class="line">        return createRawStringObject(ptr,len);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>embstr的优点：</p><ul><li>创建只需分配一次内存，raw为两次</li><li>释放内存也是一次</li><li>embstr的objet和sds放在一起，更好地利用缓存带来的优势</li></ul><hr><h2 id="列表对象"><a href="#列表对象" class="headerlink" title="列表对象"></a>列表对象</h2><p>列表对象的编码可以是 ziplist or LinkedList</p><p>ziplist 是一种压缩链表，好处是更能节省内存空间，存储的内容都是在连续的内存区域中的</p><p>LinkedList是一种双向链表，没增加一个node，都要重新分配一个内存</p><hr><h2 id="哈希对象"><a href="#哈希对象" class="headerlink" title="哈希对象"></a>哈希对象</h2><p>哈希对象的底层实现用ziplist or hashtable</p><p>ziplist : 对象数目不多且内容不大，这种方式效率很高</p><p>HashTable由dict这个结构实现</p><hr><h2 id="集合对象"><a href="#集合对象" class="headerlink" title="集合对象"></a>集合对象</h2><p>集合对象编码可以是 intset or HashTable</p><hr><h2 id="有序集合对象"><a href="#有序集合对象" class="headerlink" title="有序集合对象"></a>有序集合对象</h2><p>编码一种是 ziplist  ，一种是skipList 与 dict 的结合</p><p>ziplist作为集合和作为哈希对象是一样的，member和score顺序存放。按照score从小到大顺序排列。它的结构不再复述。</p><p>skiplist是一种跳跃表，它实现了有序集合中的快速查找，在大多数情况下它的速度都可以和平衡树差不多。但它的实现比较简单，可以作为平衡树的替代品。</p><hr><h1 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h1><p>ArrayList是基于数组实现的，是一个动态数组，其容量能自动增长(1.5+1)。</p><p>非线程安全</p><p>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;    </span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;    </span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>    </span></span><br><span class="line"><span class="class"></span>&#123;    </span><br><span class="line">    <span class="comment">// 序列版本号    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8683452581122892189L</span>;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// ArrayList基于该数组实现，用该数组保存数据   </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Object[] elementData;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// ArrayList中实际数据的数量    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// ArrayList带容量大小的构造函数。    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">super</span>();    </span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)    </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+    </span><br><span class="line">                                               initialCapacity);    </span><br><span class="line">        <span class="comment">// 新建一个数组    </span></span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// ArrayList无参构造函数。默认容量是10。    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">this</span>(<span class="number">10</span>);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 创建一个包含collection的ArrayList    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;    </span><br><span class="line">        elementData = c.toArray();    </span><br><span class="line">        size = elementData.length;    </span><br><span class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[].class)    </span><br><span class="line">            elementData = Arrays.copyOf(elementData, size, Object[].class);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 将当前容量值设为实际元素个数    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trimToSize</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        modCount++;    </span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;    </span><br><span class="line">        <span class="keyword">if</span> (size &lt; oldCapacity) &#123;    </span><br><span class="line">            elementData = Arrays.copyOf(elementData, size);    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 确定ArrarList的容量。    </span></span><br><span class="line">    <span class="comment">// 若ArrayList的容量不足以容纳当前的全部元素，设置 新的容量=“(原始容量x3)/2 + 1”    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;    </span><br><span class="line">        <span class="comment">// 将“修改统计数”+1，该变量主要是用来实现fail-fast机制的    </span></span><br><span class="line">        modCount++;    </span><br><span class="line">        <span class="keyword">int</span> oldCapacity = elementData.length;    </span><br><span class="line">        <span class="comment">// 若当前容量不足以容纳当前的元素个数，设置 新的容量=“(原始容量x3)/2 + 1”    </span></span><br><span class="line">        <span class="keyword">if</span> (minCapacity &gt; oldCapacity) &#123;    </span><br><span class="line">            Object oldData[] = elementData;    </span><br><span class="line">            <span class="keyword">int</span> newCapacity = (oldCapacity * <span class="number">3</span>)/<span class="number">2</span> + <span class="number">1</span>;    </span><br><span class="line">            <span class="comment">//如果还不够，则直接将minCapacity设置为当前容量  </span></span><br><span class="line">            <span class="keyword">if</span> (newCapacity &lt; minCapacity)    </span><br><span class="line">                newCapacity = minCapacity;    </span><br><span class="line">            elementData = Arrays.copyOf(elementData, newCapacity);    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 添加元素e    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;    </span><br><span class="line">        <span class="comment">// 确定ArrayList的容量大小    </span></span><br><span class="line">        ensureCapacity(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!    </span></span><br><span class="line">        <span class="comment">// 添加e到ArrayList中    </span></span><br><span class="line">        elementData[size++] = e;    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 返回ArrayList的实际大小    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> size;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// ArrayList是否包含Object(o)    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> indexOf(o) &gt;= <span class="number">0</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">//返回ArrayList是否为空    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 正向查找，返回元素的索引值    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;    </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)    </span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)    </span><br><span class="line">                <span class="keyword">return</span> i;    </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;    </span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)    </span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i]))    </span><br><span class="line">                    <span class="keyword">return</span> i;    </span><br><span class="line">            &#125;    </span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 反向查找(从数组末尾向开始查找)，返回元素(o)的索引值    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;    </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)    </span><br><span class="line">            <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>)    </span><br><span class="line">                <span class="keyword">return</span> i;    </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;    </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size-<span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)    </span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[i]))    </span><br><span class="line">                <span class="keyword">return</span> i;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">     </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 返回ArrayList的Object数组    </span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;    </span><br><span class="line">        <span class="keyword">return</span> Arrays.copyOf(elementData, size);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 返回ArrayList元素组成的数组  </span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;    </span><br><span class="line">        <span class="comment">// 若数组a的大小 &lt; ArrayList的元素个数；    </span></span><br><span class="line">        <span class="comment">// 则新建一个T[]数组，数组大小是“ArrayList的元素个数”，并将“ArrayList”全部拷贝到新数组中    </span></span><br><span class="line">        <span class="keyword">if</span> (a.length &lt; size)    </span><br><span class="line">            <span class="keyword">return</span> (T[]) Arrays.copyOf(elementData, size, a.getClass());    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 若数组a的大小 &gt;= ArrayList的元素个数；    </span></span><br><span class="line">        <span class="comment">// 则将ArrayList的全部元素都拷贝到数组a中。    </span></span><br><span class="line">        System.arraycopy(elementData, <span class="number">0</span>, a, <span class="number">0</span>, size);    </span><br><span class="line">        <span class="keyword">if</span> (a.length &gt; size)    </span><br><span class="line">            a[size] = <span class="keyword">null</span>;    </span><br><span class="line">        <span class="keyword">return</span> a;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 获取index位置的元素值    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;    </span><br><span class="line">        RangeCheck(index);    </span><br><span class="line">   </span><br><span class="line">        <span class="keyword">return</span> (E) elementData[index];    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 设置index位置的值为element    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;    </span><br><span class="line">        RangeCheck(index);    </span><br><span class="line">   </span><br><span class="line">        E oldValue = (E) elementData[index];    </span><br><span class="line">        elementData[index] = element;    </span><br><span class="line">        <span class="keyword">return</span> oldValue;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 将e添加到ArrayList中    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;    </span><br><span class="line">        ensureCapacity(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!    </span></span><br><span class="line">        elementData[size++] = e;    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 将e添加到ArrayList的指定位置    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)    </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(    </span><br><span class="line">            <span class="string">"Index: "</span>+index+<span class="string">", Size: "</span>+size);    </span><br><span class="line">   </span><br><span class="line">        ensureCapacity(size+<span class="number">1</span>);  <span class="comment">// Increments modCount!!    </span></span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,    </span><br><span class="line">             size - index);    </span><br><span class="line">        elementData[index] = element;    </span><br><span class="line">        size++;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 删除ArrayList指定位置的元素    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;    </span><br><span class="line">        RangeCheck(index);    </span><br><span class="line">   </span><br><span class="line">        modCount++;    </span><br><span class="line">        E oldValue = (E) elementData[index];    </span><br><span class="line">   </span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;    </span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)    </span><br><span class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,    </span><br><span class="line">                 numMoved);    </span><br><span class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">// Let gc do its work    </span></span><br><span class="line">   </span><br><span class="line">        <span class="keyword">return</span> oldValue;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 删除ArrayList的指定元素    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;    </span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)    </span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;    </span><br><span class="line">                fastRemove(index);    </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;    </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)    </span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;    </span><br><span class="line">                fastRemove(index);    </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 快速删除第index个元素    </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;    </span><br><span class="line">        modCount++;    </span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;    </span><br><span class="line">        <span class="comment">// 从"index+1"开始，用后面的元素替换前面的元素。    </span></span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)    </span><br><span class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,    </span><br><span class="line">                             numMoved);    </span><br><span class="line">        <span class="comment">// 将最后一个元素设为null    </span></span><br><span class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">// Let gc do its work    </span></span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 删除元素    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;    </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)    </span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;    </span><br><span class="line">                fastRemove(index);    </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;    </span><br><span class="line">            <span class="comment">// 便利ArrayList，找到“元素o”，则删除，并返回true。    </span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)    </span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;    </span><br><span class="line">                fastRemove(index);    </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 清空ArrayList，将全部的元素设为null    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        modCount++;    </span><br><span class="line">   </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++)    </span><br><span class="line">            elementData[i] = <span class="keyword">null</span>;    </span><br><span class="line">   </span><br><span class="line">        size = <span class="number">0</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 将集合c追加到ArrayList中    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;    </span><br><span class="line">        Object[] a = c.toArray();    </span><br><span class="line">        <span class="keyword">int</span> numNew = a.length;    </span><br><span class="line">        ensureCapacity(size + numNew);  <span class="comment">// Increments modCount    </span></span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, size, numNew);    </span><br><span class="line">        size += numNew;    </span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 从index位置开始，将集合c添加到ArrayList    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">if</span> (index &gt; size || index &lt; <span class="number">0</span>)    </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(    </span><br><span class="line">            <span class="string">"Index: "</span> + index + <span class="string">", Size: "</span> + size);    </span><br><span class="line">   </span><br><span class="line">        Object[] a = c.toArray();    </span><br><span class="line">        <span class="keyword">int</span> numNew = a.length;    </span><br><span class="line">        ensureCapacity(size + numNew);  <span class="comment">// Increments modCount    </span></span><br><span class="line">   </span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index;    </span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)    </span><br><span class="line">            System.arraycopy(elementData, index, elementData, index + numNew,    </span><br><span class="line">                 numMoved);    </span><br><span class="line">   </span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);    </span><br><span class="line">        size += numNew;    </span><br><span class="line">        <span class="keyword">return</span> numNew != <span class="number">0</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 删除fromIndex到toIndex之间的全部元素。    </span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">removeRange</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> </span>&#123;    </span><br><span class="line">    modCount++;    </span><br><span class="line">    <span class="keyword">int</span> numMoved = size - toIndex;    </span><br><span class="line">        System.arraycopy(elementData, toIndex, elementData, fromIndex,    </span><br><span class="line">                         numMoved);    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// Let gc do its work    </span></span><br><span class="line">    <span class="keyword">int</span> newSize = size - (toIndex-fromIndex);    </span><br><span class="line">    <span class="keyword">while</span> (size != newSize)    </span><br><span class="line">        elementData[--size] = <span class="keyword">null</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RangeCheck</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">if</span> (index &gt;= size)    </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(    </span><br><span class="line">        <span class="string">"Index: "</span>+index+<span class="string">", Size: "</span>+size);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 克隆函数    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">try</span> &#123;    </span><br><span class="line">            ArrayList&lt;E&gt; v = (ArrayList&lt;E&gt;) <span class="keyword">super</span>.clone();    </span><br><span class="line">            <span class="comment">// 将当前ArrayList的全部元素拷贝到v中    </span></span><br><span class="line">            v.elementData = Arrays.copyOf(elementData, size);    </span><br><span class="line">            v.modCount = <span class="number">0</span>;    </span><br><span class="line">            <span class="keyword">return</span> v;    </span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;    </span><br><span class="line">            <span class="comment">// this shouldn't happen, since we are Cloneable    </span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// java.io.Serializable的写入函数    </span></span><br><span class="line">    <span class="comment">// 将ArrayList的“容量，所有的元素值”都写入到输出流中    </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span>    </span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException</span>&#123;    </span><br><span class="line">    <span class="comment">// Write out element count, and any hidden stuff    </span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;    </span><br><span class="line">    s.defaultWriteObject();    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 写入“数组的容量”    </span></span><br><span class="line">        s.writeInt(elementData.length);    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 写入“数组的每一个元素”    </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++)    </span><br><span class="line">            s.writeObject(elementData[i]);    </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount) &#123;    </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// java.io.Serializable的读取函数：根据写入方式读出    </span></span><br><span class="line">    <span class="comment">// 先将ArrayList的“容量”读出，然后将“所有的元素值”读出    </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span>    </span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;    </span><br><span class="line">        <span class="comment">// Read in size, and any hidden stuff    </span></span><br><span class="line">        s.defaultReadObject();    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 从输入流中读取ArrayList的“容量”    </span></span><br><span class="line">        <span class="keyword">int</span> arrayLength = s.readInt();    </span><br><span class="line">        Object[] a = elementData = <span class="keyword">new</span> Object[arrayLength];    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 从输入流中将“所有的元素值”读出    </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++)    </span><br><span class="line">            a[i] = s.readObject();    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><p>HashMap是基于哈希表实现，每一个元素都是一个key-value对，其内部通过单链表解决冲突问题，容量不足时，会自动增长。</p><p>非线程安全，只是用于单线程环境下，多线程用concurrentHashMap</p><p>实现了Serializable接口，因此支持序列化，实现了Cloneable接口，能被克隆。</p><p>源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;    </span><br><span class="line"><span class="keyword">import</span> java.io.*;    </span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;    </span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;    </span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span>    </span></span><br><span class="line"><span class="class"></span>&#123;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 默认的初始容量（容量为HashMap中槽的数目）是16，且实际容量必须是2的整数次幂。    </span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 最大容量（必须是2的幂且小于2的30次方，传入容量过大将被这个值替换）    </span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 默认加载因子为0.75   </span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 存储数据的Entry数组，长度是2的幂。    </span></span><br><span class="line">    <span class="comment">// HashMap采用链表法解决冲突，每一个Entry本质上是一个单向链表    </span></span><br><span class="line">    <span class="keyword">transient</span> Entry[] table;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// HashMap的底层数组中已用槽的数量    </span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> size;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// HashMap的阈值，用于判断是否需要调整HashMap的容量（threshold = 容量*加载因子）    </span></span><br><span class="line">    <span class="keyword">int</span> threshold;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 加载因子实际大小    </span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// HashMap被改变的次数    </span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> modCount;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 指定“容量大小”和“加载因子”的构造函数    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)    </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +    </span><br><span class="line">                                               initialCapacity);    </span><br><span class="line">        <span class="comment">// HashMap的最大容量只能是MAXIMUM_CAPACITY    </span></span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)    </span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;    </span><br><span class="line">        <span class="comment">//加载因此不能小于0  </span></span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))    </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +    </span><br><span class="line">                                               loadFactor);    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 找出“大于initialCapacity”的最小的2的幂    </span></span><br><span class="line">        <span class="keyword">int</span> capacity = <span class="number">1</span>;    </span><br><span class="line">        <span class="keyword">while</span> (capacity &lt; initialCapacity)    </span><br><span class="line">            capacity &lt;&lt;= <span class="number">1</span>;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 设置“加载因子”    </span></span><br><span class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;    </span><br><span class="line">        <span class="comment">// 设置“HashMap阈值”，当HashMap中存储数据的数量达到threshold时，就需要将HashMap的容量加倍。    </span></span><br><span class="line">        threshold = (<span class="keyword">int</span>)(capacity * loadFactor);    </span><br><span class="line">        <span class="comment">// 创建Entry数组，用来保存数据    </span></span><br><span class="line">        table = <span class="keyword">new</span> Entry[capacity];    </span><br><span class="line">        init();    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 指定“容量大小”的构造函数    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 默认构造函数。    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="comment">// 设置“加载因子”为默认加载因子0.75    </span></span><br><span class="line">        <span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;    </span><br><span class="line">        <span class="comment">// 设置“HashMap阈值”，当HashMap中存储数据的数量达到threshold时，就需要将HashMap的容量加倍。    </span></span><br><span class="line">        threshold = (<span class="keyword">int</span>)(DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR);    </span><br><span class="line">        <span class="comment">// 创建Entry数组，用来保存数据    </span></span><br><span class="line">        table = <span class="keyword">new</span> Entry[DEFAULT_INITIAL_CAPACITY];    </span><br><span class="line">        init();    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 包含“子Map”的构造函数    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">this</span>(Math.max((<span class="keyword">int</span>) (m.size() / DEFAULT_LOAD_FACTOR) + <span class="number">1</span>,    </span><br><span class="line">                      DEFAULT_INITIAL_CAPACITY), DEFAULT_LOAD_FACTOR);    </span><br><span class="line">        <span class="comment">// 将m中的全部元素逐个添加到HashMap中    </span></span><br><span class="line">        putAllForCreate(m);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">//求hash值的方法，重新计算hash值  </span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;    </span><br><span class="line">        h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);    </span><br><span class="line">        <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 返回h在数组中的索引值，这里用&amp;代替取模，旨在提升效率   </span></span><br><span class="line">    <span class="comment">// h &amp; (length-1)保证返回值的小于length    </span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> size;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 获取key对应的value    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>)    </span><br><span class="line">            <span class="keyword">return</span> getForNullKey();    </span><br><span class="line">        <span class="comment">// 获取key的hash值    </span></span><br><span class="line">        <span class="keyword">int</span> hash = hash(key.hashCode());    </span><br><span class="line">        <span class="comment">// 在“该hash值对应的链表”上查找“键值等于key”的元素    </span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];    </span><br><span class="line">             e != <span class="keyword">null</span>;    </span><br><span class="line">             e = e.next) &#123;    </span><br><span class="line">            Object k;    </span><br><span class="line">            <span class="comment">//判断key是否相同  </span></span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k)))    </span><br><span class="line">                <span class="keyword">return</span> e.value;    </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">//没找到则返回null  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 获取“key为null”的元素的值    </span></span><br><span class="line">    <span class="comment">// HashMap将“key为null”的元素存储在table[0]位置，但不一定是该链表的第一个位置！    </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> V <span class="title">getForNullKey</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;    </span><br><span class="line">            <span class="keyword">if</span> (e.key == <span class="keyword">null</span>)    </span><br><span class="line">                <span class="keyword">return</span> e.value;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// HashMap是否包含key    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> getEntry(key) != <span class="keyword">null</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 返回“键为key”的键值对    </span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">getEntry</span><span class="params">(Object key)</span> </span>&#123;    </span><br><span class="line">        <span class="comment">// 获取哈希值    </span></span><br><span class="line">        <span class="comment">// HashMap将“key为null”的元素存储在table[0]位置，“key不为null”的则调用hash()计算哈希值    </span></span><br><span class="line">        <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key.hashCode());    </span><br><span class="line">        <span class="comment">// 在“该hash值对应的链表”上查找“键值等于key”的元素    </span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];    </span><br><span class="line">             e != <span class="keyword">null</span>;    </span><br><span class="line">             e = e.next) &#123;    </span><br><span class="line">            Object k;    </span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp;    </span><br><span class="line">                ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))    </span><br><span class="line">                <span class="keyword">return</span> e;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 将“key-value”添加到HashMap中    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;    </span><br><span class="line">        <span class="comment">// 若“key为null”，则将该键值对添加到table[0]中。    </span></span><br><span class="line">        <span class="keyword">if</span> (key == <span class="keyword">null</span>)    </span><br><span class="line">            <span class="keyword">return</span> putForNullKey(value);    </span><br><span class="line">        <span class="comment">// 若“key不为null”，则计算该key的哈希值，然后将其添加到该哈希值对应的链表中。    </span></span><br><span class="line">        <span class="keyword">int</span> hash = hash(key.hashCode());    </span><br><span class="line">        <span class="keyword">int</span> i = indexFor(hash, table.length);    </span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;    </span><br><span class="line">            Object k;    </span><br><span class="line">            <span class="comment">// 若“该key”对应的键值对已经存在，则用新的value取代旧的value。然后退出！    </span></span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;    </span><br><span class="line">                V oldValue = e.value;    </span><br><span class="line">                e.value = value;    </span><br><span class="line">                e.recordAccess(<span class="keyword">this</span>);    </span><br><span class="line">                <span class="keyword">return</span> oldValue;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 若“该key”对应的键值对不存在，则将“key-value”添加到table中    </span></span><br><span class="line">        modCount++;  </span><br><span class="line">        <span class="comment">//将key-value添加到table[i]处  </span></span><br><span class="line">        addEntry(hash, key, value, i);    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// putForNullKey()的作用是将“key为null”键值对添加到table[0]位置    </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> V <span class="title">putForNullKey</span><span class="params">(V value)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;    </span><br><span class="line">            <span class="keyword">if</span> (e.key == <span class="keyword">null</span>) &#123;    </span><br><span class="line">                V oldValue = e.value;    </span><br><span class="line">                e.value = value;    </span><br><span class="line">                e.recordAccess(<span class="keyword">this</span>);    </span><br><span class="line">                <span class="keyword">return</span> oldValue;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="comment">// 如果没有存在key为null的键值对，则直接题阿见到table[0]处!    </span></span><br><span class="line">        modCount++;    </span><br><span class="line">        addEntry(<span class="number">0</span>, <span class="keyword">null</span>, value, <span class="number">0</span>);    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 创建HashMap对应的“添加方法”，    </span></span><br><span class="line">    <span class="comment">// 它和put()不同。putForCreate()是内部方法，它被构造函数等调用，用来创建HashMap    </span></span><br><span class="line">    <span class="comment">// 而put()是对外提供的往HashMap中添加元素的方法。    </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">putForCreate</span><span class="params">(K key, V value)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key.hashCode());    </span><br><span class="line">        <span class="keyword">int</span> i = indexFor(hash, table.length);    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 若该HashMap表中存在“键值等于key”的元素，则替换该元素的value值    </span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;    </span><br><span class="line">            Object k;    </span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp;    </span><br><span class="line">                ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;    </span><br><span class="line">                e.value = value;    </span><br><span class="line">                <span class="keyword">return</span>;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 若该HashMap表中不存在“键值等于key”的元素，则将该key-value添加到HashMap中    </span></span><br><span class="line">        createEntry(hash, key, value, i);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 将“m”中的全部元素都添加到HashMap中。    </span></span><br><span class="line">    <span class="comment">// 该方法被内部的构造HashMap的方法所调用。    </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">putAllForCreate</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;    </span><br><span class="line">        <span class="comment">// 利用迭代器将元素逐个添加到HashMap中    </span></span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;? extends Map.Entry&lt;? extends K, ? extends V&gt;&gt; i = m.entrySet().iterator(); i.hasNext(); ) &#123;    </span><br><span class="line">            Map.Entry&lt;? extends K, ? extends V&gt; e = i.next();    </span><br><span class="line">            putForCreate(e.getKey(), e.getValue());    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 重新调整HashMap的大小，newCapacity是调整后的容量    </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;    </span><br><span class="line">        Entry[] oldTable = table;    </span><br><span class="line">        <span class="keyword">int</span> oldCapacity = oldTable.length;   </span><br><span class="line">        <span class="comment">//如果就容量已经达到了最大值，则不能再扩容，直接返回  </span></span><br><span class="line">        <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;    </span><br><span class="line">            threshold = Integer.MAX_VALUE;    </span><br><span class="line">            <span class="keyword">return</span>;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 新建一个HashMap，将“旧HashMap”的全部元素添加到“新HashMap”中，    </span></span><br><span class="line">        <span class="comment">// 然后，将“新HashMap”赋值给“旧HashMap”。    </span></span><br><span class="line">        Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];    </span><br><span class="line">        transfer(newTable);    </span><br><span class="line">        table = newTable;    </span><br><span class="line">        threshold = (<span class="keyword">int</span>)(newCapacity * loadFactor);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 将HashMap中的全部元素都添加到newTable中    </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable)</span> </span>&#123;    </span><br><span class="line">        Entry[] src = table;    </span><br><span class="line">        <span class="keyword">int</span> newCapacity = newTable.length;    </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; src.length; j++) &#123;    </span><br><span class="line">            Entry&lt;K,V&gt; e = src[j];    </span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;    </span><br><span class="line">                src[j] = <span class="keyword">null</span>;    </span><br><span class="line">                <span class="keyword">do</span> &#123;    </span><br><span class="line">                    Entry&lt;K,V&gt; next = e.next;    </span><br><span class="line">                    <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);    </span><br><span class="line">                    e.next = newTable[i];    </span><br><span class="line">                    newTable[i] = e;    </span><br><span class="line">                    e = next;    </span><br><span class="line">                &#125; <span class="keyword">while</span> (e != <span class="keyword">null</span>);    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 将"m"的全部元素都添加到HashMap中    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;    </span><br><span class="line">        <span class="comment">// 有效性判断    </span></span><br><span class="line">        <span class="keyword">int</span> numKeysToBeAdded = m.size();    </span><br><span class="line">        <span class="keyword">if</span> (numKeysToBeAdded == <span class="number">0</span>)    </span><br><span class="line">            <span class="keyword">return</span>;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 计算容量是否足够，    </span></span><br><span class="line">        <span class="comment">// 若“当前阀值容量 &lt; 需要的容量”，则将容量x2。    </span></span><br><span class="line">        <span class="keyword">if</span> (numKeysToBeAdded &gt; threshold) &#123;    </span><br><span class="line">            <span class="keyword">int</span> targetCapacity = (<span class="keyword">int</span>)(numKeysToBeAdded / loadFactor + <span class="number">1</span>);    </span><br><span class="line">            <span class="keyword">if</span> (targetCapacity &gt; MAXIMUM_CAPACITY)    </span><br><span class="line">                targetCapacity = MAXIMUM_CAPACITY;    </span><br><span class="line">            <span class="keyword">int</span> newCapacity = table.length;    </span><br><span class="line">            <span class="keyword">while</span> (newCapacity &lt; targetCapacity)    </span><br><span class="line">                newCapacity &lt;&lt;= <span class="number">1</span>;    </span><br><span class="line">            <span class="keyword">if</span> (newCapacity &gt; table.length)    </span><br><span class="line">                resize(newCapacity);    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 通过迭代器，将“m”中的元素逐个添加到HashMap中。    </span></span><br><span class="line">        <span class="keyword">for</span> (Iterator&lt;? extends Map.Entry&lt;? extends K, ? extends V&gt;&gt; i = m.entrySet().iterator(); i.hasNext(); ) &#123;    </span><br><span class="line">            Map.Entry&lt;? extends K, ? extends V&gt; e = i.next();    </span><br><span class="line">            put(e.getKey(), e.getValue());    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 删除“键为key”元素    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;    </span><br><span class="line">        Entry&lt;K,V&gt; e = removeEntryForKey(key);    </span><br><span class="line">        <span class="keyword">return</span> (e == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 删除“键为key”的元素    </span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">removeEntryForKey</span><span class="params">(Object key)</span> </span>&#123;    </span><br><span class="line">        <span class="comment">// 获取哈希值。若key为null，则哈希值为0；否则调用hash()进行计算    </span></span><br><span class="line">        <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key.hashCode());    </span><br><span class="line">        <span class="keyword">int</span> i = indexFor(hash, table.length);    </span><br><span class="line">        Entry&lt;K,V&gt; prev = table[i];    </span><br><span class="line">        Entry&lt;K,V&gt; e = prev;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 删除链表中“键为key”的元素    </span></span><br><span class="line">        <span class="comment">// 本质是“删除单向链表中的节点”    </span></span><br><span class="line">        <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;    </span><br><span class="line">            Entry&lt;K,V&gt; next = e.next;    </span><br><span class="line">            Object k;    </span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp;    </span><br><span class="line">                ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;    </span><br><span class="line">                modCount++;    </span><br><span class="line">                size--;    </span><br><span class="line">                <span class="keyword">if</span> (prev == e)    </span><br><span class="line">                    table[i] = next;    </span><br><span class="line">                <span class="keyword">else</span>   </span><br><span class="line">                    prev.next = next;    </span><br><span class="line">                e.recordRemoval(<span class="keyword">this</span>);    </span><br><span class="line">                <span class="keyword">return</span> e;    </span><br><span class="line">            &#125;    </span><br><span class="line">            prev = e;    </span><br><span class="line">            e = next;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="keyword">return</span> e;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 删除“键值对”    </span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">removeMapping</span><span class="params">(Object o)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))    </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;    </span><br><span class="line">   </span><br><span class="line">        Map.Entry&lt;K,V&gt; entry = (Map.Entry&lt;K,V&gt;) o;    </span><br><span class="line">        Object key = entry.getKey();    </span><br><span class="line">        <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key.hashCode());    </span><br><span class="line">        <span class="keyword">int</span> i = indexFor(hash, table.length);    </span><br><span class="line">        Entry&lt;K,V&gt; prev = table[i];    </span><br><span class="line">        Entry&lt;K,V&gt; e = prev;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 删除链表中的“键值对e”    </span></span><br><span class="line">        <span class="comment">// 本质是“删除单向链表中的节点”    </span></span><br><span class="line">        <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;    </span><br><span class="line">            Entry&lt;K,V&gt; next = e.next;    </span><br><span class="line">            <span class="keyword">if</span> (e.hash == hash &amp;&amp; e.equals(entry)) &#123;    </span><br><span class="line">                modCount++;    </span><br><span class="line">                size--;    </span><br><span class="line">                <span class="keyword">if</span> (prev == e)    </span><br><span class="line">                    table[i] = next;    </span><br><span class="line">                <span class="keyword">else</span>   </span><br><span class="line">                    prev.next = next;    </span><br><span class="line">                e.recordRemoval(<span class="keyword">this</span>);    </span><br><span class="line">                <span class="keyword">return</span> e;    </span><br><span class="line">            &#125;    </span><br><span class="line">            prev = e;    </span><br><span class="line">            e = next;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="keyword">return</span> e;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 清空HashMap，将所有的元素设为null    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        modCount++;    </span><br><span class="line">        Entry[] tab = table;    </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; i++)    </span><br><span class="line">            tab[i] = <span class="keyword">null</span>;    </span><br><span class="line">        size = <span class="number">0</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 是否包含“值为value”的元素    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;    </span><br><span class="line">    <span class="comment">// 若“value为null”，则调用containsNullValue()查找    </span></span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>)    </span><br><span class="line">            <span class="keyword">return</span> containsNullValue();    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 若“value不为null”，则查找HashMap中是否有值为value的节点。    </span></span><br><span class="line">    Entry[] tab = table;    </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length ; i++)    </span><br><span class="line">            <span class="keyword">for</span> (Entry e = tab[i] ; e != <span class="keyword">null</span> ; e = e.next)    </span><br><span class="line">                <span class="keyword">if</span> (value.equals(e.value))    </span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 是否包含null值    </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">containsNullValue</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">    Entry[] tab = table;    </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length ; i++)    </span><br><span class="line">            <span class="keyword">for</span> (Entry e = tab[i] ; e != <span class="keyword">null</span> ; e = e.next)    </span><br><span class="line">                <span class="keyword">if</span> (e.value == <span class="keyword">null</span>)    </span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 克隆一个HashMap，并返回Object对象    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        HashMap&lt;K,V&gt; result = <span class="keyword">null</span>;    </span><br><span class="line">        <span class="keyword">try</span> &#123;    </span><br><span class="line">            result = (HashMap&lt;K,V&gt;)<span class="keyword">super</span>.clone();    </span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;    </span><br><span class="line">            <span class="comment">// assert false;    </span></span><br><span class="line">        &#125;    </span><br><span class="line">        result.table = <span class="keyword">new</span> Entry[table.length];    </span><br><span class="line">        result.entrySet = <span class="keyword">null</span>;    </span><br><span class="line">        result.modCount = <span class="number">0</span>;    </span><br><span class="line">        result.size = <span class="number">0</span>;    </span><br><span class="line">        result.init();    </span><br><span class="line">        <span class="comment">// 调用putAllForCreate()将全部元素添加到HashMap中    </span></span><br><span class="line">        result.putAllForCreate(<span class="keyword">this</span>);    </span><br><span class="line">   </span><br><span class="line">        <span class="keyword">return</span> result;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// Entry是单向链表。    </span></span><br><span class="line">    <span class="comment">// 它是 “HashMap链式存储法”对应的链表。    </span></span><br><span class="line">    <span class="comment">// 它实现了Map.Entry 接口，即实现getKey(), getValue(), setValue(V value), equals(Object o), hashCode()这些函数    </span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;    </span><br><span class="line">        <span class="keyword">final</span> K key;    </span><br><span class="line">        V value;    </span><br><span class="line">        <span class="comment">// 指向下一个节点    </span></span><br><span class="line">        Entry&lt;K,V&gt; next;    </span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 构造函数。    </span></span><br><span class="line">        <span class="comment">// 输入参数包括"哈希值(h)", "键(k)", "值(v)", "下一节点(n)"    </span></span><br><span class="line">        Entry(<span class="keyword">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;    </span><br><span class="line">            value = v;    </span><br><span class="line">            next = n;    </span><br><span class="line">            key = k;    </span><br><span class="line">            hash = h;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> key;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> value;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123;    </span><br><span class="line">            V oldValue = value;    </span><br><span class="line">            value = newValue;    </span><br><span class="line">            <span class="keyword">return</span> oldValue;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 判断两个Entry是否相等    </span></span><br><span class="line">        <span class="comment">// 若两个Entry的“key”和“value”都相等，则返回true。    </span></span><br><span class="line">        <span class="comment">// 否则，返回false    </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))    </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;    </span><br><span class="line">            Map.Entry e = (Map.Entry)o;    </span><br><span class="line">            Object k1 = getKey();    </span><br><span class="line">            Object k2 = e.getKey();    </span><br><span class="line">            <span class="keyword">if</span> (k1 == k2 || (k1 != <span class="keyword">null</span> &amp;&amp; k1.equals(k2))) &#123;    </span><br><span class="line">                Object v1 = getValue();    </span><br><span class="line">                Object v2 = e.getValue();    </span><br><span class="line">                <span class="keyword">if</span> (v1 == v2 || (v1 != <span class="keyword">null</span> &amp;&amp; v1.equals(v2)))    </span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;    </span><br><span class="line">            &#125;    </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 实现hashCode()    </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> (key==<span class="keyword">null</span>   ? <span class="number">0</span> : key.hashCode()) ^    </span><br><span class="line">                   (value==<span class="keyword">null</span> ? <span class="number">0</span> : value.hashCode());    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> getKey() + <span class="string">"="</span> + getValue();    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 当向HashMap中添加元素时，绘调用recordAccess()。    </span></span><br><span class="line">        <span class="comment">// 这里不做任何处理    </span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">recordAccess</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 当从HashMap中删除元素时，绘调用recordRemoval()。    </span></span><br><span class="line">        <span class="comment">// 这里不做任何处理    </span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">recordRemoval</span><span class="params">(HashMap&lt;K,V&gt; m)</span> </span>&#123;    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 新增Entry。将“key-value”插入指定位置，bucketIndex是位置索引。    </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;    </span><br><span class="line">        <span class="comment">// 保存“bucketIndex”位置的值到“e”中    </span></span><br><span class="line">        Entry&lt;K,V&gt; e = table[bucketIndex];    </span><br><span class="line">        <span class="comment">// 设置“bucketIndex”位置的元素为“新Entry”，    </span></span><br><span class="line">        <span class="comment">// 设置“e”为“新Entry的下一个节点”    </span></span><br><span class="line">        table[bucketIndex] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);    </span><br><span class="line">        <span class="comment">// 若HashMap的实际大小 不小于 “阈值”，则调整HashMap的大小    </span></span><br><span class="line">        <span class="keyword">if</span> (size++ &gt;= threshold)    </span><br><span class="line">            resize(<span class="number">2</span> * table.length);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 创建Entry。将“key-value”插入指定位置。    </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">createEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;    </span><br><span class="line">        <span class="comment">// 保存“bucketIndex”位置的值到“e”中    </span></span><br><span class="line">        Entry&lt;K,V&gt; e = table[bucketIndex];    </span><br><span class="line">        <span class="comment">// 设置“bucketIndex”位置的元素为“新Entry”，    </span></span><br><span class="line">        <span class="comment">// 设置“e”为“新Entry的下一个节点”    </span></span><br><span class="line">        table[bucketIndex] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);    </span><br><span class="line">        size++;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// HashIterator是HashMap迭代器的抽象出来的父类，实现了公共了函数。    </span></span><br><span class="line">    <span class="comment">// 它包含“key迭代器(KeyIterator)”、“Value迭代器(ValueIterator)”和“Entry迭代器(EntryIterator)”3个子类。    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HashIterator</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;    </span><br><span class="line">        <span class="comment">// 下一个元素    </span></span><br><span class="line">        Entry&lt;K,V&gt; next;    </span><br><span class="line">        <span class="comment">// expectedModCount用于实现fast-fail机制。    </span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount;    </span><br><span class="line">        <span class="comment">// 当前索引    </span></span><br><span class="line">        <span class="keyword">int</span> index;    </span><br><span class="line">        <span class="comment">// 当前元素    </span></span><br><span class="line">        Entry&lt;K,V&gt; current;    </span><br><span class="line">   </span><br><span class="line">        HashIterator() &#123;    </span><br><span class="line">            expectedModCount = modCount;    </span><br><span class="line">            <span class="keyword">if</span> (size &gt; <span class="number">0</span>) &#123; <span class="comment">// advance to first entry    </span></span><br><span class="line">                Entry[] t = table;    </span><br><span class="line">                <span class="comment">// 将next指向table中第一个不为null的元素。    </span></span><br><span class="line">                <span class="comment">// 这里利用了index的初始值为0，从0开始依次向后遍历，直到找到不为null的元素就退出循环。    </span></span><br><span class="line">                <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>)    </span><br><span class="line">                    ;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> next != <span class="keyword">null</span>;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 获取下一个元素    </span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">nextEntry</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)    </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();    </span><br><span class="line">            Entry&lt;K,V&gt; e = next;    </span><br><span class="line">            <span class="keyword">if</span> (e == <span class="keyword">null</span>)    </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();    </span><br><span class="line">   </span><br><span class="line">            <span class="comment">// 注意！！！    </span></span><br><span class="line">            <span class="comment">// 一个Entry就是一个单向链表    </span></span><br><span class="line">            <span class="comment">// 若该Entry的下一个节点不为空，就将next指向下一个节点;    </span></span><br><span class="line">            <span class="comment">// 否则，将next指向下一个链表(也是下一个Entry)的不为null的节点。    </span></span><br><span class="line">            <span class="keyword">if</span> ((next = e.next) == <span class="keyword">null</span>) &#123;    </span><br><span class="line">                Entry[] t = table;    </span><br><span class="line">                <span class="keyword">while</span> (index &lt; t.length &amp;&amp; (next = t[index++]) == <span class="keyword">null</span>)    </span><br><span class="line">                    ;    </span><br><span class="line">            &#125;    </span><br><span class="line">            current = e;    </span><br><span class="line">            <span class="keyword">return</span> e;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 删除当前元素    </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">if</span> (current == <span class="keyword">null</span>)    </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();    </span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)    </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();    </span><br><span class="line">            Object k = current.key;    </span><br><span class="line">            current = <span class="keyword">null</span>;    </span><br><span class="line">            HashMap.<span class="keyword">this</span>.removeEntryForKey(k);    </span><br><span class="line">            expectedModCount = modCount;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// value的迭代器    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span>&lt;<span class="title">V</span>&gt; </span>&#123;    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">next</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> nextEntry().value;    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// key的迭代器    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span>&lt;<span class="title">K</span>&gt; </span>&#123;    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">next</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> nextEntry().getKey();    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// Entry的迭代器    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntryIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;    </span><br><span class="line">        <span class="keyword">public</span> Map.<span class="function">Entry&lt;K,V&gt; <span class="title">next</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> nextEntry();    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 返回一个“key迭代器”    </span></span><br><span class="line">    <span class="function">Iterator&lt;K&gt; <span class="title">newKeyIterator</span><span class="params">()</span>   </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeyIterator();    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">// 返回一个“value迭代器”    </span></span><br><span class="line">    <span class="function">Iterator&lt;V&gt; <span class="title">newValueIterator</span><span class="params">()</span>   </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ValueIterator();    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="comment">// 返回一个“entry迭代器”    </span></span><br><span class="line">    Iterator&lt;Map.Entry&lt;K,V&gt;&gt; newEntryIterator()   &#123;    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EntryIterator();    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// HashMap的Entry对应的集合    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet = <span class="keyword">null</span>;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 返回“key的集合”，实际上返回一个“KeySet对象”    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        Set&lt;K&gt; ks = keySet;    </span><br><span class="line">        <span class="keyword">return</span> (ks != <span class="keyword">null</span> ? ks : (keySet = <span class="keyword">new</span> KeySet()));    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// Key对应的集合    </span></span><br><span class="line">    <span class="comment">// KeySet继承于AbstractSet，说明该集合中没有重复的Key。    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">K</span>&gt; </span>&#123;    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> Iterator&lt;K&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> newKeyIterator();    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> size;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> containsKey(o);    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> HashMap.<span class="keyword">this</span>.removeEntryForKey(o) != <span class="keyword">null</span>;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            HashMap.<span class="keyword">this</span>.clear();    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 返回“value集合”，实际上返回的是一个Values对象    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        Collection&lt;V&gt; vs = values;    </span><br><span class="line">        <span class="keyword">return</span> (vs != <span class="keyword">null</span> ? vs : (values = <span class="keyword">new</span> Values()));    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// “value集合”    </span></span><br><span class="line">    <span class="comment">// Values继承于AbstractCollection，不同于“KeySet继承于AbstractSet”，    </span></span><br><span class="line">    <span class="comment">// Values中的元素能够重复。因为不同的key可以指向相同的value。    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Values</span> <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">V</span>&gt; </span>&#123;    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> Iterator&lt;V&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> newValueIterator();    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> size;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> containsValue(o);    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            HashMap.<span class="keyword">this</span>.clear();    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 返回“HashMap的Entry集合”    </span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;    </span><br><span class="line">        <span class="keyword">return</span> entrySet0();    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 返回“HashMap的Entry集合”，它实际是返回一个EntrySet对象    </span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet0() &#123;    </span><br><span class="line">        Set&lt;Map.Entry&lt;K,V&gt;&gt; es = entrySet;    </span><br><span class="line">        <span class="keyword">return</span> es != <span class="keyword">null</span> ? es : (entrySet = <span class="keyword">new</span> EntrySet());    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// EntrySet对应的集合    </span></span><br><span class="line">    <span class="comment">// EntrySet继承于AbstractSet，说明该集合中没有重复的EntrySet。    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">EntrySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;    </span><br><span class="line">        <span class="keyword">public</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;    </span><br><span class="line">            <span class="keyword">return</span> newEntryIterator();    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))    </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;    </span><br><span class="line">            Map.Entry&lt;K,V&gt; e = (Map.Entry&lt;K,V&gt;) o;    </span><br><span class="line">            Entry&lt;K,V&gt; candidate = getEntry(e.getKey());    </span><br><span class="line">            <span class="keyword">return</span> candidate != <span class="keyword">null</span> &amp;&amp; candidate.equals(e);    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> removeMapping(o) != <span class="keyword">null</span>;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> size;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            HashMap.<span class="keyword">this</span>.clear();    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// java.io.Serializable的写入函数    </span></span><br><span class="line">    <span class="comment">// 将HashMap的“总的容量，实际容量，所有的Entry”都写入到输出流中    </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span>    </span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException    </span></span><br><span class="line"><span class="function">    </span>&#123;    </span><br><span class="line">        Iterator&lt;Map.Entry&lt;K,V&gt;&gt; i =    </span><br><span class="line">            (size &gt; <span class="number">0</span>) ? entrySet0().iterator() : <span class="keyword">null</span>;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// Write out the threshold, loadfactor, and any hidden stuff    </span></span><br><span class="line">        s.defaultWriteObject();    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// Write out number of buckets    </span></span><br><span class="line">        s.writeInt(table.length);    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// Write out size (number of Mappings)    </span></span><br><span class="line">        s.writeInt(size);    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// Write out keys and values (alternating)    </span></span><br><span class="line">        <span class="keyword">if</span> (i != <span class="keyword">null</span>) &#123;    </span><br><span class="line">            <span class="keyword">while</span> (i.hasNext()) &#123;    </span><br><span class="line">            Map.Entry&lt;K,V&gt; e = i.next();    </span><br><span class="line">            s.writeObject(e.getKey());    </span><br><span class="line">            s.writeObject(e.getValue());    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">362498820763181265L</span>;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// java.io.Serializable的读取函数：根据写入方式读出    </span></span><br><span class="line">    <span class="comment">// 将HashMap的“总的容量，实际容量，所有的Entry”依次读出    </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span>    </span></span><br><span class="line"><span class="function">         <span class="keyword">throws</span> IOException, ClassNotFoundException    </span></span><br><span class="line"><span class="function">    </span>&#123;    </span><br><span class="line">        <span class="comment">// Read in the threshold, loadfactor, and any hidden stuff    </span></span><br><span class="line">        s.defaultReadObject();    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// Read in number of buckets and allocate the bucket array;    </span></span><br><span class="line">        <span class="keyword">int</span> numBuckets = s.readInt();    </span><br><span class="line">        table = <span class="keyword">new</span> Entry[numBuckets];    </span><br><span class="line">   </span><br><span class="line">        init();  <span class="comment">// Give subclass a chance to do its thing.    </span></span><br><span class="line">   </span><br><span class="line">        <span class="comment">// Read in size (number of Mappings)    </span></span><br><span class="line">        <span class="keyword">int</span> size = s.readInt();    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// Read the keys and values, and put the mappings in the HashMap    </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;    </span><br><span class="line">            K key = (K) s.readObject();    </span><br><span class="line">            V value = (V) s.readObject();    </span><br><span class="line">            putForCreate(key, value);    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 返回“HashMap总的容量”    </span></span><br><span class="line">    <span class="function"><span class="keyword">int</span>   <span class="title">capacity</span><span class="params">()</span>     </span>&#123; <span class="keyword">return</span> table.length; &#125;    </span><br><span class="line">    <span class="comment">// 返回“HashMap的加载因子”    </span></span><br><span class="line">    <span class="function"><span class="keyword">float</span> <span class="title">loadFactor</span><span class="params">()</span>   </span>&#123; <span class="keyword">return</span> loadFactor;   &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h1><p>基于哈希表实现，每个元素都是key-value对，内部通过单链表解决冲突问题，容量不足时，自动增长</p><p>是线程安全的，能用于多线程</p><p>实现了Serializable接口，支持序列号</p><p>实现了Cloneable接口，能被克隆</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;    </span><br><span class="line"><span class="keyword">import</span> java.io.*;    </span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hashtable</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;    </span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">Dictionary</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;    </span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 保存key-value的数组。    </span></span><br><span class="line">    <span class="comment">// Hashtable同样采用单链表解决冲突，每一个Entry本质上是一个单向链表    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Entry[] table;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// Hashtable中键值对的数量    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> count;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 阈值，用于判断是否需要调整Hashtable的容量（threshold = 容量*加载因子）    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> threshold;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 加载因子    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> loadFactor;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// Hashtable被改变的次数，用于fail-fast机制的实现    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> modCount = <span class="number">0</span>;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 序列版本号    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1421746759512286392L</span>;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 指定“容量大小”和“加载因子”的构造函数    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)    </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+    </span><br><span class="line">                                               initialCapacity);    </span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))    </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Load: "</span>+loadFactor);    </span><br><span class="line">   </span><br><span class="line">        <span class="keyword">if</span> (initialCapacity==<span class="number">0</span>)    </span><br><span class="line">            initialCapacity = <span class="number">1</span>;    </span><br><span class="line">        <span class="keyword">this</span>.loadFactor = loadFactor;    </span><br><span class="line">        table = <span class="keyword">new</span> Entry[initialCapacity];    </span><br><span class="line">        threshold = (<span class="keyword">int</span>)(initialCapacity * loadFactor);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 指定“容量大小”的构造函数    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">this</span>(initialCapacity, <span class="number">0.75f</span>);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 默认构造函数。    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="comment">// 默认构造函数，指定的容量大小是11；加载因子是0.75    </span></span><br><span class="line">        <span class="keyword">this</span>(<span class="number">11</span>, <span class="number">0.75f</span>);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 包含“子Map”的构造函数    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(Map&lt;? extends K, ? extends V&gt; t)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">this</span>(Math.max(<span class="number">2</span>*t.size(), <span class="number">11</span>), <span class="number">0.75f</span>);    </span><br><span class="line">        <span class="comment">// 将“子Map”的全部元素都添加到Hashtable中    </span></span><br><span class="line">        putAll(t);    </span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (useAltHashing) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k.getClass() == String.class) &#123;</span><br><span class="line">                <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> h = hashSeed ^ k.hashCode();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// This function ensures that hashCodes that differ only by</span></span><br><span class="line">                <span class="comment">// constant multiples at each bit position have a bounded</span></span><br><span class="line">                <span class="comment">// number of collisions (approximately 8 at default load factor).</span></span><br><span class="line">                h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">                <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">             &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span>  &#123;</span><br><span class="line">            <span class="keyword">return</span> k.hashCode();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> count;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> count == <span class="number">0</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 返回“所有key”的枚举对象    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Enumeration&lt;K&gt; <span class="title">keys</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.&lt;K&gt;getEnumeration(KEYS);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 返回“所有value”的枚举对象    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Enumeration&lt;V&gt; <span class="title">elements</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.&lt;V&gt;getEnumeration(VALUES);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 判断Hashtable是否包含“值(value)”    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object value)</span> </span>&#123;    </span><br><span class="line">        <span class="comment">//注意，Hashtable中的value不能是null，    </span></span><br><span class="line">        <span class="comment">// 若是null的话，抛出异常!    </span></span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;    </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 从后向前遍历table数组中的元素(Entry)    </span></span><br><span class="line">        <span class="comment">// 对于每个Entry(单向链表)，逐个遍历，判断节点的值是否等于value    </span></span><br><span class="line">        Entry tab[] = table;    </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = tab.length ; i-- &gt; <span class="number">0</span> ;) &#123;    </span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[i] ; e != <span class="keyword">null</span> ; e = e.next) &#123;    </span><br><span class="line">                <span class="keyword">if</span> (e.value.equals(value)) &#123;    </span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;    </span><br><span class="line">                &#125;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">containsValue</span><span class="params">(Object value)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> contains(value);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 判断Hashtable是否包含key    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">containsKey</span><span class="params">(Object key)</span> </span>&#123;    </span><br><span class="line">        Entry tab[] = table;    </span><br><span class="line">        <span class="comment">//计算hash值，直接用key的hashCode代替  </span></span><br><span class="line">        <span class="keyword">int</span> hash = key.hashCode();      </span><br><span class="line">        <span class="comment">// 计算在数组中的索引值   </span></span><br><span class="line">        <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;    </span><br><span class="line">        <span class="comment">// 找到“key对应的Entry(链表)”，然后在链表中找出“哈希值”和“键值”与key都相等的元素    </span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;    </span><br><span class="line">            <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;    </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 返回key对应的value，没有的话返回null    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;    </span><br><span class="line">        Entry tab[] = table;    </span><br><span class="line">        <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">        <span class="comment">// 计算索引值，    </span></span><br><span class="line">        <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;    </span><br><span class="line">        <span class="comment">// 找到“key对应的Entry(链表)”，然后在链表中找出“哈希值”和“键值”与key都相等的元素    </span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;    </span><br><span class="line">            <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;    </span><br><span class="line">                <span class="keyword">return</span> e.value;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 调整Hashtable的长度，将长度变成原来的2倍+1   </span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">rehash</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">int</span> oldCapacity = table.length;    </span><br><span class="line">        Entry[] oldMap = table;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">//创建新容量大小的Entry数组  </span></span><br><span class="line">        <span class="keyword">int</span> newCapacity = oldCapacity * <span class="number">2</span> + <span class="number">1</span>;    </span><br><span class="line">        Entry[] newMap = <span class="keyword">new</span> Entry[newCapacity];    </span><br><span class="line">   </span><br><span class="line">        modCount++;    </span><br><span class="line">        threshold = (<span class="keyword">int</span>)(newCapacity * loadFactor);    </span><br><span class="line">        table = newMap;    </span><br><span class="line">          </span><br><span class="line">        <span class="comment">//将“旧的Hashtable”中的元素复制到“新的Hashtable”中  </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = oldCapacity ; i-- &gt; <span class="number">0</span> ;) &#123;    </span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;K,V&gt; old = oldMap[i] ; old != <span class="keyword">null</span> ; ) &#123;    </span><br><span class="line">                Entry&lt;K,V&gt; e = old;    </span><br><span class="line">                old = old.next;    </span><br><span class="line">                <span class="comment">//重新计算index  </span></span><br><span class="line">                <span class="keyword">int</span> index = (e.hash &amp; <span class="number">0x7FFFFFFF</span>) % newCapacity;    </span><br><span class="line">                e.next = newMap[index];    </span><br><span class="line">                newMap[index] = e;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 将“key-value”添加到Hashtable中    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;    </span><br><span class="line">        <span class="comment">// Hashtable中不能插入value为null的元素！！！    </span></span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;    </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 若“Hashtable中已存在键为key的键值对”，    </span></span><br><span class="line">        <span class="comment">// 则用“新的value”替换“旧的value”    </span></span><br><span class="line">        Entry tab[] = table;    </span><br><span class="line">        <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">        <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;    </span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;    </span><br><span class="line">            <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;    </span><br><span class="line">                V old = e.value;    </span><br><span class="line">                e.value = value;    </span><br><span class="line">                <span class="keyword">return</span> old;    </span><br><span class="line">                &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 若“Hashtable中不存在键为key的键值对”，  </span></span><br><span class="line">        <span class="comment">// 将“修改统计数”+1    </span></span><br><span class="line">        modCount++;    </span><br><span class="line">        <span class="comment">//  若“Hashtable实际容量” &gt; “阈值”(阈值=总的容量 * 加载因子)    </span></span><br><span class="line">        <span class="comment">//  则调整Hashtable的大小    </span></span><br><span class="line">        <span class="keyword">if</span> (count &gt;= threshold) &#123;  </span><br><span class="line">            rehash();    </span><br><span class="line">   </span><br><span class="line">            tab = table;    </span><br><span class="line">            index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">//将新的key-value对插入到tab[index]处（即链表的头结点）  </span></span><br><span class="line">        Entry&lt;K,V&gt; e = tab[index];           </span><br><span class="line">        tab[index] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);    </span><br><span class="line">        count++;    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 删除Hashtable中键为key的元素    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;    </span><br><span class="line">        Entry tab[] = table;    </span><br><span class="line">        <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">        <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;    </span><br><span class="line">          </span><br><span class="line">        <span class="comment">//从table[index]链表中找出要删除的节点，并删除该节点。  </span></span><br><span class="line">        <span class="comment">//因为是单链表，因此要保留带删节点的前一个节点，才能有效地删除节点  </span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index], prev = <span class="keyword">null</span> ; e != <span class="keyword">null</span> ; prev = e, e = e.next) &#123;    </span><br><span class="line">            <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;    </span><br><span class="line">                modCount++;    </span><br><span class="line">                <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;    </span><br><span class="line">                    prev.next = e.next;    </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;    </span><br><span class="line">                    tab[index] = e.next;    </span><br><span class="line">                &#125;    </span><br><span class="line">                count--;    </span><br><span class="line">                V oldValue = e.value;    </span><br><span class="line">                e.value = <span class="keyword">null</span>;    </span><br><span class="line">                <span class="keyword">return</span> oldValue;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 将“Map(t)”的中全部元素逐一添加到Hashtable中    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">putAll</span><span class="params">(Map&lt;? extends K, ? extends V&gt; t)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;? extends K, ? extends V&gt; e : t.entrySet())    </span><br><span class="line">            put(e.getKey(), e.getValue());    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 清空Hashtable    </span></span><br><span class="line">    <span class="comment">// 将Hashtable的table数组的值全部设为null    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        Entry tab[] = table;    </span><br><span class="line">        modCount++;    </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = tab.length; --index &gt;= <span class="number">0</span>; )    </span><br><span class="line">            tab[index] = <span class="keyword">null</span>;    </span><br><span class="line">        count = <span class="number">0</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 克隆一个Hashtable，并以Object的形式返回。    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">try</span> &#123;    </span><br><span class="line">            Hashtable&lt;K,V&gt; t = (Hashtable&lt;K,V&gt;) <span class="keyword">super</span>.clone();    </span><br><span class="line">            t.table = <span class="keyword">new</span> Entry[table.length];    </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = table.length ; i-- &gt; <span class="number">0</span> ; ) &#123;    </span><br><span class="line">                t.table[i] = (table[i] != <span class="keyword">null</span>)    </span><br><span class="line">                ? (Entry&lt;K,V&gt;) table[i].clone() : <span class="keyword">null</span>;    </span><br><span class="line">            &#125;    </span><br><span class="line">            t.keySet = <span class="keyword">null</span>;    </span><br><span class="line">            t.entrySet = <span class="keyword">null</span>;    </span><br><span class="line">            t.values = <span class="keyword">null</span>;    </span><br><span class="line">            t.modCount = <span class="number">0</span>;    </span><br><span class="line">            <span class="keyword">return</span> t;    </span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;     </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">int</span> max = size() - <span class="number">1</span>;    </span><br><span class="line">        <span class="keyword">if</span> (max == -<span class="number">1</span>)    </span><br><span class="line">            <span class="keyword">return</span> <span class="string">"&#123;&#125;"</span>;    </span><br><span class="line">   </span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();    </span><br><span class="line">        Iterator&lt;Map.Entry&lt;K,V&gt;&gt; it = entrySet().iterator();    </span><br><span class="line">   </span><br><span class="line">        sb.append(<span class="string">'&#123;'</span>);    </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; ; i++) &#123;    </span><br><span class="line">            Map.Entry&lt;K,V&gt; e = it.next();    </span><br><span class="line">            K key = e.getKey();    </span><br><span class="line">            V value = e.getValue();    </span><br><span class="line">            sb.append(key   == <span class="keyword">this</span> ? <span class="string">"(this Map)"</span> : key.toString());    </span><br><span class="line">            sb.append(<span class="string">'='</span>);    </span><br><span class="line">            sb.append(value == <span class="keyword">this</span> ? <span class="string">"(this Map)"</span> : value.toString());    </span><br><span class="line">   </span><br><span class="line">            <span class="keyword">if</span> (i == max)    </span><br><span class="line">                <span class="keyword">return</span> sb.append(<span class="string">'&#125;'</span>).toString();    </span><br><span class="line">            sb.append(<span class="string">", "</span>);    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 获取Hashtable的枚举类对象    </span></span><br><span class="line">    <span class="comment">// 若Hashtable的实际大小为0,则返回“空枚举类”对象；    </span></span><br><span class="line">    <span class="comment">// 否则，返回正常的Enumerator的对象。   </span></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">Enumeration&lt;T&gt; <span class="title">getEnumeration</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;    </span><br><span class="line">        <span class="keyword">return</span> (Enumeration&lt;T&gt;)emptyEnumerator;    </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Enumerator&lt;T&gt;(type, <span class="keyword">false</span>);    </span><br><span class="line">    &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 获取Hashtable的迭代器    </span></span><br><span class="line">    <span class="comment">// 若Hashtable的实际大小为0,则返回“空迭代器”对象；    </span></span><br><span class="line">    <span class="comment">// 否则，返回正常的Enumerator的对象。(Enumerator实现了迭代器和枚举两个接口)    </span></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">Iterator&lt;T&gt; <span class="title">getIterator</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;    </span><br><span class="line">            <span class="keyword">return</span> (Iterator&lt;T&gt;) emptyIterator;    </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;    </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Enumerator&lt;T&gt;(type, <span class="keyword">true</span>);    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// Hashtable的“key的集合”。它是一个Set，没有重复元素    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Set&lt;K&gt; keySet = <span class="keyword">null</span>;    </span><br><span class="line">    <span class="comment">// Hashtable的“key-value的集合”。它是一个Set，没有重复元素    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet = <span class="keyword">null</span>;    </span><br><span class="line">    <span class="comment">// Hashtable的“key-value的集合”。它是一个Collection，可以有重复元素    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Collection&lt;V&gt; values = <span class="keyword">null</span>;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 返回一个被synchronizedSet封装后的KeySet对象    </span></span><br><span class="line">    <span class="comment">// synchronizedSet封装的目的是对KeySet的所有方法都添加synchronized，实现多线程同步    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">if</span> (keySet == <span class="keyword">null</span>)    </span><br><span class="line">            keySet = Collections.synchronizedSet(<span class="keyword">new</span> KeySet(), <span class="keyword">this</span>);    </span><br><span class="line">        <span class="keyword">return</span> keySet;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// Hashtable的Key的Set集合。    </span></span><br><span class="line">    <span class="comment">// KeySet继承于AbstractSet，所以，KeySet中的元素没有重复的。    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">KeySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">K</span>&gt; </span>&#123;    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> Iterator&lt;K&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> getIterator(KEYS);    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> count;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> containsKey(o);    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> Hashtable.<span class="keyword">this</span>.remove(o) != <span class="keyword">null</span>;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            Hashtable.<span class="keyword">this</span>.clear();    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 返回一个被synchronizedSet封装后的EntrySet对象    </span></span><br><span class="line">    <span class="comment">// synchronizedSet封装的目的是对EntrySet的所有方法都添加synchronized，实现多线程同步    </span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() &#123;    </span><br><span class="line">        <span class="keyword">if</span> (entrySet==<span class="keyword">null</span>)    </span><br><span class="line">            entrySet = Collections.synchronizedSet(<span class="keyword">new</span> EntrySet(), <span class="keyword">this</span>);    </span><br><span class="line">        <span class="keyword">return</span> entrySet;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// Hashtable的Entry的Set集合。    </span></span><br><span class="line">    <span class="comment">// EntrySet继承于AbstractSet，所以，EntrySet中的元素没有重复的。    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">EntrySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&gt; </span>&#123;    </span><br><span class="line">        <span class="keyword">public</span> Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() &#123;    </span><br><span class="line">            <span class="keyword">return</span> getIterator(ENTRIES);    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Map.Entry&lt;K,V&gt; o)</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.add(o);    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 查找EntrySet中是否包含Object(0)    </span></span><br><span class="line">        <span class="comment">// 首先，在table中找到o对应的Entry链表    </span></span><br><span class="line">        <span class="comment">// 然后，查找Entry链表中是否存在Object    </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))    </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;    </span><br><span class="line">            Map.Entry entry = (Map.Entry)o;    </span><br><span class="line">            Object key = entry.getKey();    </span><br><span class="line">            Entry[] tab = table;    </span><br><span class="line">            <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">            <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;    </span><br><span class="line">   </span><br><span class="line">            <span class="keyword">for</span> (Entry e = tab[index]; e != <span class="keyword">null</span>; e = e.next)    </span><br><span class="line">                <span class="keyword">if</span> (e.hash==hash &amp;&amp; e.equals(entry))    </span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;    </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 删除元素Object(0)    </span></span><br><span class="line">        <span class="comment">// 首先，在table中找到o对应的Entry链表  </span></span><br><span class="line">        <span class="comment">// 然后，删除链表中的元素Object    </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))    </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;    </span><br><span class="line">            Map.Entry&lt;K,V&gt; entry = (Map.Entry&lt;K,V&gt;) o;    </span><br><span class="line">            K key = entry.getKey();    </span><br><span class="line">            Entry[] tab = table;    </span><br><span class="line">            <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">            <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;    </span><br><span class="line">   </span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index], prev = <span class="keyword">null</span>; e != <span class="keyword">null</span>;    </span><br><span class="line">                 prev = e, e = e.next) &#123;    </span><br><span class="line">                <span class="keyword">if</span> (e.hash==hash &amp;&amp; e.equals(entry)) &#123;    </span><br><span class="line">                    modCount++;    </span><br><span class="line">                    <span class="keyword">if</span> (prev != <span class="keyword">null</span>)    </span><br><span class="line">                        prev.next = e.next;    </span><br><span class="line">                    <span class="keyword">else</span>   </span><br><span class="line">                        tab[index] = e.next;    </span><br><span class="line">   </span><br><span class="line">                    count--;    </span><br><span class="line">                    e.value = <span class="keyword">null</span>;    </span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;    </span><br><span class="line">                &#125;    </span><br><span class="line">            &#125;    </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> count;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            Hashtable.<span class="keyword">this</span>.clear();    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 返回一个被synchronizedCollection封装后的ValueCollection对象    </span></span><br><span class="line">    <span class="comment">// synchronizedCollection封装的目的是对ValueCollection的所有方法都添加synchronized，实现多线程同步    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;V&gt; <span class="title">values</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">if</span> (values==<span class="keyword">null</span>)    </span><br><span class="line">        values = Collections.synchronizedCollection(<span class="keyword">new</span> ValueCollection(),    </span><br><span class="line">                                                        <span class="keyword">this</span>);    </span><br><span class="line">        <span class="keyword">return</span> values;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// Hashtable的value的Collection集合。    </span></span><br><span class="line">    <span class="comment">// ValueCollection继承于AbstractCollection，所以，ValueCollection中的元素可以重复的。    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueCollection</span> <span class="keyword">extends</span> <span class="title">AbstractCollection</span>&lt;<span class="title">V</span>&gt; </span>&#123;    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> Iterator&lt;V&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> getIterator(VALUES);    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> count;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> containsValue(o);    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            Hashtable.<span class="keyword">this</span>.clear();    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 重新equals()函数    </span></span><br><span class="line">    <span class="comment">// 若两个Hashtable的所有key-value键值对都相等，则判断它们两个相等    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">this</span>)    </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;    </span><br><span class="line">   </span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map))    </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;    </span><br><span class="line">        Map&lt;K,V&gt; t = (Map&lt;K,V&gt;) o;    </span><br><span class="line">        <span class="keyword">if</span> (t.size() != size())    </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;    </span><br><span class="line">   </span><br><span class="line">        <span class="keyword">try</span> &#123;    </span><br><span class="line">            <span class="comment">// 通过迭代器依次取出当前Hashtable的key-value键值对    </span></span><br><span class="line">            <span class="comment">// 并判断该键值对，存在于Hashtable中。    </span></span><br><span class="line">            <span class="comment">// 若不存在，则立即返回false；否则，遍历完“当前Hashtable”并返回true。    </span></span><br><span class="line">            Iterator&lt;Map.Entry&lt;K,V&gt;&gt; i = entrySet().iterator();    </span><br><span class="line">            <span class="keyword">while</span> (i.hasNext()) &#123;    </span><br><span class="line">                Map.Entry&lt;K,V&gt; e = i.next();    </span><br><span class="line">                K key = e.getKey();    </span><br><span class="line">                V value = e.getValue();    </span><br><span class="line">                <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;    </span><br><span class="line">                    <span class="keyword">if</span> (!(t.get(key)==<span class="keyword">null</span> &amp;&amp; t.containsKey(key)))    </span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;    </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;    </span><br><span class="line">                    <span class="keyword">if</span> (!value.equals(t.get(key)))    </span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;    </span><br><span class="line">                &#125;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassCastException unused)   &#123;    </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;    </span><br><span class="line">        &#125; <span class="keyword">catch</span> (NullPointerException unused) &#123;    </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 计算Entry的hashCode    </span></span><br><span class="line">    <span class="comment">// 若 Hashtable的实际大小为0 或者 加载因子&lt;0，则返回0。    </span></span><br><span class="line">    <span class="comment">// 否则，返回“Hashtable中的每个Entry的key和value的异或值 的总和”。    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">int</span> h = <span class="number">0</span>;    </span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span> || loadFactor &lt; <span class="number">0</span>)    </span><br><span class="line">            <span class="keyword">return</span> h;  <span class="comment">// Returns zero    </span></span><br><span class="line">   </span><br><span class="line">        loadFactor = -loadFactor;  <span class="comment">// Mark hashCode computation in progress    </span></span><br><span class="line">        Entry[] tab = table;    </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tab.length; i++)    </span><br><span class="line">            <span class="keyword">for</span> (Entry e = tab[i]; e != <span class="keyword">null</span>; e = e.next)    </span><br><span class="line">                h += e.key.hashCode() ^ e.value.hashCode();    </span><br><span class="line">        loadFactor = -loadFactor;  <span class="comment">// Mark hashCode computation complete    </span></span><br><span class="line">   </span><br><span class="line">        <span class="keyword">return</span> h;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// java.io.Serializable的写入函数    </span></span><br><span class="line">    <span class="comment">// 将Hashtable的“总的容量，实际容量，所有的Entry”都写入到输出流中    </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span>    </span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException    </span></span><br><span class="line"><span class="function">    </span>&#123;    </span><br><span class="line">        <span class="comment">// Write out the length, threshold, loadfactor    </span></span><br><span class="line">        s.defaultWriteObject();    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// Write out length, count of elements and then the key/value objects    </span></span><br><span class="line">        s.writeInt(table.length);    </span><br><span class="line">        s.writeInt(count);    </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = table.length-<span class="number">1</span>; index &gt;= <span class="number">0</span>; index--) &#123;    </span><br><span class="line">            Entry entry = table[index];    </span><br><span class="line">   </span><br><span class="line">            <span class="keyword">while</span> (entry != <span class="keyword">null</span>) &#123;    </span><br><span class="line">            s.writeObject(entry.key);    </span><br><span class="line">            s.writeObject(entry.value);    </span><br><span class="line">            entry = entry.next;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// java.io.Serializable的读取函数：根据写入方式读出    </span></span><br><span class="line">    <span class="comment">// 将Hashtable的“总的容量，实际容量，所有的Entry”依次读出    </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span>    </span></span><br><span class="line"><span class="function">         <span class="keyword">throws</span> IOException, ClassNotFoundException    </span></span><br><span class="line"><span class="function">    </span>&#123;    </span><br><span class="line">        <span class="comment">// Read in the length, threshold, and loadfactor    </span></span><br><span class="line">        s.defaultReadObject();    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// Read the original length of the array and number of elements    </span></span><br><span class="line">        <span class="keyword">int</span> origlength = s.readInt();    </span><br><span class="line">        <span class="keyword">int</span> elements = s.readInt();    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// Compute new size with a bit of room 5% to grow but    </span></span><br><span class="line">        <span class="comment">// no larger than the original size.  Make the length    </span></span><br><span class="line">        <span class="comment">// odd if it's large enough, this helps distribute the entries.    </span></span><br><span class="line">        <span class="comment">// Guard against the length ending up zero, that's not valid.    </span></span><br><span class="line">        <span class="keyword">int</span> length = (<span class="keyword">int</span>)(elements * loadFactor) + (elements / <span class="number">20</span>) + <span class="number">3</span>;    </span><br><span class="line">        <span class="keyword">if</span> (length &gt; elements &amp;&amp; (length &amp; <span class="number">1</span>) == <span class="number">0</span>)    </span><br><span class="line">            length--;    </span><br><span class="line">        <span class="keyword">if</span> (origlength &gt; <span class="number">0</span> &amp;&amp; length &gt; origlength)    </span><br><span class="line">            length = origlength;    </span><br><span class="line">   </span><br><span class="line">        Entry[] table = <span class="keyword">new</span> Entry[length];    </span><br><span class="line">        count = <span class="number">0</span>;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// Read the number of elements and then all the key/value objects    </span></span><br><span class="line">        <span class="keyword">for</span> (; elements &gt; <span class="number">0</span>; elements--) &#123;    </span><br><span class="line">            K key = (K)s.readObject();    </span><br><span class="line">            V value = (V)s.readObject();    </span><br><span class="line">                <span class="comment">// synch could be eliminated for performance    </span></span><br><span class="line">                reconstitutionPut(table, key, value);    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">this</span>.table = table;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">reconstitutionPut</span><span class="params">(Entry[] tab, K key, V value)</span>    </span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> StreamCorruptedException    </span></span><br><span class="line"><span class="function">    </span>&#123;    </span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;    </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> java.io.StreamCorruptedException();    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="comment">// Makes sure the key is not already in the hashtable.    </span></span><br><span class="line">        <span class="comment">// This should not happen in deserialized version.    </span></span><br><span class="line">        <span class="keyword">int</span> hash = key.hashCode();    </span><br><span class="line">        <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;    </span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;    </span><br><span class="line">            <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;    </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> java.io.StreamCorruptedException();    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="comment">// Creates the new entry.    </span></span><br><span class="line">        Entry&lt;K,V&gt; e = tab[index];    </span><br><span class="line">        tab[index] = <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value, e);    </span><br><span class="line">        count++;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// Hashtable的Entry节点，它本质上是一个单向链表。    </span></span><br><span class="line">    <span class="comment">// 也因此，我们才能推断出Hashtable是由拉链法实现的散列表    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;    </span><br><span class="line">        <span class="comment">// 哈希值    </span></span><br><span class="line">        <span class="keyword">int</span> hash;    </span><br><span class="line">        K key;    </span><br><span class="line">        V value;    </span><br><span class="line">        <span class="comment">// 指向的下一个Entry，即链表的下一个节点    </span></span><br><span class="line">        Entry&lt;K,V&gt; next;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 构造函数    </span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="title">Entry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, Entry&lt;K,V&gt; next)</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">this</span>.hash = hash;    </span><br><span class="line">            <span class="keyword">this</span>.key = key;    </span><br><span class="line">            <span class="keyword">this</span>.value = value;    </span><br><span class="line">            <span class="keyword">this</span>.next = next;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Entry&lt;K,V&gt;(hash, key, value,    </span><br><span class="line">                  (next==<span class="keyword">null</span> ? <span class="keyword">null</span> : (Entry&lt;K,V&gt;) next.clone()));    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> key;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> value;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 设置value。若value是null，则抛出异常。    </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> V <span class="title">setValue</span><span class="params">(V value)</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">if</span> (value == <span class="keyword">null</span>)    </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();    </span><br><span class="line">   </span><br><span class="line">            V oldValue = <span class="keyword">this</span>.value;    </span><br><span class="line">            <span class="keyword">this</span>.value = value;    </span><br><span class="line">            <span class="keyword">return</span> oldValue;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 覆盖equals()方法，判断两个Entry是否相等。    </span></span><br><span class="line">        <span class="comment">// 若两个Entry的key和value都相等，则认为它们相等。    </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Map.Entry))    </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;    </span><br><span class="line">            Map.Entry e = (Map.Entry)o;    </span><br><span class="line">   </span><br><span class="line">            <span class="keyword">return</span> (key==<span class="keyword">null</span> ? e.getKey()==<span class="keyword">null</span> : key.equals(e.getKey())) &amp;&amp;    </span><br><span class="line">               (value==<span class="keyword">null</span> ? e.getValue()==<span class="keyword">null</span> : value.equals(e.getValue()));    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> hash ^ (value==<span class="keyword">null</span> ? <span class="number">0</span> : value.hashCode());    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> key.toString()+<span class="string">"="</span>+value.toString();    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEYS = <span class="number">0</span>;    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VALUES = <span class="number">1</span>;    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ENTRIES = <span class="number">2</span>;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// Enumerator的作用是提供了“通过elements()遍历Hashtable的接口” 和 “通过entrySet()遍历Hashtable的接口”。    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Enumerator</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Enumeration</span>&lt;<span class="title">T</span>&gt;, <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;    </span><br><span class="line">        <span class="comment">// 指向Hashtable的table    </span></span><br><span class="line">        Entry[] table = Hashtable.<span class="keyword">this</span>.table;    </span><br><span class="line">        <span class="comment">// Hashtable的总的大小    </span></span><br><span class="line">        <span class="keyword">int</span> index = table.length;    </span><br><span class="line">        Entry&lt;K,V&gt; entry = <span class="keyword">null</span>;    </span><br><span class="line">        Entry&lt;K,V&gt; lastReturned = <span class="keyword">null</span>;    </span><br><span class="line">        <span class="keyword">int</span> type;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// Enumerator是 “迭代器(Iterator)” 还是 “枚举类(Enumeration)”的标志    </span></span><br><span class="line">        <span class="comment">// iterator为true，表示它是迭代器；否则，是枚举类。    </span></span><br><span class="line">        <span class="keyword">boolean</span> iterator;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 在将Enumerator当作迭代器使用时会用到，用来实现fail-fast机制。    </span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">int</span> expectedModCount = modCount;    </span><br><span class="line">   </span><br><span class="line">        Enumerator(<span class="keyword">int</span> type, <span class="keyword">boolean</span> iterator) &#123;    </span><br><span class="line">            <span class="keyword">this</span>.type = type;    </span><br><span class="line">            <span class="keyword">this</span>.iterator = iterator;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 从遍历table的数组的末尾向前查找，直到找到不为null的Entry。    </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasMoreElements</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            Entry&lt;K,V&gt; e = entry;    </span><br><span class="line">            <span class="keyword">int</span> i = index;    </span><br><span class="line">            Entry[] t = table;    </span><br><span class="line">            <span class="comment">/* Use locals for faster loop iteration */</span>   </span><br><span class="line">            <span class="keyword">while</span> (e == <span class="keyword">null</span> &amp;&amp; i &gt; <span class="number">0</span>) &#123;    </span><br><span class="line">                e = t[--i];    </span><br><span class="line">            &#125;    </span><br><span class="line">            entry = e;    </span><br><span class="line">            index = i;    </span><br><span class="line">            <span class="keyword">return</span> e != <span class="keyword">null</span>;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 获取下一个元素    </span></span><br><span class="line">        <span class="comment">// 注意：从hasMoreElements() 和nextElement() 可以看出“Hashtable的elements()遍历方式”    </span></span><br><span class="line">        <span class="comment">// 首先，从后向前的遍历table数组。table数组的每个节点都是一个单向链表(Entry)。    </span></span><br><span class="line">        <span class="comment">// 然后，依次向后遍历单向链表Entry。    </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">nextElement</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            Entry&lt;K,V&gt; et = entry;    </span><br><span class="line">            <span class="keyword">int</span> i = index;    </span><br><span class="line">            Entry[] t = table;    </span><br><span class="line">            <span class="comment">/* Use locals for faster loop iteration */</span>   </span><br><span class="line">            <span class="keyword">while</span> (et == <span class="keyword">null</span> &amp;&amp; i &gt; <span class="number">0</span>) &#123;    </span><br><span class="line">                et = t[--i];    </span><br><span class="line">            &#125;    </span><br><span class="line">            entry = et;    </span><br><span class="line">            index = i;    </span><br><span class="line">            <span class="keyword">if</span> (et != <span class="keyword">null</span>) &#123;    </span><br><span class="line">                Entry&lt;K,V&gt; e = lastReturned = entry;    </span><br><span class="line">                entry = e.next;    </span><br><span class="line">                <span class="keyword">return</span> type == KEYS ? (T)e.key : (type == VALUES ? (T)e.value : (T)e);    </span><br><span class="line">            &#125;    </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"Hashtable Enumerator"</span>);    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 迭代器Iterator的判断是否存在下一个元素    </span></span><br><span class="line">        <span class="comment">// 实际上，它是调用的hasMoreElements()    </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> hasMoreElements();    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 迭代器获取下一个元素    </span></span><br><span class="line">        <span class="comment">// 实际上，它是调用的nextElement()    </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">next</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)    </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();    </span><br><span class="line">            <span class="keyword">return</span> nextElement();    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 迭代器的remove()接口。    </span></span><br><span class="line">        <span class="comment">// 首先，它在table数组中找出要删除元素所在的Entry，    </span></span><br><span class="line">        <span class="comment">// 然后，删除单向链表Entry中的元素。    </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">if</span> (!iterator)    </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();    </span><br><span class="line">            <span class="keyword">if</span> (lastReturned == <span class="keyword">null</span>)    </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Hashtable Enumerator"</span>);    </span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)    </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();    </span><br><span class="line">   </span><br><span class="line">            <span class="keyword">synchronized</span>(Hashtable.<span class="keyword">this</span>) &#123;    </span><br><span class="line">                Entry[] tab = Hashtable.<span class="keyword">this</span>.table;    </span><br><span class="line">                <span class="keyword">int</span> index = (lastReturned.hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;    </span><br><span class="line">   </span><br><span class="line">                <span class="keyword">for</span> (Entry&lt;K,V&gt; e = tab[index], prev = <span class="keyword">null</span>; e != <span class="keyword">null</span>;    </span><br><span class="line">                     prev = e, e = e.next) &#123;    </span><br><span class="line">                    <span class="keyword">if</span> (e == lastReturned) &#123;    </span><br><span class="line">                        modCount++;    </span><br><span class="line">                        expectedModCount++;    </span><br><span class="line">                        <span class="keyword">if</span> (prev == <span class="keyword">null</span>)    </span><br><span class="line">                            tab[index] = e.next;    </span><br><span class="line">                        <span class="keyword">else</span>   </span><br><span class="line">                            prev.next = e.next;    </span><br><span class="line">                        count--;    </span><br><span class="line">                        lastReturned = <span class="keyword">null</span>;    </span><br><span class="line">                        <span class="keyword">return</span>;    </span><br><span class="line">                    &#125;    </span><br><span class="line">                &#125;    </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Enumeration emptyEnumerator = <span class="keyword">new</span> EmptyEnumerator();    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Iterator emptyIterator = <span class="keyword">new</span> EmptyIterator();    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 空枚举类    </span></span><br><span class="line">    <span class="comment">// 当Hashtable的实际大小为0；此时，又要通过Enumeration遍历Hashtable时，返回的是“空枚举类”的对象。    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmptyEnumerator</span> <span class="keyword">implements</span> <span class="title">Enumeration</span>&lt;<span class="title">Object</span>&gt; </span>&#123;    </span><br><span class="line">   </span><br><span class="line">        EmptyEnumerator() &#123;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 空枚举类的hasMoreElements() 始终返回false    </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasMoreElements</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 空枚举类的nextElement() 抛出异常    </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">nextElement</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"Hashtable Enumerator"</span>);    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 空迭代器    </span></span><br><span class="line">    <span class="comment">// 当Hashtable的实际大小为0；此时，又要通过迭代器遍历Hashtable时，返回的是“空迭代器”的对象。    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">EmptyIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Object</span>&gt; </span>&#123;    </span><br><span class="line">   </span><br><span class="line">        EmptyIterator() &#123;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException(<span class="string">"Hashtable Iterator"</span>);    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Hashtable Iterator"</span>);    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><p>是最基本的集合接口</p><p>继承的接口：Iterable</p><p>子接口：List、Set、Queue等</p><p>遍历Collection中的每一个元素</p><p>它支持一个Iterator()方法，该方法返回一个迭代子，该迭代子可逐一访问Collection中每一个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Iterator it = collection.iterator(); <span class="comment">// 获得一个迭代子</span></span><br><span class="line">    <span class="keyword">while</span>(it.hasNext())　　</span><br><span class="line">    &#123;</span><br><span class="line">        Object obj = it.next(); <span class="comment">// 得到下一个元素</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">retainAll(Collection&lt;?extends E&gt;c);  <span class="comment">//保留，交运算</span></span><br><span class="line">addAll(Collection&lt;?extends E&gt;c);       <span class="comment">//添加，并运算</span></span><br><span class="line">removeAll(Collection&lt;?extends E&gt;c);     <span class="comment">//移除，减运算</span></span><br></pre></td></tr></table></figure><hr><h1 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h1><p>LinkedList是基于双向循环链表实现的，除了可以当作链表来操作外，它还可以当作栈、队列和双端队列来使用。</p><p>非线程安全，单线程下使用</p><p>LinkedList实现了Serializable接口，因此它支持序列化，能够通过序列化传输，实现了Cloneable接口，能被克隆。</p><ul><li>是一个类</li><li>实现的接口：List、Collection、Iterable、Serializable、Cloneable、Deque，Queue</li><li>子类：没有子类</li></ul><p>添加元素方法：</p><p><strong>boolean add(E e)</strong> 添加到链表末尾</p><p><strong>void add(int index, E e)</strong> 添加到指定位置</p><p><strong>boolean addAll(int index, Collection&lt;? extends E&gt; c)</strong></p><p><strong>boolean addAll(Collection&lt;? extends E&gt; c)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;    </span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;    </span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;    </span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>    </span></span><br><span class="line"><span class="class"></span>&#123;    </span><br><span class="line">    <span class="comment">// 链表的表头，表头不包含任何数据。Entry是个链表类数据结构。    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;E&gt; header = <span class="keyword">new</span> Entry&lt;E&gt;(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// LinkedList中元素个数    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 默认构造函数：创建一个空的链表    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        header.next = header.previous = header;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 包含“集合”的构造函数:创建一个包含“集合”的LinkedList    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">this</span>();    </span><br><span class="line">        addAll(c);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 获取LinkedList的第一个元素    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getFirst</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">if</span> (size==<span class="number">0</span>)    </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 链表的表头header中不包含数据。    </span></span><br><span class="line">        <span class="comment">// 这里返回header所指下一个节点所包含的数据。    </span></span><br><span class="line">        <span class="keyword">return</span> header.next.element;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 获取LinkedList的最后一个元素    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getLast</span><span class="params">()</span>  </span>&#123;    </span><br><span class="line">        <span class="keyword">if</span> (size==<span class="number">0</span>)    </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 由于LinkedList是双向链表；而表头header不包含数据。    </span></span><br><span class="line">        <span class="comment">// 因而，这里返回表头header的前一个节点所包含的数据。    </span></span><br><span class="line">        <span class="keyword">return</span> header.previous.element;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 删除LinkedList的第一个元素    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> remove(header.next);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 删除LinkedList的最后一个元素    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> remove(header.previous);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 将元素添加到LinkedList的起始位置    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span> </span>&#123;    </span><br><span class="line">        addBefore(e, header.next);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 将元素添加到LinkedList的结束位置    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span> </span>&#123;    </span><br><span class="line">        addBefore(e, header);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 判断LinkedList是否包含元素(o)    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> indexOf(o) != -<span class="number">1</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 返回LinkedList的大小    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> size;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 将元素(E)添加到LinkedList中    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;    </span><br><span class="line">        <span class="comment">// 将节点(节点数据是e)添加到表头(header)之前。    </span></span><br><span class="line">        <span class="comment">// 即，将节点添加到双向链表的末端。    </span></span><br><span class="line">        addBefore(e, header);    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 从LinkedList中删除元素(o)    </span></span><br><span class="line">    <span class="comment">// 从链表开始查找，如存在元素(o)则删除该元素并返回true；    </span></span><br><span class="line">    <span class="comment">// 否则，返回false。    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">if</span> (o==<span class="keyword">null</span>) &#123;    </span><br><span class="line">            <span class="comment">// 若o为null的删除情况    </span></span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;E&gt; e = header.next; e != header; e = e.next) &#123;    </span><br><span class="line">                <span class="keyword">if</span> (e.element==<span class="keyword">null</span>) &#123;    </span><br><span class="line">                    remove(e);    </span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;    </span><br><span class="line">                &#125;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;    </span><br><span class="line">            <span class="comment">// 若o不为null的删除情况    </span></span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;E&gt; e = header.next; e != header; e = e.next) &#123;    </span><br><span class="line">                <span class="keyword">if</span> (o.equals(e.element)) &#123;    </span><br><span class="line">                    remove(e);    </span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;    </span><br><span class="line">                &#125;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 将“集合(c)”添加到LinkedList中。    </span></span><br><span class="line">    <span class="comment">// 实际上，是从双向链表的末尾开始，将“集合(c)”添加到双向链表中。    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> addAll(size, c);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 从双向链表的index开始，将“集合(c)”添加到双向链表中。    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size)    </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+index+    </span><br><span class="line">                                                <span class="string">", Size: "</span>+size);    </span><br><span class="line">        Object[] a = c.toArray();    </span><br><span class="line">        <span class="comment">// 获取集合的长度    </span></span><br><span class="line">        <span class="keyword">int</span> numNew = a.length;    </span><br><span class="line">        <span class="keyword">if</span> (numNew==<span class="number">0</span>)    </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;    </span><br><span class="line">        modCount++;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 设置“当前要插入节点的后一个节点”    </span></span><br><span class="line">        Entry&lt;E&gt; successor = (index==size ? header : entry(index));    </span><br><span class="line">        <span class="comment">// 设置“当前要插入节点的前一个节点”    </span></span><br><span class="line">        Entry&lt;E&gt; predecessor = successor.previous;    </span><br><span class="line">        <span class="comment">// 将集合(c)全部插入双向链表中    </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;numNew; i++) &#123;    </span><br><span class="line">            Entry&lt;E&gt; e = <span class="keyword">new</span> Entry&lt;E&gt;((E)a[i], successor, predecessor);    </span><br><span class="line">            predecessor.next = e;    </span><br><span class="line">            predecessor = e;    </span><br><span class="line">        &#125;    </span><br><span class="line">        successor.previous = predecessor;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 调整LinkedList的实际大小    </span></span><br><span class="line">        size += numNew;    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 清空双向链表    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        Entry&lt;E&gt; e = header.next;    </span><br><span class="line">        <span class="comment">// 从表头开始，逐个向后遍历；对遍历到的节点执行一下操作：    </span></span><br><span class="line">        <span class="comment">// (01) 设置前一个节点为null     </span></span><br><span class="line">        <span class="comment">// (02) 设置当前节点的内容为null     </span></span><br><span class="line">        <span class="comment">// (03) 设置后一个节点为“新的当前节点”    </span></span><br><span class="line">        <span class="keyword">while</span> (e != header) &#123;    </span><br><span class="line">            Entry&lt;E&gt; next = e.next;    </span><br><span class="line">            e.next = e.previous = <span class="keyword">null</span>;    </span><br><span class="line">            e.element = <span class="keyword">null</span>;    </span><br><span class="line">            e = next;    </span><br><span class="line">        &#125;    </span><br><span class="line">        header.next = header.previous = header;    </span><br><span class="line">        <span class="comment">// 设置大小为0    </span></span><br><span class="line">        size = <span class="number">0</span>;    </span><br><span class="line">        modCount++;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 返回LinkedList指定位置的元素    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> entry(index).element;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 设置index位置对应的节点的值为element    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;    </span><br><span class="line">        Entry&lt;E&gt; e = entry(index);    </span><br><span class="line">        E oldVal = e.element;    </span><br><span class="line">        e.element = element;    </span><br><span class="line">        <span class="keyword">return</span> oldVal;    </span><br><span class="line">    &#125;    </span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 在index前添加节点，且节点的值为element    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;    </span><br><span class="line">        addBefore(element, (index==size ? header : entry(index)));    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 删除index位置的节点    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> remove(entry(index));    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 获取双向链表中指定位置的节点    </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Entry&lt;E&gt; <span class="title">entry</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size)    </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+index+    </span><br><span class="line">                                                <span class="string">", Size: "</span>+size);    </span><br><span class="line">        Entry&lt;E&gt; e = header;    </span><br><span class="line">        <span class="comment">// 获取index处的节点。    </span></span><br><span class="line">        <span class="comment">// 若index &lt; 双向链表长度的1/2,则从前先后查找;    </span></span><br><span class="line">        <span class="comment">// 否则，从后向前查找。    </span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;    </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= index; i++)    </span><br><span class="line">                e = e.next;    </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;    </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = size; i &gt; index; i--)    </span><br><span class="line">                e = e.previous;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> e;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 从前向后查找，返回“值为对象(o)的节点对应的索引”    </span></span><br><span class="line">    <span class="comment">// 不存在就返回-1    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;    </span><br><span class="line">        <span class="keyword">if</span> (o==<span class="keyword">null</span>) &#123;    </span><br><span class="line">            <span class="keyword">for</span> (Entry e = header.next; e != header; e = e.next) &#123;    </span><br><span class="line">                <span class="keyword">if</span> (e.element==<span class="keyword">null</span>)    </span><br><span class="line">                    <span class="keyword">return</span> index;    </span><br><span class="line">                index++;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;    </span><br><span class="line">            <span class="keyword">for</span> (Entry e = header.next; e != header; e = e.next) &#123;    </span><br><span class="line">                <span class="keyword">if</span> (o.equals(e.element))    </span><br><span class="line">                    <span class="keyword">return</span> index;    </span><br><span class="line">                index++;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 从后向前查找，返回“值为对象(o)的节点对应的索引”    </span></span><br><span class="line">    <span class="comment">// 不存在就返回-1    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">int</span> index = size;    </span><br><span class="line">        <span class="keyword">if</span> (o==<span class="keyword">null</span>) &#123;    </span><br><span class="line">            <span class="keyword">for</span> (Entry e = header.previous; e != header; e = e.previous) &#123;    </span><br><span class="line">                index--;    </span><br><span class="line">                <span class="keyword">if</span> (e.element==<span class="keyword">null</span>)    </span><br><span class="line">                    <span class="keyword">return</span> index;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;    </span><br><span class="line">            <span class="keyword">for</span> (Entry e = header.previous; e != header; e = e.previous) &#123;    </span><br><span class="line">                index--;    </span><br><span class="line">                <span class="keyword">if</span> (o.equals(e.element))    </span><br><span class="line">                    <span class="keyword">return</span> index;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 返回第一个节点    </span></span><br><span class="line">    <span class="comment">// 若LinkedList的大小为0,则返回null    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">peek</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">if</span> (size==<span class="number">0</span>)    </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;    </span><br><span class="line">        <span class="keyword">return</span> getFirst();    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 返回第一个节点    </span></span><br><span class="line">    <span class="comment">// 若LinkedList的大小为0,则抛出异常    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">element</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> getFirst();    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 删除并返回第一个节点    </span></span><br><span class="line">    <span class="comment">// 若LinkedList的大小为0,则返回null    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">poll</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">if</span> (size==<span class="number">0</span>)    </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;    </span><br><span class="line">        <span class="keyword">return</span> removeFirst();    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 将e添加双向链表末尾    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> add(e);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 将e添加双向链表开头    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offerFirst</span><span class="params">(E e)</span> </span>&#123;    </span><br><span class="line">        addFirst(e);    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 将e添加双向链表末尾    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offerLast</span><span class="params">(E e)</span> </span>&#123;    </span><br><span class="line">        addLast(e);    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 返回第一个节点    </span></span><br><span class="line">    <span class="comment">// 若LinkedList的大小为0,则返回null    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">peekFirst</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">if</span> (size==<span class="number">0</span>)    </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;    </span><br><span class="line">        <span class="keyword">return</span> getFirst();    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 返回最后一个节点    </span></span><br><span class="line">    <span class="comment">// 若LinkedList的大小为0,则返回null    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">peekLast</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">if</span> (size==<span class="number">0</span>)    </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;    </span><br><span class="line">        <span class="keyword">return</span> getLast();    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 删除并返回第一个节点    </span></span><br><span class="line">    <span class="comment">// 若LinkedList的大小为0,则返回null    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">pollFirst</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">if</span> (size==<span class="number">0</span>)    </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;    </span><br><span class="line">        <span class="keyword">return</span> removeFirst();    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 删除并返回最后一个节点    </span></span><br><span class="line">    <span class="comment">// 若LinkedList的大小为0,则返回null    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">pollLast</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">if</span> (size==<span class="number">0</span>)    </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;    </span><br><span class="line">        <span class="keyword">return</span> removeLast();    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 将e插入到双向链表开头    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span> </span>&#123;    </span><br><span class="line">        addFirst(e);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 删除并返回第一个节点    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> removeFirst();    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 从LinkedList开始向后查找，删除第一个值为元素(o)的节点    </span></span><br><span class="line">    <span class="comment">// 从链表开始查找，如存在节点的值为元素(o)的节点，则删除该节点    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeFirstOccurrence</span><span class="params">(Object o)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> remove(o);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 从LinkedList末尾向前查找，删除第一个值为元素(o)的节点    </span></span><br><span class="line">    <span class="comment">// 从链表开始查找，如存在节点的值为元素(o)的节点，则删除该节点    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeLastOccurrence</span><span class="params">(Object o)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">if</span> (o==<span class="keyword">null</span>) &#123;    </span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;E&gt; e = header.previous; e != header; e = e.previous) &#123;    </span><br><span class="line">                <span class="keyword">if</span> (e.element==<span class="keyword">null</span>) &#123;    </span><br><span class="line">                    remove(e);    </span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;    </span><br><span class="line">                &#125;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;    </span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;E&gt; e = header.previous; e != header; e = e.previous) &#123;    </span><br><span class="line">                <span class="keyword">if</span> (o.equals(e.element)) &#123;    </span><br><span class="line">                    remove(e);    </span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;    </span><br><span class="line">                &#125;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 返回“index到末尾的全部节点”对应的ListIterator对象(List迭代器)    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListIterator&lt;E&gt; <span class="title">listIterator</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListItr(index);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// List迭代器    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ListItr</span> <span class="keyword">implements</span> <span class="title">ListIterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;    </span><br><span class="line">        <span class="comment">// 上一次返回的节点    </span></span><br><span class="line">        <span class="keyword">private</span> Entry&lt;E&gt; lastReturned = header;    </span><br><span class="line">        <span class="comment">// 下一个节点    </span></span><br><span class="line">        <span class="keyword">private</span> Entry&lt;E&gt; next;    </span><br><span class="line">        <span class="comment">// 下一个节点对应的索引值    </span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> nextIndex;    </span><br><span class="line">        <span class="comment">// 期望的改变计数。用来实现fail-fast机制。    </span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> expectedModCount = modCount;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 构造函数。    </span></span><br><span class="line">        <span class="comment">// 从index位置开始进行迭代    </span></span><br><span class="line">        ListItr(<span class="keyword">int</span> index) &#123;    </span><br><span class="line">            <span class="comment">// index的有效性处理    </span></span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt; size)    </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+index+ <span class="string">", Size: "</span>+size);    </span><br><span class="line">            <span class="comment">// 若 “index 小于 ‘双向链表长度的一半’”，则从第一个元素开始往后查找；    </span></span><br><span class="line">            <span class="comment">// 否则，从最后一个元素往前查找。    </span></span><br><span class="line">            <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;    </span><br><span class="line">                next = header.next;    </span><br><span class="line">                <span class="keyword">for</span> (nextIndex=<span class="number">0</span>; nextIndex&lt;index; nextIndex++)    </span><br><span class="line">                    next = next.next;    </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;    </span><br><span class="line">                next = header;    </span><br><span class="line">                <span class="keyword">for</span> (nextIndex=size; nextIndex&gt;index; nextIndex--)    </span><br><span class="line">                    next = next.previous;    </span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 是否存在下一个元素    </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="comment">// 通过元素索引是否等于“双向链表大小”来判断是否达到最后。    </span></span><br><span class="line">            <span class="keyword">return</span> nextIndex != size;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 获取下一个元素    </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            checkForComodification();    </span><br><span class="line">            <span class="keyword">if</span> (nextIndex == size)    </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();    </span><br><span class="line">   </span><br><span class="line">            lastReturned = next;    </span><br><span class="line">            <span class="comment">// next指向链表的下一个元素    </span></span><br><span class="line">            next = next.next;    </span><br><span class="line">            nextIndex++;    </span><br><span class="line">            <span class="keyword">return</span> lastReturned.element;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 是否存在上一个元素    </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="comment">// 通过元素索引是否等于0，来判断是否达到开头。    </span></span><br><span class="line">            <span class="keyword">return</span> nextIndex != <span class="number">0</span>;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 获取上一个元素    </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">previous</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">if</span> (nextIndex == <span class="number">0</span>)    </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();    </span><br><span class="line">   </span><br><span class="line">            <span class="comment">// next指向链表的上一个元素    </span></span><br><span class="line">            lastReturned = next = next.previous;    </span><br><span class="line">            nextIndex--;    </span><br><span class="line">            checkForComodification();    </span><br><span class="line">            <span class="keyword">return</span> lastReturned.element;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 获取下一个元素的索引    </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> nextIndex;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 获取上一个元素的索引    </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> nextIndex-<span class="number">1</span>;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 删除当前元素。    </span></span><br><span class="line">        <span class="comment">// 删除双向链表中的当前节点    </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            checkForComodification();    </span><br><span class="line">            Entry&lt;E&gt; lastNext = lastReturned.next;    </span><br><span class="line">            <span class="keyword">try</span> &#123;    </span><br><span class="line">                LinkedList.<span class="keyword">this</span>.remove(lastReturned);    </span><br><span class="line">            &#125; <span class="keyword">catch</span> (NoSuchElementException e) &#123;    </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();    </span><br><span class="line">            &#125;    </span><br><span class="line">            <span class="keyword">if</span> (next==lastReturned)    </span><br><span class="line">                next = lastNext;    </span><br><span class="line">            <span class="keyword">else</span>   </span><br><span class="line">                nextIndex--;    </span><br><span class="line">            lastReturned = header;    </span><br><span class="line">            expectedModCount++;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 设置当前节点为e    </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">if</span> (lastReturned == header)    </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();    </span><br><span class="line">            checkForComodification();    </span><br><span class="line">            lastReturned.element = e;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 将e添加到当前节点的前面    </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;    </span><br><span class="line">            checkForComodification();    </span><br><span class="line">            lastReturned = header;    </span><br><span class="line">            addBefore(e, next);    </span><br><span class="line">            nextIndex++;    </span><br><span class="line">            expectedModCount++;    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 判断 “modCount和expectedModCount是否相等”，依次来实现fail-fast机制。    </span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">checkForComodification</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">if</span> (modCount != expectedModCount)    </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 双向链表的节点所对应的数据结构。    </span></span><br><span class="line">    <span class="comment">// 包含3部分：上一节点，下一节点，当前节点值。    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">E</span>&gt; </span>&#123;    </span><br><span class="line">        <span class="comment">// 当前节点所包含的值    </span></span><br><span class="line">        E element;    </span><br><span class="line">        <span class="comment">// 下一个节点    </span></span><br><span class="line">        Entry&lt;E&gt; next;    </span><br><span class="line">        <span class="comment">// 上一个节点    </span></span><br><span class="line">        Entry&lt;E&gt; previous;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">/**   </span></span><br><span class="line"><span class="comment">         * 链表节点的构造函数。   </span></span><br><span class="line"><span class="comment">         * 参数说明：   </span></span><br><span class="line"><span class="comment">         *   element  —— 节点所包含的数据   </span></span><br><span class="line"><span class="comment">         *   next      —— 下一个节点   </span></span><br><span class="line"><span class="comment">         *   previous —— 上一个节点   </span></span><br><span class="line"><span class="comment">         */</span>   </span><br><span class="line">        Entry(E element, Entry&lt;E&gt; next, Entry&lt;E&gt; previous) &#123;    </span><br><span class="line">            <span class="keyword">this</span>.element = element;    </span><br><span class="line">            <span class="keyword">this</span>.next = next;    </span><br><span class="line">            <span class="keyword">this</span>.previous = previous;    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 将节点(节点数据是e)添加到entry节点之前。    </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Entry&lt;E&gt; <span class="title">addBefore</span><span class="params">(E e, Entry&lt;E&gt; entry)</span> </span>&#123;    </span><br><span class="line">        <span class="comment">// 新建节点newEntry，将newEntry插入到节点e之前；并且设置newEntry的数据是e    </span></span><br><span class="line">        Entry&lt;E&gt; newEntry = <span class="keyword">new</span> Entry&lt;E&gt;(e, entry, entry.previous);    </span><br><span class="line">        newEntry.previous.next = newEntry;    </span><br><span class="line">        newEntry.next.previous = newEntry;    </span><br><span class="line">        <span class="comment">// 修改LinkedList大小    </span></span><br><span class="line">        size++;    </span><br><span class="line">        <span class="comment">// 修改LinkedList的修改统计数：用来实现fail-fast机制。    </span></span><br><span class="line">        modCount++;    </span><br><span class="line">        <span class="keyword">return</span> newEntry;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 将节点从链表中删除    </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> E <span class="title">remove</span><span class="params">(Entry&lt;E&gt; e)</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">if</span> (e == header)    </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();    </span><br><span class="line">   </span><br><span class="line">        E result = e.element;    </span><br><span class="line">        e.previous.next = e.next;    </span><br><span class="line">        e.next.previous = e.previous;    </span><br><span class="line">        e.next = e.previous = <span class="keyword">null</span>;    </span><br><span class="line">        e.element = <span class="keyword">null</span>;    </span><br><span class="line">        size--;    </span><br><span class="line">        modCount++;    </span><br><span class="line">        <span class="keyword">return</span> result;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 反向迭代器    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">descendingIterator</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DescendingIterator();    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 反向迭代器实现类。    </span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DescendingIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;    </span><br><span class="line">        <span class="keyword">final</span> ListItr itr = <span class="keyword">new</span> ListItr(size());    </span><br><span class="line">        <span class="comment">// 反向迭代器是否下一个元素。    </span></span><br><span class="line">        <span class="comment">// 实际上是判断双向链表的当前节点是否达到开头    </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> itr.hasPrevious();    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="comment">// 反向迭代器获取下一个元素。    </span></span><br><span class="line">        <span class="comment">// 实际上是获取双向链表的前一个节点    </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            <span class="keyword">return</span> itr.previous();    </span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="comment">// 删除当前节点    </span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">            itr.remove();    </span><br><span class="line">        &#125;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 返回LinkedList的Object[]数组    </span></span><br><span class="line">    <span class="keyword">public</span> Object[] toArray() &#123;    </span><br><span class="line">    <span class="comment">// 新建Object[]数组    </span></span><br><span class="line">    Object[] result = <span class="keyword">new</span> Object[size];    </span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;    </span><br><span class="line">        <span class="comment">// 将链表中所有节点的数据都添加到Object[]数组中    </span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;E&gt; e = header.next; e != header; e = e.next)    </span><br><span class="line">            result[i++] = e.element;    </span><br><span class="line">    <span class="keyword">return</span> result;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 返回LinkedList的模板数组。所谓模板数组，即可以将T设为任意的数据类型    </span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T[] toArray(T[] a) &#123;    </span><br><span class="line">        <span class="comment">// 若数组a的大小 &lt; LinkedList的元素个数(意味着数组a不能容纳LinkedList中全部元素)    </span></span><br><span class="line">        <span class="comment">// 则新建一个T[]数组，T[]的大小为LinkedList大小，并将该T[]赋值给a。    </span></span><br><span class="line">        <span class="keyword">if</span> (a.length &lt; size)    </span><br><span class="line">            a = (T[])java.lang.reflect.Array.newInstance(    </span><br><span class="line">                                a.getClass().getComponentType(), size);    </span><br><span class="line">        <span class="comment">// 将链表中所有节点的数据都添加到数组a中    </span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;    </span><br><span class="line">        Object[] result = a;    </span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;E&gt; e = header.next; e != header; e = e.next)    </span><br><span class="line">            result[i++] = e.element;    </span><br><span class="line">   </span><br><span class="line">        <span class="keyword">if</span> (a.length &gt; size)    </span><br><span class="line">            a[size] = <span class="keyword">null</span>;    </span><br><span class="line">   </span><br><span class="line">        <span class="keyword">return</span> a;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 克隆函数。返回LinkedList的克隆对象。    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">        LinkedList&lt;E&gt; clone = <span class="keyword">null</span>;    </span><br><span class="line">        <span class="comment">// 克隆一个LinkedList克隆对象    </span></span><br><span class="line">        <span class="keyword">try</span> &#123;    </span><br><span class="line">            clone = (LinkedList&lt;E&gt;) <span class="keyword">super</span>.clone();    </span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;    </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InternalError();    </span><br><span class="line">        &#125;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 新建LinkedList表头节点    </span></span><br><span class="line">        clone.header = <span class="keyword">new</span> Entry&lt;E&gt;(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);    </span><br><span class="line">        clone.header.next = clone.header.previous = clone.header;    </span><br><span class="line">        clone.size = <span class="number">0</span>;    </span><br><span class="line">        clone.modCount = <span class="number">0</span>;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 将链表中所有节点的数据都添加到克隆对象中    </span></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;E&gt; e = header.next; e != header; e = e.next)    </span><br><span class="line">            clone.add(e.element);    </span><br><span class="line">   </span><br><span class="line">        <span class="keyword">return</span> clone;    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// java.io.Serializable的写入函数    </span></span><br><span class="line">    <span class="comment">// 将LinkedList的“容量，所有的元素值”都写入到输出流中    </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span>    </span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException </span>&#123;    </span><br><span class="line">        <span class="comment">// Write out any hidden serialization magic    </span></span><br><span class="line">        s.defaultWriteObject();    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 写入“容量”    </span></span><br><span class="line">        s.writeInt(size);    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 将链表中所有节点的数据都写入到输出流中    </span></span><br><span class="line">        <span class="keyword">for</span> (Entry e = header.next; e != header; e = e.next)    </span><br><span class="line">            s.writeObject(e.element);    </span><br><span class="line">    &#125;    </span><br><span class="line">   </span><br><span class="line">    <span class="comment">// java.io.Serializable的读取函数：根据写入方式反向读出    </span></span><br><span class="line">    <span class="comment">// 先将LinkedList的“容量”读出，然后将“所有的元素值”读出    </span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span>    </span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;    </span><br><span class="line">        <span class="comment">// Read in any hidden serialization magic    </span></span><br><span class="line">        s.defaultReadObject();    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 从输入流中读取“容量”    </span></span><br><span class="line">        <span class="keyword">int</span> size = s.readInt();    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 新建链表表头节点    </span></span><br><span class="line">        header = <span class="keyword">new</span> Entry&lt;E&gt;(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);    </span><br><span class="line">        header.next = header.previous = header;    </span><br><span class="line">   </span><br><span class="line">        <span class="comment">// 从输入流中将“所有的元素值”并逐个添加到链表中    </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++)    </span><br><span class="line">            addBefore((E)s.readObject(), header);    </span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ZDM–ArrayList、HashMap、Collection、LinkedList、Redis 底层实现及源码&lt;/p&gt;
    
    </summary>
    
      <category term="数据结构" scheme="http://zhoudamin.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="Java" scheme="http://zhoudamin.github.io/tags/Java/"/>
    
      <category term="数据结构" scheme="http://zhoudamin.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="源码" scheme="http://zhoudamin.github.io/tags/%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
</feed>
