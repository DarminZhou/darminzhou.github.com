<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Damin&#39;s Notes</title>
  
  <subtitle>Learn ,Practice ,Summary !</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhoudamin.github.io/"/>
  <updated>2019-05-14T14:22:13.266Z</updated>
  <id>http://zhoudamin.github.io/</id>
  
  <author>
    <name>Damin ZHOU</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>My菊厂生涯</title>
    <link href="http://zhoudamin.github.io/2019/05/14/My%E8%8F%8A%E5%8E%82%E7%94%9F%E6%B6%AF/"/>
    <id>http://zhoudamin.github.io/2019/05/14/My菊厂生涯/</id>
    <published>2019-05-14T14:18:17.000Z</published>
    <updated>2019-05-14T14:22:13.266Z</updated>
    
    <content type="html"><![CDATA[<p>菊厂工作感悟<br><a id="more"></a></p><ul><li>自己范围内的工作，一定要门清</li><li>一定要提高自己的技术工作</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;菊厂工作感悟&lt;br&gt;
    
    </summary>
    
      <category term="观点与感想" scheme="http://zhoudamin.github.io/categories/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/"/>
    
    
      <category term="工作" scheme="http://zhoudamin.github.io/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>第一次NZJ</title>
    <link href="http://zhoudamin.github.io/2019/05/13/%E7%AC%AC%E4%B8%80%E6%AC%A1NZJ/"/>
    <id>http://zhoudamin.github.io/2019/05/13/第一次NZJ/</id>
    <published>2019-05-13T15:45:04.000Z</published>
    <updated>2019-07-28T02:20:42.833Z</updated>
    
    <content type="html"><![CDATA[<p>入我厂第一次沟，以后还需更加努力。<br><a id="more"></a><br>.23333</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;入我厂第一次沟，以后还需更加努力。&lt;br&gt;
    
    </summary>
    
      <category term="观点与感想" scheme="http://zhoudamin.github.io/categories/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/"/>
    
    
      <category term="工作" scheme="http://zhoudamin.github.io/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>4月的持续改进</title>
    <link href="http://zhoudamin.github.io/2019/04/17/4%E6%9C%88%E7%9A%84%E6%8C%81%E7%BB%AD%E6%94%B9%E8%BF%9B/"/>
    <id>http://zhoudamin.github.io/2019/04/17/4月的持续改进/</id>
    <published>2019-04-17T14:05:01.000Z</published>
    <updated>2019-04-17T14:23:51.142Z</updated>
    
    <content type="html"><![CDATA[<p>4月的持续改进<br><img src="/2019/04/17/4月的持续改进/20190417220604.png" title="4月体重明显下降"><br><a id="more"></a></p><h2 id="体重"><a href="#体重" class="headerlink" title="体重"></a>体重</h2><p>自从决定健身以来，每周平均都会去三次健身室，跑步，拉伸，从目前来看，效果还是不错的，体重在以可见的速度下降，目标：60KG。</p><h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>从上次老大沟通ORK提议让我做做设计后，回来和南总商量了一下，然后接了一个需求设计，做了一次军总说的Word程序员。为了不在串讲的时候被堵住，反复拉了南总和各核心成员评审，总算是完美交付了一个需求设计。<br>体验是：作为一名SE，基本是在心中已经写好了代码，然后将自己心中的代码讲给别人听。</p><h2 id="补丁"><a href="#补丁" class="headerlink" title="补丁"></a>补丁</h2><p>和泽林一起做成了一个成型的补丁框架，经过几天的优化和测试，体验实在是不错，当然，还有改进的空间，我认为开发好这个工具，基本我的shell功夫已经出师了。<br>另外，马上要启动补丁集成了，工作量很大，风险很高，但是，做成了也是一件非常有意义的事情。</p><h2 id="成就感"><a href="#成就感" class="headerlink" title="成就感"></a>成就感</h2><p>今天晚上又将白天同事遇到的环境问题给处理了，这些事确实没人愿意干，但是，总需要一个人来花额外的时间给处理了，并且为大家服务一下，也蛮有成就感的，明天再继续花点时间将250的31943的那个啥文件给申请一下，不然不能访问，let’s do it !</p><h2 id="睡眠"><a href="#睡眠" class="headerlink" title="睡眠"></a>睡眠</h2><p>最近2天的睡眠不是很好，之前是一直很晚睡，但是最近想早点休息，结果翻来覆去有点睡不着，不过也许是最近运动比较多的原因，精力很充沛！还是要早点休息，注意身体，打持久战。</p><p>工作需要更加努力，打出成吨的输出哈！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;4月的持续改进&lt;br&gt;&lt;img src=&quot;/2019/04/17/4月的持续改进/20190417220604.png&quot; title=&quot;4月体重明显下降&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="观点与感想" scheme="http://zhoudamin.github.io/categories/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/"/>
    
    
      <category term="生活" scheme="http://zhoudamin.github.io/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Java知识点锦集</title>
    <link href="http://zhoudamin.github.io/2019/04/13/Java%E7%9F%A5%E8%AF%86%E7%82%B9%E9%94%A6%E9%9B%86/"/>
    <id>http://zhoudamin.github.io/2019/04/13/Java知识点锦集/</id>
    <published>2019-04-13T09:33:55.000Z</published>
    <updated>2019-04-13T10:21:42.906Z</updated>
    
    <content type="html"><![CDATA[<p>知识锦集<br><a id="more"></a></p><h2 id="hashMap原理，java8做的改变"><a href="#hashMap原理，java8做的改变" class="headerlink" title="hashMap原理，java8做的改变"></a>hashMap原理，java8做的改变</h2><p>从结构实现来讲，HashMap是数组+链表+红黑树（JDK1.8增加了红黑树部分）实现的。HashMap最多只允许一条记录的键为null，允许多条记录的值为null。HashMap非线程安全。ConcurrentHashMap线程安全。解决碰撞：当出现冲突时，运用拉链法，将关键词为同义词的结点链接在一个单链表中，散列表长m，则定义一个由m个头指针组成的指针数组T，地址为i的结点插入以T(i)为头指针的单链表中。Java8中，冲突的元素超过限制（8），用红黑树替换链表。</p><h2 id="String-和-StringBuilder-的区别"><a href="#String-和-StringBuilder-的区别" class="headerlink" title="String 和 StringBuilder 的区别"></a>String 和 StringBuilder 的区别</h2><p>1）可变与不可变：String不可变，每一次执行“+”都会新生成一个新对象，所以频繁改变字符串的情况中不用String，以节省内存。<br>2）是否多线程安全：StringBuilder并没有对方法进行加同步锁，所以是非线程安全的。StringBuffer和String均线程安全。</p><img src="/2019/04/13/Java知识点锦集/111.jpg" title="Vha">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;知识锦集&lt;br&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://zhoudamin.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="http://zhoudamin.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>随想</title>
    <link href="http://zhoudamin.github.io/2019/04/10/%E9%9A%8F%E6%83%B3/"/>
    <id>http://zhoudamin.github.io/2019/04/10/随想/</id>
    <published>2019-04-10T14:21:54.000Z</published>
    <updated>2019-04-10T15:06:22.105Z</updated>
    
    <content type="html"><![CDATA[<p>又到了一年一度域名续费的日子了<br><a id="more"></a><br>加入我厂也有大半年了，从一开始忙到飞起，体验做不完的活，每次想起这个就想到陈老师给形容的：工作就像打仗一样。<br>入我厂从一名Test做起，慢慢才开始做起开发，最近还搞起了设计，学到了Linux，sh，sql，angular，这些之前都很少接触，入我司半年，也算是小有所得。<br>记得刚来的时候，住的特别挫，居然租了一个10楼无电梯的小房子，OMG，想起去年脚扭伤了，泽林和华哥送我上楼，然后好几天都没下来过，不是不想下来看医生，是根本下不来…2333，确实没必要租这么挫的房子，后面在要排到百草园的前夕，实在是受不了，拔草了后面一栋的三楼一个房子，光线不错，不过下水系统设计的很随意，又排起了百草园的队。。。2333都是泪。<br>从去年年底开始看房子，到现在还没定好房子，发现钱在这个大件面前，真的好不值钱，想买的买不起，买的起的太郊区了，浪费钱。</p><p>博客好久没写了，还是好好学习吧，域名就不续了，除了自己访问一下，貌似也没啥用！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又到了一年一度域名续费的日子了&lt;br&gt;
    
    </summary>
    
      <category term="观点与感想" scheme="http://zhoudamin.github.io/categories/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/"/>
    
    
      <category term="随想" scheme="http://zhoudamin.github.io/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>人人懂AI</title>
    <link href="http://zhoudamin.github.io/2019/03/03/%E4%BA%BA%E4%BA%BA%E6%87%82AI/"/>
    <id>http://zhoudamin.github.io/2019/03/03/人人懂AI/</id>
    <published>2019-03-03T12:57:38.000Z</published>
    <updated>2019-03-03T14:10:43.795Z</updated>
    
    <content type="html"><![CDATA[<p>人人懂AI入门学习！<br><a id="more"></a></p><h2 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h2><h3 id="M-P-Model"><a href="#M-P-Model" class="headerlink" title="M-P Model"></a>M-P Model</h3><p>多参数，多权重学习模型</p><p>单层感知器：输入就输出的</p><h3 id="多层感知器"><a href="#多层感知器" class="headerlink" title="多层感知器"></a>多层感知器</h3><p>深度网络的前身。<br>输入层–隐含层–输出层</p><h3 id="Back-Propagetion-Algorithm"><a href="#Back-Propagetion-Algorithm" class="headerlink" title="Back Propagetion Algorithm"></a>Back Propagetion Algorithm</h3><p>前向计算输出，比较期望输出，得到误差，然后反向调整权项值，逼近阈值。</p><p>可以做车牌识别，</p><p>局限性：训练过程，局部最小，不是全局最小，收敛不了。和初始点选择有关，和全局下降速率有关。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人人懂AI入门学习！&lt;br&gt;
    
    </summary>
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="AI" scheme="http://zhoudamin.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>shell脚本学习与演练</title>
    <link href="http://zhoudamin.github.io/2018/10/14/shell%E8%84%9A%E6%9C%AC%E5%AD%A6%E4%B9%A0%E4%B8%8E%E6%BC%94%E7%BB%83/"/>
    <id>http://zhoudamin.github.io/2018/10/14/shell脚本学习与演练/</id>
    <published>2018-10-14T08:30:10.000Z</published>
    <updated>2019-01-12T14:53:58.080Z</updated>
    
    <content type="html"><![CDATA[<p>平时经常接触Linux的操作指导，是不是可以写个脚本一键式解决这些繁琐的操作呢？ok</p><a id="more"></a><h2 id="写一个简单脚本"><a href="#写一个简单脚本" class="headerlink" title="写一个简单脚本"></a>写一个简单脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vi test1.sh</span><br><span class="line"></span><br><span class="line">······························test1.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">! /bin/bash</span></span><br><span class="line">echo "Hello !"</span><br><span class="line">······························</span><br><span class="line"></span><br><span class="line">chmod +x ./test1.sh</span><br><span class="line">./test1.sh</span><br></pre></td></tr></table></figure><h2 id="shell-变量"><a href="#shell-变量" class="headerlink" title="shell 变量"></a>shell 变量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">your_name="zzz"</span><br><span class="line">echo $your_name</span><br><span class="line">your_name="cccc"</span><br><span class="line">echo $your_name</span><br></pre></td></tr></table></figure><h2 id="字符串里写变量"><a href="#字符串里写变量" class="headerlink" title="字符串里写变量"></a>字符串里写变量</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">your_name='aaa'</span><br><span class="line">str="Hello, you are \"$your_name\"!"</span><br><span class="line">echo $str</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">array_name=(value0 value1 value2 value3)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> or</span></span><br><span class="line">array_name=(</span><br><span class="line">value0</span><br><span class="line">value1</span><br><span class="line">value2</span><br><span class="line">value3</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 单个</span></span><br><span class="line">valuen=$&#123;array_name[n]&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 所有元素</span></span><br><span class="line">echo $&#123;array_name[@]&#125;</span><br></pre></td></tr></table></figure><h2 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 不是单引号  是斜引号</span></span><br><span class="line"></span><br><span class="line">val=`expr 4 + 2`</span><br><span class="line">echo "and : $val"</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;平时经常接触Linux的操作指导，是不是可以写个脚本一键式解决这些繁琐的操作呢？ok&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://zhoudamin.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://zhoudamin.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Java之广度优先搜索算法</title>
    <link href="http://zhoudamin.github.io/2018/08/12/Java%E4%B9%8B%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95/"/>
    <id>http://zhoudamin.github.io/2018/08/12/Java之广度优先搜索算法/</id>
    <published>2018-08-12T14:35:39.000Z</published>
    <updated>2018-08-12T15:01:33.696Z</updated>
    
    <content type="html"><![CDATA[<p>BFS，全称是Breadth First Search。 简单说就是图搜索算法。<br><a id="more"></a></p><h1 id="Word-Ladder"><a href="#Word-Ladder" class="headerlink" title="Word Ladder"></a>Word Ladder</h1><p>Given two words (beginWord and endWord), and a dictionary’s word list, find the length of shortest transformation sequence frombeginWord to endWord, such that:</p><p>Only one letter can be changed at a time<br>Each intermediate word must exist in the word list<br>For example,</p><p>Given:<br>beginWord = “hit”<br>endWord = “cog”<br>wordList = [“hot”,”dot”,”dog”,”lot”,”log”]</p><p>As one shortest transformation is “hit” -&gt; “hot” -&gt; “dot” -&gt; “dog” -&gt; “cog”,<br>return its length 5.</p><p>Note:</p><p>Return 0 if there is no such transformation sequence.<br>All words have the same length.<br>All words contain only lowercase alphabetic characters. </p><p>简单来说就是从一个单词出发，每次只改变一个字母，直到变到最后一个单词，求最短路径。</p><p>再简单点思考就是 hit—&gt;hot—&gt;lot/dot—&gt;log/dog—&gt;cog</p><p>思路就是用两个set,一个存老的单词，如果添加进路径，就删除；一个存路径。</p><p>循环终止条件是路径匹配到尾巴的目标单词；</p><p>关键代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">ladderLen</span><span class="params">(String beginWord ,String endWord ,List&lt;String&gt; wordList)</span></span>&#123;</span><br><span class="line">    Set&lt;String&gt; wordSet = <span class="keyword">new</span> HashSet&lt;&gt;(wordList);</span><br><span class="line">    Set&lt;String&gt; visited = <span class="keyword">new</span> HashSet&lt;&gt;;</span><br><span class="line">    visited.add(beginWord);</span><br><span class="line">    <span class="keyword">int</span> len=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始计算路径与清楚单词集合里的单词</span></span><br><span class="line">    <span class="comment">//算法终止条件</span></span><br><span class="line">    <span class="keyword">while</span>(!visited.contains(endWord))&#123;</span><br><span class="line">        Set&lt;String&gt; temp = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(String word:visited)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;word.length;i++)&#123;</span><br><span class="line">                <span class="keyword">char</span>[] chars=word.toCharArray();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=(<span class="keyword">int</span>)<span class="string">'a'</span>;j&lt;(<span class="keyword">int</span>)<span class="string">'z'</span>+<span class="number">1</span>;j++)&#123;</span><br><span class="line">                    chars[i]=(<span class="keyword">char</span>)j;</span><br><span class="line">                    String newWord=<span class="keyword">new</span> String(chars);</span><br><span class="line">                    <span class="keyword">if</span>(wordSet.contains(newWord))&#123;</span><br><span class="line">                        temp.add(newWord);</span><br><span class="line">                        wordSet.remove(newWord);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        len += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(temp.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        vistied=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;BFS，全称是Breadth First Search。 简单说就是图搜索算法。&lt;br&gt;
    
    </summary>
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Java之排序算法</title>
    <link href="http://zhoudamin.github.io/2018/08/06/Java%E4%B9%8B%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>http://zhoudamin.github.io/2018/08/06/Java之排序算法/</id>
    <published>2018-08-06T15:52:53.000Z</published>
    <updated>2018-08-06T16:24:12.834Z</updated>
    
    <content type="html"><![CDATA[<p>排序，各种排序~<br><a id="more"></a></p><h1 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h1><h2 id="First-Missing-Positive"><a href="#First-Missing-Positive" class="headerlink" title="First Missing Positive"></a>First Missing Positive</h2><p>Given an unsorted integer array, find the first missing positive integer.</p><p>For example, given [1,2,0] return 3 and [3,4,-1,1] return 2.</p><p>Your algorithm should run in O(n) time and uses constant space.</p><p>分析：<br>本质上是桶排序，每当A[i]!=i+1时，A[i]与A[A[i]-1]交换，终止条件是A[i]==A[A[i]-1].</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstMissingPositive</span><span class="params">(<span class="keyword">int</span> [] nums)</span></span>&#123;</span><br><span class="line">    bucket_sort(nums);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]!=(i+<span class="number">1</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.length+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bucket_sort</span><span class="params">(<span class="keyword">int</span> [] A)</span></span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> n=A.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n :i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(A[i]!=i+<span class="number">1</span>)&#123;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(A[i]&lt;<span class="number">1</span> || A[i]&gt;n || A[i]==A[A[i]-<span class="number">1</span>])</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">int</span> temp = A[i];</span><br><span class="line">                A[i]=A[temp-<span class="number">1</span>];</span><br><span class="line">                A[temp-<span class="number">1</span>]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;排序，各种排序~&lt;br&gt;
    
    </summary>
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Java之二叉树算法</title>
    <link href="http://zhoudamin.github.io/2018/08/05/Java%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91%E7%AE%97%E6%B3%95/"/>
    <id>http://zhoudamin.github.io/2018/08/05/Java之二叉树算法/</id>
    <published>2018-08-05T15:04:25.000Z</published>
    <updated>2018-08-05T15:14:02.125Z</updated>
    
    <content type="html"><![CDATA[<p>二叉树算法<br><a id="more"></a></p><h1 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h1><h2 id="Validate-Binary-Search-Tree-验证二叉搜索树"><a href="#Validate-Binary-Search-Tree-验证二叉搜索树" class="headerlink" title="Validate Binary Search Tree 验证二叉搜索树"></a>Validate Binary Search Tree 验证二叉搜索树</h2><p>Given a binary tree, determine if it is a valid binary search tree (BST).</p><p>Assume a BST is defined as follows:</p><p>The left subtree of a node contains only nodes with keys less than the node’s key.<br>The right subtree of a node contains only nodes with keys greater than the node’s key.<br>Both the left and right subtrees must also be binary search trees.</p><p>思路，用递归，左&lt;根&lt;右 &amp;&amp; 左根递归 &amp;&amp; 右根递归<br>关键代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> isValidBST(root,INT_MIN,INT_MAX);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">bool <span class="title">isValidBST</span> <span class="params">(TreeNode* root,<span class="keyword">int</span> lower ,<span class="keyword">int</span> upper )</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(root == nullptr) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> root.val&gt;lower &amp;&amp; root.val&lt;upper </span><br><span class="line">           &amp;&amp; isValidBST(root.left,lower,root.val)</span><br><span class="line">           &amp;&amp; isValidBST(root.right,root.val,upper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二叉树算法&lt;br&gt;
    
    </summary>
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Java之数组算法</title>
    <link href="http://zhoudamin.github.io/2018/07/26/Java%E4%B9%8B%E6%95%B0%E7%BB%84%E7%AE%97%E6%B3%95/"/>
    <id>http://zhoudamin.github.io/2018/07/26/Java之数组算法/</id>
    <published>2018-07-26T15:28:19.000Z</published>
    <updated>2018-07-29T03:14:09.336Z</updated>
    
    <content type="html"><![CDATA[<p>数组是常见的算法题，所以多做题，多总结，总是能找到idea的。<br><a id="more"></a></p><h2 id="Product-of-Array-Except-Self"><a href="#Product-of-Array-Except-Self" class="headerlink" title="Product of Array Except Self"></a>Product of Array Except Self</h2><p>Given an array of n integers where n &gt; 1, nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].</p><p>Solve it without division and in O(n).</p><p>For example, given [1,2,3,4], return [24,12,8,6].</p><p>Follow up:<br>Could you solve it with constant space complexity? (Note: The output array does not count as extra space for the purpose of space complexity analysis.)</p><p>思路：<br>首先，介绍方法： [1,a1,a12,a123].*[a234,a34,a4,1]=[a234,a134,a124,a123]<br>这个算法有个O(1)的思路:就是用常数的方法，从左边乘到右边，再取一个常数，从右边乘到左边</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关键算法段</span></span><br><span class="line"></span><br><span class="line">left[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;num.length;++i)&#123;</span><br><span class="line">    left[i]=left[i-<span class="number">1</span>]*num[i-<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> right=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=num.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">    left[i]*=right;   <span class="comment">//right 初始为1，每次乘完再迭代</span></span><br><span class="line">    right*=num[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> left;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数组是常见的算法题，所以多做题，多总结，总是能找到idea的。&lt;br&gt;
    
    </summary>
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="算法与数学" scheme="http://zhoudamin.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Essence</title>
    <link href="http://zhoudamin.github.io/2018/07/24/Essence/"/>
    <id>http://zhoudamin.github.io/2018/07/24/Essence/</id>
    <published>2018-07-24T14:54:44.000Z</published>
    <updated>2018-08-15T15:06:33.913Z</updated>
    
    <content type="html"><![CDATA[<p>生活珠玑~</p><a id="more"></a><ol><li>尽量结合兴趣，选准方向，不要动摇，深入研究。</li><li>和牛人共事，和善良的人交友。</li><li>从此刻起，加上思考，梳理手头的todolist，把最重要的工作找出来，全身心突出亮点。</li><li>不问别人为什么，多问自己凭什么！      —by 2018/8/9</li></ol><h3 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h3><ol><li>不要熬夜，尽量少熬夜</li><li>锻炼身体</li><li>不抽烟，少饮酒</li><li>注意日常行为姿势</li><li>多吃健康食品，少吃外卖</li><li>不要用眼过度，注意眼睛的休息</li><li>注重心理健康</li><li>定期体检</li></ol><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><ol><li>建造强大的内心</li><li>尽早有理财念头</li><li>多出去走走</li><li>平和的心态面对一切</li><li>喜欢的东西要攒钱买下来</li><li>不要以为自己吃不胖</li><li>心本善，但是要有提防人的心</li></ol><h3 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h3><ol><li>增加自身的价值(有效社交)</li><li>不要盲目社交</li><li>注重对方的需求，不要一味索取</li><li>要多和人进行高质量的交流</li><li>不要勉强自己合群</li><li>分清自己的社交关系深浅</li><li>去掉一切不必要的应酬和饭局</li><li>不要急切的表达自己的观点，多听少说</li></ol><h3 id="人生"><a href="#人生" class="headerlink" title="人生"></a>人生</h3><ol><li>尽早做好人生规划(短期、长期)</li><li>建立正确的三观(学习、思考、实践)</li><li>趁年轻抓紧努力</li><li>要有自己的核心竞争力</li><li>别因为懒惰放弃能抓住的机会和挑战</li><li>要真正了解自己</li><li>别怕犯错和失败</li><li>不要自作聪明，恃才傲物</li><li>承担责任(社会、工作、家庭、自己的选择)</li><li>不要怕事，但别主动惹事</li><li>尽早进入社会历练</li><li>找到正确的平台比能力更重要</li><li>学会拒绝</li><li>不要轻易跳槽，但每次都要更上一个台阶</li><li>工作尽可能积累资源</li><li>要忠于自己，再忠于工作和公司</li><li>适当的妥协不丢人</li><li>要有长远的眼光，不要总是盯着眼前的利益</li></ol><h3 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h3><ol><li>勤学勤思考</li><li>多读书，广读书，读好书</li><li>迷茫的时候就学习</li><li>要有自己的专精</li><li>少刷手机</li><li>操作系统、网络、算法数据结构、离散数学、数据库原理与实践，这些看起来枯燥而无味的基础科学，要了解它们是必须付出非常多的时间才有可能理解通透些。而这些基础的扎实程度，就直接决定了你的高度。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;生活珠玑~&lt;/p&gt;
    
    </summary>
    
      <category term="观点与感想" scheme="http://zhoudamin.github.io/categories/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/"/>
    
    
      <category term="观点与感想" scheme="http://zhoudamin.github.io/tags/%E8%A7%82%E7%82%B9%E4%B8%8E%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>《Hadoop权威指南》 Notes</title>
    <link href="http://zhoudamin.github.io/2018/07/08/%E3%80%8AHadoop%E6%9D%83%E5%A8%81%E6%8C%87%E5%8D%97%E3%80%8B-Notes/"/>
    <id>http://zhoudamin.github.io/2018/07/08/《Hadoop权威指南》-Notes/</id>
    <published>2018-07-08T04:55:24.000Z</published>
    <updated>2019-05-12T15:21:17.488Z</updated>
    
    <content type="html"><![CDATA[<p>业余读书笔记1<br><a id="more"></a></p><h1 id="初识Hadoop"><a href="#初识Hadoop" class="headerlink" title="初识Hadoop"></a>初识Hadoop</h1><p>Hadoop项目简述</p><ol><li>Common<ul><li>一组分布式文件系统和通用I/O的组件与接口(序列化、Java RPC 和持久化数据结构)。</li></ul></li><li>Avro<ul><li>一种支持高效、跨语言的RPC以及永久存储数据的序列化系统。</li></ul></li><li>MapReduce<ul><li>分布式数据处理模型和执行环境，运行于大型商用机集群。</li></ul></li><li>HDFS<ul><li>分布式文件系统，运行于大型商用机集群。</li></ul></li><li>Pig<ul><li>一种数据流语言和运行环境，用以检索非常大的数据集。Pig运行在MapReduce和HDFS的集群上。</li></ul></li><li>Hive<ul><li>一个分布式、按列存储的数据仓库。Hive管理HDFS中存储的数据，并提供基于SQL的查询语言以查询数据。</li></ul></li><li>HBase<ul><li>一个分布式、按列存储数据库。</li></ul></li><li>ZooKeeper<ul><li>一个分布式、可用性高的协调服务。</li></ul></li><li>Sqoop<ul><li>在数据库和HDFS之间高效传输数据的工具。</li></ul></li></ol><h1 id="关于MapReduce"><a href="#关于MapReduce" class="headerlink" title="关于MapReduce"></a>关于MapReduce</h1><h2 id="数据处理方法"><a href="#数据处理方法" class="headerlink" title="数据处理方法"></a>数据处理方法</h2><ul><li>将输入数据分成固定大小的块，然后把每块分配到各个进程，这样一来，即使有些进程能处理更多数据，我们也可以为他们分配更多的数据。</li><li>对每块数据进行处理，取每块中的最大值，作为每块的最高标准。</li><li>多台机器如何处理协调性和可靠性的问题。</li></ul><h2 id="查找最高气温的方法论"><a href="#查找最高气温的方法论" class="headerlink" title="查找最高气温的方法论"></a>查找最高气温的方法论</h2><ul><li>Hadoop自身提供一套可优化网络序列化传输的基本类型，在org.apache.hadoop.io包中。</li><li>map()方法的输入时一个键和一个值，首先将包含有一行输入的text值转换成java的String类型，之后使用subString()方法提取感兴趣的列。</li><li>map()方法还提供了OutputCollector实例用于输出内容的写入，在这种情况下，将年份按照Text对象进行读写，将气温值封装在IntWritable类型中。</li><li>测试气温数据是否缺失or显示为正确的气温读数。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;业余读书笔记1&lt;br&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://zhoudamin.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Notes" scheme="http://zhoudamin.github.io/tags/Notes/"/>
    
  </entry>
  
  <entry>
    <title>Java并发编程实战</title>
    <link href="http://zhoudamin.github.io/2018/06/16/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
    <id>http://zhoudamin.github.io/2018/06/16/Java并发编程实战/</id>
    <published>2018-06-16T02:54:24.000Z</published>
    <updated>2018-06-16T03:17:54.472Z</updated>
    
    <content type="html"><![CDATA[<p>基于《Java并发编程实战》，作者Brain等。</p><a id="more"></a><h1 id="任务执行"><a href="#任务执行" class="headerlink" title="任务执行"></a>任务执行</h1><h2 id="顺序执行"><a href="#顺序执行" class="headerlink" title="顺序执行"></a>顺序执行</h2><p>SingleThreadWebServer顺序处理他的任务：接收到达80端口的HTTP请求<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleThreadWebServer</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span><span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">    ServerSocket socket = <span class="keyword">new</span> ServerSocket(<span class="number">80</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">    Socket connection = socket.accept();</span><br><span class="line">    handleRequest(connection);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="无限创建线程的缺点"><a href="#无限创建线程的缺点" class="headerlink" title="无限创建线程的缺点"></a>无限创建线程的缺点</h3><ol><li>线程生命周期的开销</li><li>资源消耗量、尤其是内存</li><li>稳定性差</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于《Java并发编程实战》，作者Brain等。&lt;/p&gt;
    
    </summary>
    
      <category term="开发者手册" scheme="http://zhoudamin.github.io/categories/%E5%BC%80%E5%8F%91%E8%80%85%E6%89%8B%E5%86%8C/"/>
    
      <category term="编程语言" scheme="http://zhoudamin.github.io/categories/%E5%BC%80%E5%8F%91%E8%80%85%E6%89%8B%E5%86%8C/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="并发" scheme="http://zhoudamin.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Java实现彩色二维码</title>
    <link href="http://zhoudamin.github.io/2018/05/02/Java%E5%AE%9E%E7%8E%B0%E5%BD%A9%E8%89%B2%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    <id>http://zhoudamin.github.io/2018/05/02/Java实现彩色二维码/</id>
    <published>2018-05-02T11:30:05.000Z</published>
    <updated>2018-05-02T11:35:35.945Z</updated>
    
    <content type="html"><![CDATA[<p>使用Zxing库实现彩色二维码的生成，代码如下：<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.zxing.BarcodeFormat;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.EncodeHintType;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.MultiFormatWriter;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.client.j2se.MatrixToImageWriter;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.common.BitMatrix;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.qrcode.QRCodeWriter;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.qrcode.encoder.Encoder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TexturedEncoderHandler</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> contents</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> width</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> height</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> imgPath</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">encode</span><span class="params">(String contents, <span class="keyword">int</span> width, <span class="keyword">int</span> height, ErrorCorrectionLevel level, String imgPath)</span> </span>&#123;</span><br><span class="line">        Hashtable&lt;EncodeHintType, Object&gt; hints = <span class="keyword">new</span> Hashtable&lt;EncodeHintType, Object&gt;();</span><br><span class="line">        <span class="comment">// 指定纠错等级</span></span><br><span class="line">        hints.put(EncodeHintType.ERROR_CORRECTION,  level);</span><br><span class="line">        <span class="comment">// 指定编码格式</span></span><br><span class="line">        hints.put(EncodeHintType.CHARACTER_SET, <span class="string">"GBK"</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> [][] bitMatrix = <span class="keyword">new</span> QRCodeWriter().encode(contents, BarcodeFormat.QR_CODE, width, height, hints);</span><br><span class="line">            <span class="keyword">int</span> len=bitMatrix.length;</span><br><span class="line">            width=len*<span class="number">12</span>;</span><br><span class="line">            <span class="keyword">boolean</span> [][]matrixBoo=<span class="keyword">new</span> <span class="keyword">boolean</span>[width][width];</span><br><span class="line">            MyPic(bitMatrix,matrixBoo,imgPath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">MyPic</span><span class="params">(<span class="keyword">int</span> [][] bitmatrix,<span class="keyword">boolean</span> [][] matrixboo,String pathname)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedImage matrix = <span class="keyword">new</span> BufferedImage(matrixboo.length , matrixboo[<span class="number">0</span>].length, BufferedImage.TYPE_INT_ARGB);</span><br><span class="line">        Random rand = <span class="keyword">new</span> Random();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;bitmatrix.length;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;bitmatrix[<span class="number">0</span>].length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(bitmatrix[i][j]==<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">int</span> rr= rand.nextInt(<span class="number">255</span>);</span><br><span class="line">                    <span class="keyword">int</span> gg= rand.nextInt(<span class="number">255</span>);</span><br><span class="line">                    <span class="keyword">int</span> bb= rand.nextInt(<span class="number">255</span>);</span><br><span class="line">                    Color color = <span class="keyword">new</span> Color(rr, gg, bb);</span><br><span class="line">                    <span class="keyword">int</span> colorInt = color.getRGB();</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> n=i*<span class="number">12</span>;n&lt;(i+<span class="number">1</span>)*<span class="number">12</span>;n++)&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> m=j*<span class="number">12</span>;m&lt;(j+<span class="number">1</span>)*<span class="number">12</span>;m++) &#123;</span><br><span class="line">                            matrixboo[n][m] = <span class="keyword">true</span>;</span><br><span class="line">                            matrix.setRGB(n, m, colorInt );</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ImageIO.write(matrix, <span class="string">"PNG"</span>, <span class="keyword">new</span> File(pathname));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime=System.currentTimeMillis();</span><br><span class="line">        String imgPath = <span class="string">"guangzhou.jpg"</span>;</span><br><span class="line">        String contents = <span class="string">"guangzhou"</span>;</span><br><span class="line">        <span class="keyword">int</span> width = <span class="number">300</span>, height = <span class="number">300</span>;</span><br><span class="line">        ErrorCorrectionLevel level=ErrorCorrectionLevel.L;</span><br><span class="line">        TexturedEncoderHandler handler = <span class="keyword">new</span> TexturedEncoderHandler();</span><br><span class="line">        handler.encode(contents, width, height,  level, imgPath);</span><br><span class="line">        <span class="keyword">long</span> endTime=System.currentTimeMillis(); <span class="comment">//获取结束时间</span></span><br><span class="line">        System.out.println(<span class="string">"程序运行时间： "</span>+(endTime-startTime)+<span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Zxing库实现彩色二维码的生成，代码如下：&lt;br&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://zhoudamin.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java 二维码" scheme="http://zhoudamin.github.io/tags/Java-%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>HTTP基础</title>
    <link href="http://zhoudamin.github.io/2018/04/25/HTTP%E5%9F%BA%E7%A1%80/"/>
    <id>http://zhoudamin.github.io/2018/04/25/HTTP基础/</id>
    <published>2018-04-25T10:18:20.000Z</published>
    <updated>2018-04-25T10:19:08.999Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务器意图"><a href="#服务器意图" class="headerlink" title="服务器意图"></a>服务器意图</h2><blockquote><ul><li>GET：获取资源，用来请求已经被URI识别的资源</li><li>POST：传输实体主体</li><li>PUT：传输文件</li><li>HEAD：获得报文首部</li><li>DELETE：删除文件</li><li>OPTIONS：询问支持的方法</li></ul></blockquote><h2 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h2><table><thead><tr><th></th><th style="text-align:right">类别</th><th style="text-align:center">原因短语</th></tr></thead><tbody><tr><td>1XX</td><td style="text-align:right">Informational(信息性状态码)</td><td style="text-align:center">接收的请求正在处理</td></tr><tr><td>2XX</td><td style="text-align:right">Success(成功状态码)</td><td style="text-align:center">请求正常处理完毕</td></tr><tr><td>3XX</td><td style="text-align:right">Redirection (重定向状态码)</td><td style="text-align:center">需要进行附加操作以完成请求</td></tr><tr><td>4XX</td><td style="text-align:right">Client Error(客户端错误状态码)</td><td style="text-align:center">服务器无法处理请求</td></tr><tr><td>5XX</td><td style="text-align:right">Server Error(服务器错误状态码)</td><td style="text-align:center">服务器处理请求出错</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;服务器意图&quot;&gt;&lt;a href=&quot;#服务器意图&quot; class=&quot;headerlink&quot; title=&quot;服务器意图&quot;&gt;&lt;/a&gt;服务器意图&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;GET：获取资源，用来请求已经被URI识别的资源&lt;/li&gt;
&lt;li&gt;POST：
      
    
    </summary>
    
      <category term="理解计算机" scheme="http://zhoudamin.github.io/categories/%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
    
      <category term="HTTP" scheme="http://zhoudamin.github.io/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>云计算基础</title>
    <link href="http://zhoudamin.github.io/2018/04/25/%E4%BA%91%E8%AE%A1%E7%AE%97%E5%9F%BA%E7%A1%80/"/>
    <id>http://zhoudamin.github.io/2018/04/25/云计算基础/</id>
    <published>2018-04-25T10:13:17.000Z</published>
    <updated>2018-04-25T10:14:35.004Z</updated>
    
    <content type="html"><![CDATA[<h2 id="云计算分类"><a href="#云计算分类" class="headerlink" title="云计算分类"></a>云计算分类</h2><ul><li>IaaS 基础设施即服务</li><li>PaaS 平台即服务</li><li>SaaS 软件即服务</li></ul><h3 id="公有云"><a href="#公有云" class="headerlink" title="公有云"></a>公有云</h3><p>公有云构建在互联网上，任何已付费的用户都可以访问。</p><h3 id="私有云"><a href="#私有云" class="headerlink" title="私有云"></a>私有云</h3><p>私有云构建在局域网内部，属于一个独立的组织。</p><h3 id="混合云"><a href="#混合云" class="headerlink" title="混合云"></a>混合云</h3><p>混合云由公有云和私有云共同构成</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;云计算分类&quot;&gt;&lt;a href=&quot;#云计算分类&quot; class=&quot;headerlink&quot; title=&quot;云计算分类&quot;&gt;&lt;/a&gt;云计算分类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;IaaS 基础设施即服务&lt;/li&gt;
&lt;li&gt;PaaS 平台即服务&lt;/li&gt;
&lt;li&gt;SaaS 软件即服务
      
    
    </summary>
    
      <category term="云计算" scheme="http://zhoudamin.github.io/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
      <category term="云计算" scheme="http://zhoudamin.github.io/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Notes</title>
    <link href="http://zhoudamin.github.io/2018/04/23/Hexo%20Notes/"/>
    <id>http://zhoudamin.github.io/2018/04/23/Hexo Notes/</id>
    <published>2018-04-23T15:07:42.000Z</published>
    <updated>2018-04-23T15:15:14.704Z</updated>
    
    <content type="html"><![CDATA[<p>遇到的小问题</p><a id="more"></a><h1 id="关于设置页宽"><a href="#关于设置页宽" class="headerlink" title="关于设置页宽"></a>关于设置页宽</h1><p>没错，这就是我上面提到的那个主题，这个主题有三种外观，其中我现在使用的是 Pisces Scheme ，但还是做了一些修改，因为原来那个宽度太小了，不适合展示代码块，也不太美观。修改方法如下：<br>Pisces 的布局定义在 source/css/_schemes/Picses/_layout.styl 中，打开文件并在最后添加以下 css<br>引用自  <a href="http://www.aidansu.com/2017/github-pages-build-blog/" target="_blank" rel="noopener">http://www.aidansu.com/2017/github-pages-build-blog/</a><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">    +tablet() &#123;</span><br><span class="line">        <span class="selector-tag">width</span>: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">    +<span class="selector-tag">mobile</span>() &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.main-inner</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">80%</span>;</span><br><span class="line">    +tablet() &#123;</span><br><span class="line">        <span class="selector-tag">width</span>: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">    +<span class="selector-tag">mobile</span>() &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">calc</span>(100% - 260px);</span><br><span class="line">    +tablet() &#123;</span><br><span class="line">        <span class="selector-tag">width</span>: 100%;</span><br><span class="line">    &#125;</span><br><span class="line">    +<span class="selector-tag">mobile</span>() &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;遇到的小问题&lt;/p&gt;
    
    </summary>
    
      <category term="Notes" scheme="http://zhoudamin.github.io/categories/Notes/"/>
    
    
      <category term="Hexo" scheme="http://zhoudamin.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Java 运动模糊</title>
    <link href="http://zhoudamin.github.io/2018/04/23/Java-%E8%BF%90%E5%8A%A8%E6%A8%A1%E7%B3%8A/"/>
    <id>http://zhoudamin.github.io/2018/04/23/Java-运动模糊/</id>
    <published>2018-04-23T12:41:58.000Z</published>
    <updated>2018-04-23T14:32:38.495Z</updated>
    
    <content type="html"><![CDATA[<p>想用Java 写个运动模糊的效果，无奈本人水平有限，国内也没找到资源，于是Google到了一个文档，特地分享出来！</p><a id="more"></a><p>本代码源自   <a href="http://www.jhlabs.com/ip/blurring.html" target="_blank" rel="noopener">http://www.jhlabs.com/ip/blurring.html</a></p><p>Java运动模糊算法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line">import java.awt.*;</span><br><span class="line">import java.awt.geom.*;</span><br><span class="line">import java.awt.image.*;</span><br><span class="line"></span><br><span class="line">public class MotionBlurOp extends AbstractBufferedImageOp &#123;</span><br><span class="line">    private float centreX = 0.5f, centreY = 0.5f;</span><br><span class="line">    private float distance=20.0f;                //这里设置运动距离</span><br><span class="line">    private float angle;</span><br><span class="line">    private float rotation;</span><br><span class="line">    private float zoom;</span><br><span class="line"></span><br><span class="line">    public MotionBlurOp() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public MotionBlurOp( float distance, float angle, float rotation, float zoom ) &#123;</span><br><span class="line">        this.distance = distance;</span><br><span class="line">        this.angle = angle;</span><br><span class="line">        this.rotation = rotation;</span><br><span class="line">        this.zoom = zoom;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAngle( float angle ) &#123;</span><br><span class="line">        this.angle = angle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public float getAngle() &#123;</span><br><span class="line">        return angle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDistance( float distance ) &#123;</span><br><span class="line">        this.distance = distance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public float getDistance() &#123;</span><br><span class="line">        return distance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setRotation( float rotation ) &#123;</span><br><span class="line">        this.rotation = rotation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public float getRotation() &#123;</span><br><span class="line">        return rotation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setZoom( float zoom ) &#123;</span><br><span class="line">        this.zoom = zoom;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public float getZoom() &#123;</span><br><span class="line">        return zoom;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCentreX( float centreX ) &#123;</span><br><span class="line">        this.centreX = centreX;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public float getCentreX() &#123;</span><br><span class="line">        return centreX;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCentreY( float centreY ) &#123;</span><br><span class="line">        this.centreY = centreY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public float getCentreY() &#123;</span><br><span class="line">        return centreY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCentre( Point2D centre ) &#123;</span><br><span class="line">        this.centreX = (float)centre.getX();</span><br><span class="line">        this.centreY = (float)centre.getY();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Point2D getCentre() &#123;</span><br><span class="line">        return new Point2D.Float( centreX, centreY );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int log2( int n ) &#123;</span><br><span class="line">        int m = 1;</span><br><span class="line">        int log2n = 0;</span><br><span class="line"></span><br><span class="line">        while (m &lt; n) &#123;</span><br><span class="line">            m *= 2;</span><br><span class="line">            log2n++;</span><br><span class="line">        &#125;</span><br><span class="line">        return log2n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public BufferedImage filter( BufferedImage src, BufferedImage dst ) &#123;</span><br><span class="line">        if ( dst == null )</span><br><span class="line">            dst = createCompatibleDestImage( src, null );</span><br><span class="line">        BufferedImage tsrc = src;</span><br><span class="line">        float cx = (float)src.getWidth() * centreX;</span><br><span class="line">        float cy = (float)src.getHeight() * centreY;</span><br><span class="line">        float imageRadius = (float)Math.sqrt( cx*cx + cy*cy );</span><br><span class="line">        float translateX = (float)(distance * Math.cos( angle ));</span><br><span class="line">        float translateY = (float)(distance * -Math.sin( angle ));</span><br><span class="line">        float scale = zoom;</span><br><span class="line">        float rotate = rotation;</span><br><span class="line">        float maxDistance = distance + Math.abs(rotation*imageRadius) + zoom*imageRadius;</span><br><span class="line">        int steps = log2((int)maxDistance);</span><br><span class="line"></span><br><span class="line">        translateX /= maxDistance;</span><br><span class="line">        translateY /= maxDistance;</span><br><span class="line">        scale /= maxDistance;</span><br><span class="line">        rotate /= maxDistance;</span><br><span class="line"></span><br><span class="line">        if ( steps == 0 ) &#123;</span><br><span class="line">            Graphics2D g = dst.createGraphics();</span><br><span class="line">            g.drawRenderedImage( src, null );</span><br><span class="line">            g.dispose();</span><br><span class="line">            return dst;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        BufferedImage tmp = createCompatibleDestImage( src, null );</span><br><span class="line">        for ( int i = 0; i &lt; steps; i++ ) &#123;</span><br><span class="line">            Graphics2D g = tmp.createGraphics();</span><br><span class="line">            g.drawImage( tsrc, null, null );</span><br><span class="line">            g.setRenderingHint( RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON );</span><br><span class="line">            g.setRenderingHint( RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR );</span><br><span class="line">            g.setComposite( AlphaComposite.getInstance( AlphaComposite.SRC_OVER, 0.5f ) );</span><br><span class="line"></span><br><span class="line">            g.translate( cx+translateX, cy+translateY );</span><br><span class="line">            g.scale( 1.0001+scale, 1.0001+scale );  // The .0001 works round a bug on Windows where drawImage throws an ArrayIndexOutofBoundException</span><br><span class="line">            if ( rotation != 0 )</span><br><span class="line">                g.rotate( rotate );</span><br><span class="line">            g.translate( -cx, -cy );</span><br><span class="line"></span><br><span class="line">            g.drawImage( dst, null, null );</span><br><span class="line">            g.dispose();</span><br><span class="line">            BufferedImage ti = dst;</span><br><span class="line">            dst = tmp;</span><br><span class="line">            tmp = ti;</span><br><span class="line">            tsrc = dst;</span><br><span class="line"></span><br><span class="line">            translateX *= 2;</span><br><span class="line">            translateY *= 2;</span><br><span class="line">            scale *= 2;</span><br><span class="line">            rotate *= 2;</span><br><span class="line">        &#125;</span><br><span class="line">        return dst;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Blur/Motion Blur...&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import javax.imageio.ImageIO;</span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Created by zdmein on 2018/1/10.</span><br><span class="line"> */</span><br><span class="line">public class MotionBlurOpTest &#123;</span><br><span class="line">    public static void main(String [] args) throws IOException &#123;</span><br><span class="line">        BufferedImage sourceImage = ImageIO.read(new File(&quot;flower.jpg&quot;));</span><br><span class="line">        MotionBlurOp filter=new MotionBlurOp();</span><br><span class="line">        BufferedImage destImage=filter.filter(sourceImage,null);</span><br><span class="line">        ImageIO.write(destImage, &quot;PNG&quot;, new File(&quot;MotionBlurOpflower.jpg&quot;));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="http://images2017.cnblogs.com/blog/1300781/201801/1300781-20180110111018113-450639113.jpg" alt="原图"><br><img src="http://images2017.cnblogs.com/blog/1300781/201801/1300781-20180110111047176-161279166.jpg" alt="Motion"></p><p><img src="http://pic.sc.chinaz.com/files/pic/pic9/201508/apic14250.jpg" alt=""></p><p><img src="http://img.hb.aicdn.com/402338e39ee91c9f2f55116942593e37d009fd15418553-ulMGQY_fw658" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;想用Java 写个运动模糊的效果，无奈本人水平有限，国内也没找到资源，于是Google到了一个文档，特地分享出来！&lt;/p&gt;
    
    </summary>
    
      <category term="图像" scheme="http://zhoudamin.github.io/categories/%E5%9B%BE%E5%83%8F/"/>
    
    
      <category term="Java" scheme="http://zhoudamin.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>优秀博主整理</title>
    <link href="http://zhoudamin.github.io/2017/09/12/%E4%BC%98%E7%A7%80%E5%8D%9A%E4%B8%BB%E6%95%B4%E7%90%86/"/>
    <id>http://zhoudamin.github.io/2017/09/12/优秀博主整理/</id>
    <published>2017-09-12T01:59:40.000Z</published>
    <updated>2018-04-23T15:50:59.749Z</updated>
    
    <content type="html"><![CDATA[<p>优秀博主整理</p><a id="more"></a><table><thead><tr><th>Name</th><th style="text-align:center">Introduction</th></tr></thead><tbody><tr><td><a href="http://www.ityouknow.com" target="_blank" rel="noopener">纯洁的微笑</a></td><td style="text-align:center">资深码农博主，对Spring框架的总结非常不错，现在在一家互联网金融公司做技术经理兼技术负责人</td></tr><tr><td><a href="http://raysmond.com/" target="_blank" rel="noopener">Raysmond</a></td><td style="text-align:center">复旦的计算机研究生，现在在北京工作，生活很精彩，工程能力也非常强，看到他在与我同龄时写的一些代码，非常佩服</td></tr><tr><td><a href="http://yikun.github.io/" target="_blank" rel="noopener">Yikun</a></td><td style="text-align:center">西电毕业的通信领域研究生，去年好像去了菊厂，手绘很棒，生活也很精彩，也是个技术牛人</td></tr><tr><td><a href="http://coolshell.cn/" target="_blank" rel="noopener">酷壳</a></td><td style="text-align:center">耗子叔，业内知名博主，每一篇博文都是经典，15年开发经验的老码农，曾在Amazon，阿里等处做过资深专家</td></tr><tr><td><a href="https://willin.wang/" target="_blank" rel="noopener">王之琳</a></td><td style="text-align:center">12年本科毕业前端交互工程师，能力很强，简历很炫，写的项目非常多，也特别喜欢逛各种论坛</td></tr><tr><td><a href="http://litten.me/" target="_blank" rel="noopener">litten</a></td><td style="text-align:center">毕业于华科的前端工程师，非常文青，我这个博客主题就是他写的，现在鹅厂工作</td></tr><tr><td><a href="http://oilbeater.com/" target="_blank" rel="noopener">Oilbeater</a></td><td style="text-align:center">北大毕业的研究生，曾在阿里任职，现在灵雀云搞Docker，挺有想法的人</td></tr><tr><td><a href="http://zhangwenli.com/" target="_blank" rel="noopener">羡辙</a></td><td style="text-align:center">毕业于上交的研究生，现在是一个非常出色的前端工程师，目前在百度ECharts团队做可视化的相关工作。博客非常有特点，博文质量很高，而且GITHUB的Follower高达4k</td></tr><tr><td><a href="https://www.anotherhome.net/" target="_blank" rel="noopener">DIYgod</a></td><td style="text-align:center">15年毕业的前端工程师，非常二次元，博客也很另类，个人能力也是很强的，喜欢玩GITHUB很棒，也是掘金的联合小编</td></tr><tr><td><a href="http://flygon.net/" target="_blank" rel="noopener">龙哥盟</a></td><td style="text-align:center">16年毕业于上交，项目经验很丰富，而且非常喜欢搞各种教程，GITHUB的Follower也很多</td></tr><tr><td><a href="https://congm.in/" target="_blank" rel="noopener">闵聪</a></td><td style="text-align:center">17年毕业于重邮，项目和实习经验都很丰富，现在似乎去了鹅厂</td></tr><tr><td><a href="https://www.byvoid.com/" target="_blank" rel="noopener">byvoid</a></td><td style="text-align:center">牛x的大佬，搞NOIP进的清华，能力超强，奇闻逸事网上流传了很多，最有名的大概就是报阿里星时候的评价表。。。</td></tr><tr><td><a href="https://yihui.name/" target="_blank" rel="noopener">谢益辉</a></td><td style="text-align:center">在美帝工作的经济学PhD,双语博客从05年更到现在，文笔也牛的不行，现在在RStudio做软件工程师</td></tr><tr><td><a href="http://www.martinrgb.com/" target="_blank" rel="noopener">MartinRGB</a></td><td style="text-align:center">13年西电毕业的交互设计师以及GUI设计师，看了眼博客，没啥说的，不愧是设计师。。。</td></tr><tr><td><a href="http://brianway.github.io/" target="_blank" rel="noopener">魏楚阳</a></td><td style="text-align:center">18年毕业的华科研究生，webporter的开发者，爬虫和数据分析的高端玩家，BAT随便进。。。</td></tr><tr><td><a href="http://www.voidking.com/" target="_blank" rel="noopener">VoidKing</a></td><td style="text-align:center">16级东北师大的软件工程硕士研究生，是个很勤奋的博主，有梦想有想法。</td></tr><tr><td><a href="http://www.yankay.com/" target="_blank" rel="noopener">颜开</a></td><td style="text-align:center">对Java以及分布式数据库等有着非常深厚的积淀，现在任职于EMC，可惜的是博客不怎么更了</td></tr><tr><td><a href="https://livc.io/" target="_blank" rel="noopener">李钊</a></td><td style="text-align:center">东北大学14级同届本科，能力很强，现在百度深度学习实验室。</td></tr><tr><td><a href="http://mazhuang.org/" target="_blank" rel="noopener">马壮</a></td><td style="text-align:center">努力高产的全栈工程师</td></tr><tr><td><a href="http://lingxiankong.github.io" target="_blank" rel="noopener">孔令贤</a></td><td style="text-align:center">11年硕士毕业，前华为 OpenStack 社区开发部技术经理，从14级破格提拔至17级，任总在总裁令中点名致歉的员工，在技术和管理的岔路口迷茫过，博客中也记录了职场中很多心路历程。现在已技术移民新西兰</td></tr><tr><td><a href="http://chocoluffy.com/" target="_blank" rel="noopener">余舜哲</a></td><td style="text-align:center">同龄的同学，现在在多伦多大学留学，对新技术有很大的热情，很不错的博客</td></tr><tr><td><a href="http://www.aneasystone.com/" target="_blank" rel="noopener">aneasystone</a></td><td style="text-align:center">80后码农一枚。喜欢开源，喜欢读书，喜欢折腾，方向是偏信息安全的，目前应该转了java</td></tr><tr><td><a href="http://www.54tianzhisheng.cn" target="_blank" rel="noopener">Zhisheng Tian</a></td><td style="text-align:center">同一届的同学，学习的能力跟写作的条理都非常清楚，基础功很扎实，也是非常值得学习</td></tr><tr><td><a href="http://blog.didispace.com/" target="_blank" rel="noopener">翟永超</a></td><td style="text-align:center">《Spring Cloud 微服务实战》一书作者，对Spring全家桶和微服务架构有着很深刻的理解</td></tr><tr><td><a href="http://irfen.me/" target="_blank" rel="noopener">赵伊凡</a></td><td style="text-align:center">比较喜欢总结知识的90后码农，好像写了本书叫《轻松学算法》</td></tr><tr><td><a href="https://blog.hacking8.com/" target="_blank" rel="noopener">小草窝</a></td><td style="text-align:center">很小就开始写代码的博主，自己写的emlog框架，比较喜欢搞网站安全</td></tr><tr><td><a href="https://biezhi.me/" target="_blank" rel="noopener">王爵</a></td><td style="text-align:center">blade框架的作者，维护了很多开源项目，用blade写的Tale博客框架也挺不错的</td></tr><tr><td><a href="  http://ifeve.com/  " target="_blank" rel="noopener">  并发编程网  </a></td><td style="text-align:center">阿里系的一帮大牛创的技术网站</td></tr><tr><td><a href="  http://www.aidansu.com/  " target="_blank" rel="noopener">  aidan  </a></td><td style="text-align:center">雄哥的博客</td></tr><tr><td><a href="   https://blog.codingnow.com/ " target="_blank" rel="noopener"> 云风的 BLOG   </a></td><td style="text-align:center">总是读成风云…</td></tr><tr><td><a href="  http://www.ruanyifeng.com/blog/  " target="_blank" rel="noopener">  阮一峰的网络日志  </a></td><td style="text-align:center">非常佩服的一位，非常勤，特别能坚持</td></tr><tr><td><a href=" http://blog.zhaojie.me/   " target="_blank" rel="noopener">  老赵  </a></td><td style="text-align:center">赵百万的博客</td></tr><tr><td><a href=" https://congm.in/   " target="_blank" rel="noopener">  闵聪  </a></td><td style="text-align:center">腾讯的</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;优秀博主整理&lt;/p&gt;
    
    </summary>
    
      <category term="Life" scheme="http://zhoudamin.github.io/categories/Life/"/>
    
    
      <category term="博主" scheme="http://zhoudamin.github.io/tags/%E5%8D%9A%E4%B8%BB/"/>
    
  </entry>
  
</feed>
